
can_am_blinker_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009768  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08009950  08009950  0000a950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fdc  08009fdc  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009fdc  08009fdc  0000afdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fe4  08009fe4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fe8  08009fe8  0000afe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009fec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001d4  0800a1c0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800a1c0  0000b470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7c3  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217e  00000000  00000000  000189c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0001ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9d  00000000  00000000  0001b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f3d  00000000  00000000  0001c37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010488  00000000  00000000  0001f2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5d02  00000000  00000000  0002f742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  000e5488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000ea484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08009938 	.word	0x08009938

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08009938 	.word	0x08009938

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b99e 	b.w	8000f94 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f83c 	bl	8000cdc <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2lz>:
 8000c70:	b538      	push	{r3, r4, r5, lr}
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	4604      	mov	r4, r0
 8000c78:	460d      	mov	r5, r1
 8000c7a:	f7ff ff0b 	bl	8000a94 <__aeabi_dcmplt>
 8000c7e:	b928      	cbnz	r0, 8000c8c <__aeabi_d2lz+0x1c>
 8000c80:	4620      	mov	r0, r4
 8000c82:	4629      	mov	r1, r5
 8000c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c88:	f000 b80a 	b.w	8000ca0 <__aeabi_d2ulz>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c92:	f000 f805 	bl	8000ca0 <__aeabi_d2ulz>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	bd38      	pop	{r3, r4, r5, pc}
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_d2ulz>:
 8000ca0:	b5d0      	push	{r4, r6, r7, lr}
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <__aeabi_d2ulz+0x34>)
 8000ca6:	4606      	mov	r6, r0
 8000ca8:	460f      	mov	r7, r1
 8000caa:	f7ff fc81 	bl	80005b0 <__aeabi_dmul>
 8000cae:	f7ff ff57 	bl	8000b60 <__aeabi_d2uiz>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	f7ff fc02 	bl	80004bc <__aeabi_ui2d>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <__aeabi_d2ulz+0x38>)
 8000cbc:	f7ff fc78 	bl	80005b0 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	4639      	mov	r1, r7
 8000cc8:	f7ff faba 	bl	8000240 <__aeabi_dsub>
 8000ccc:	f7ff ff48 	bl	8000b60 <__aeabi_d2uiz>
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd4:	3df00000 	.word	0x3df00000
 8000cd8:	41f00000 	.word	0x41f00000

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9d08      	ldr	r5, [sp, #32]
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14e      	bne.n	8000d86 <__udivmoddi4+0xaa>
 8000ce8:	4694      	mov	ip, r2
 8000cea:	458c      	cmp	ip, r1
 8000cec:	4686      	mov	lr, r0
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	d962      	bls.n	8000dba <__udivmoddi4+0xde>
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	4319      	orrs	r1, r3
 8000d06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d22:	fb04 f106 	mul.w	r1, r4, r6
 8000d26:	4299      	cmp	r1, r3
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x64>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d32:	f080 8110 	bcs.w	8000f56 <__udivmoddi4+0x27a>
 8000d36:	4299      	cmp	r1, r3
 8000d38:	f240 810d 	bls.w	8000f56 <__udivmoddi4+0x27a>
 8000d3c:	3c02      	subs	r4, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a59      	subs	r1, r3, r1
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d56:	429e      	cmp	r6, r3
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x94>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d62:	f080 80fa 	bcs.w	8000f5a <__udivmoddi4+0x27e>
 8000d66:	429e      	cmp	r6, r3
 8000d68:	f240 80f7 	bls.w	8000f5a <__udivmoddi4+0x27e>
 8000d6c:	4463      	add	r3, ip
 8000d6e:	3802      	subs	r0, #2
 8000d70:	2100      	movs	r1, #0
 8000d72:	1b9b      	subs	r3, r3, r6
 8000d74:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d78:	b11d      	cbz	r5, 8000d82 <__udivmoddi4+0xa6>
 8000d7a:	40d3      	lsrs	r3, r2
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d905      	bls.n	8000d96 <__udivmoddi4+0xba>
 8000d8a:	b10d      	cbz	r5, 8000d90 <__udivmoddi4+0xb4>
 8000d8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d90:	2100      	movs	r1, #0
 8000d92:	4608      	mov	r0, r1
 8000d94:	e7f5      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000d96:	fab3 f183 	clz	r1, r3
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	d146      	bne.n	8000e2c <__udivmoddi4+0x150>
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xcc>
 8000da2:	4290      	cmp	r0, r2
 8000da4:	f0c0 80ee 	bcc.w	8000f84 <__udivmoddi4+0x2a8>
 8000da8:	1a86      	subs	r6, r0, r2
 8000daa:	eb64 0303 	sbc.w	r3, r4, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d0e6      	beq.n	8000d82 <__udivmoddi4+0xa6>
 8000db4:	e9c5 6300 	strd	r6, r3, [r5]
 8000db8:	e7e3      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	f040 808f 	bne.w	8000ede <__udivmoddi4+0x202>
 8000dc0:	eba1 040c 	sub.w	r4, r1, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dca:	fa1f f78c 	uxth.w	r7, ip
 8000dce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x11c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x11a>
 8000df0:	4298      	cmp	r0, r3
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b0>
 8000df6:	4626      	mov	r6, r4
 8000df8:	1a1c      	subs	r4, r3, r0
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0e:	429f      	cmp	r7, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x148>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x146>
 8000e1c:	429f      	cmp	r7, r3
 8000e1e:	f200 80ae 	bhi.w	8000f7e <__udivmoddi4+0x2a2>
 8000e22:	4620      	mov	r0, r4
 8000e24:	1bdb      	subs	r3, r3, r7
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0x9c>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa24 f607 	lsr.w	r6, r4, r7
 8000e3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e42:	fbb6 f8f9 	udiv	r8, r6, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 6618 	mls	r6, r9, r8, r6
 8000e4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e52:	408c      	lsls	r4, r1
 8000e54:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e58:	fb08 f00e 	mul.w	r0, r8, lr
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	0c23      	lsrs	r3, r4, #16
 8000e60:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e64:	4298      	cmp	r0, r3
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	d90a      	bls.n	8000e82 <__udivmoddi4+0x1a6>
 8000e6c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e70:	f108 36ff 	add.w	r6, r8, #4294967295
 8000e74:	f080 8081 	bcs.w	8000f7a <__udivmoddi4+0x29e>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	d97e      	bls.n	8000f7a <__udivmoddi4+0x29e>
 8000e7c:	f1a8 0802 	sub.w	r8, r8, #2
 8000e80:	4463      	add	r3, ip
 8000e82:	1a1e      	subs	r6, r3, r0
 8000e84:	fbb6 f3f9 	udiv	r3, r6, r9
 8000e88:	fb09 6613 	mls	r6, r9, r3, r6
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	b2a4      	uxth	r4, r4
 8000e92:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000e96:	45a6      	cmp	lr, r4
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x1d0>
 8000e9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea2:	d266      	bcs.n	8000f72 <__udivmoddi4+0x296>
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d964      	bls.n	8000f72 <__udivmoddi4+0x296>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4464      	add	r4, ip
 8000eac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000eb0:	fba0 8302 	umull	r8, r3, r0, r2
 8000eb4:	eba4 040e 	sub.w	r4, r4, lr
 8000eb8:	429c      	cmp	r4, r3
 8000eba:	46c6      	mov	lr, r8
 8000ebc:	461e      	mov	r6, r3
 8000ebe:	d350      	bcc.n	8000f62 <__udivmoddi4+0x286>
 8000ec0:	d04d      	beq.n	8000f5e <__udivmoddi4+0x282>
 8000ec2:	b155      	cbz	r5, 8000eda <__udivmoddi4+0x1fe>
 8000ec4:	ebba 030e 	subs.w	r3, sl, lr
 8000ec8:	eb64 0406 	sbc.w	r4, r4, r6
 8000ecc:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed0:	40cb      	lsrs	r3, r1
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	e9c5 7400 	strd	r7, r4, [r5]
 8000eda:	2100      	movs	r1, #0
 8000edc:	e751      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000ede:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d9      	lsrs	r1, r3
 8000ee8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eec:	fa20 f303 	lsr.w	r3, r0, r3
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ef8:	fb08 1110 	mls	r1, r8, r0, r1
 8000efc:	4094      	lsls	r4, r2
 8000efe:	431c      	orrs	r4, r3
 8000f00:	fa1f f78c 	uxth.w	r7, ip
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x248>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29a>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29a>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2a:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x272>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x292>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x292>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e73b      	b.n	8000dce <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f2      	b.n	8000d40 <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e708      	b.n	8000d70 <__udivmoddi4+0x94>
 8000f5e:	45c2      	cmp	sl, r8
 8000f60:	d2af      	bcs.n	8000ec2 <__udivmoddi4+0x1e6>
 8000f62:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f66:	eb63 060c 	sbc.w	r6, r3, ip
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a9      	b.n	8000ec2 <__udivmoddi4+0x1e6>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x272>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e79a      	b.n	8000eac <__udivmoddi4+0x1d0>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x248>
 8000f7a:	46b0      	mov	r8, r6
 8000f7c:	e781      	b.n	8000e82 <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74f      	b.n	8000e24 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e711      	b.n	8000db0 <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f001 f898 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f898 	bl	80010d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize UART properties */
  uart.errorflag      = false;
 8000fa4:	4b41      	ldr	r3, [pc, #260]	@ (80010ac <main+0x114>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  uart.validmsg       = false;
 8000fac:	4b3f      	ldr	r3, [pc, #252]	@ (80010ac <main+0x114>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  uart.msg_state      = STATESTART;
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <main+0x114>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  uart.len_verify     = 0;                        // Initialize length verify counter to 0
 8000fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ac <main+0x114>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  uart.producer_index = 0;                        // Initialize consumer index
 8000fc4:	4b39      	ldr	r3, [pc, #228]	@ (80010ac <main+0x114>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  uart.consumer_index = 0;                        // Initialize producer index
 8000fcc:	4b37      	ldr	r3, [pc, #220]	@ (80010ac <main+0x114>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  uart.inmenu         = false;                    // Will not start out in console menu
 8000fd4:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <main+0x114>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f994 	bl	8001308 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fe0:	f000 f8e2 	bl	80011a8 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000fe4:	f000 f930 	bl	8001248 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000fe8:	f000 f964 	bl	80012b4 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000fec:	f000 f8c2 	bl	8001174 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  init_timer ();
 8000ff0:	f000 fa02 	bl	80013f8 <init_timer>
  HAL_TIM_Base_Start_IT(&htim6);
 8000ff4:	482e      	ldr	r0, [pc, #184]	@ (80010b0 <main+0x118>)
 8000ff6:	f002 faf7 	bl	80035e8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1); //Needed for interrupt callback.
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	492d      	ldr	r1, [pc, #180]	@ (80010b4 <main+0x11c>)
 8000ffe:	482e      	ldr	r0, [pc, #184]	@ (80010b8 <main+0x120>)
 8001000:	f002 ff89 	bl	8003f16 <HAL_UART_Receive_IT>
  {

    /**
     * Message handling
     */
    if (uart.byte_counter >= MAX_RX_BUF_INDEX) 
 8001004:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <main+0x114>)
 8001006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800100a:	2b1f      	cmp	r3, #31
 800100c:	d903      	bls.n	8001016 <main+0x7e>
    {
      ResetRxBuffer(& uart);                        //Something went wrong, reset the RX buffer.
 800100e:	4827      	ldr	r0, [pc, #156]	@ (80010ac <main+0x114>)
 8001010:	f000 fdea 	bl	8001be8 <ResetRxBuffer>
 8001014:	e00a      	b.n	800102c <main+0x94>
    }
    else if(uart.consumer_index != uart.producer_index) 
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <main+0x114>)
 8001018:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800101c:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <main+0x114>)
 800101e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001022:	429a      	cmp	r2, r3
 8001024:	d002      	beq.n	800102c <main+0x94>
    { 
      HandleByte(& uart); 
 8001026:	4821      	ldr	r0, [pc, #132]	@ (80010ac <main+0x114>)
 8001028:	f000 fdfa 	bl	8001c20 <HandleByte>
    }

    if(tim.flag_10ms_tick) 
 800102c:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <main+0x124>)
 800102e:	799b      	ldrb	r3, [r3, #6]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <main+0xa6>
    {
      tim.flag_10ms_tick = false;
 8001034:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <main+0x124>)
 8001036:	2200      	movs	r2, #0
 8001038:	719a      	strb	r2, [r3, #6]
      check_button_states(); 
 800103a:	f000 fa01 	bl	8001440 <check_button_states>
    }

    if(tim.flag_100ms_tick) 
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <main+0x124>)
 8001040:	79db      	ldrb	r3, [r3, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d018      	beq.n	8001078 <main+0xe0>
    {
    	HAL_IWDG_Refresh(&hiwdg);  // Refresh the watchdog. 
 8001046:	481e      	ldr	r0, [pc, #120]	@ (80010c0 <main+0x128>)
 8001048:	f001 fd28 	bl	8002a9c <HAL_IWDG_Refresh>

      tim.flag_100ms_tick = false;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <main+0x124>)
 800104e:	2200      	movs	r2, #0
 8001050:	71da      	strb	r2, [r3, #7]
      /**
       * We haven't hit the max "quick flash" count total
       * but we are turning 
       **/

      if(but.quick_flash_counts < MAX_NUM_OF_QUICK_FLASHES &&
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <main+0x12c>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b13      	cmp	r3, #19
 8001058:	d80e      	bhi.n	8001078 <main+0xe0>
        blinker_state != IDLE) 
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <main+0x130>)
 800105c:	781b      	ldrb	r3, [r3, #0]
      if(but.quick_flash_counts < MAX_NUM_OF_QUICK_FLASHES &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00a      	beq.n	8001078 <main+0xe0>
      {
        HAL_GPIO_TogglePin(TAILLIGHT_FLASHER_TTL_GPIO_Port, TAILLIGHT_FLASHER_TTL_Pin);  
 8001062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001066:	4819      	ldr	r0, [pc, #100]	@ (80010cc <main+0x134>)
 8001068:	f001 fcbb 	bl	80029e2 <HAL_GPIO_TogglePin>
        but.quick_flash_counts++;
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <main+0x12c>)
 800106e:	789b      	ldrb	r3, [r3, #2]
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <main+0x12c>)
 8001076:	709a      	strb	r2, [r3, #2]
      }

    }
	  

    if(tim.flag_500ms_tick) 
 8001078:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <main+0x124>)
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0c1      	beq.n	8001004 <main+0x6c>
    {
      tim.flag_500ms_tick = false;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <main+0x124>)
 8001082:	2200      	movs	r2, #0
 8001084:	721a      	strb	r2, [r3, #8]
      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);   // Board LED 
 8001086:	2101      	movs	r1, #1
 8001088:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <main+0x138>)
 800108a:	f001 fcaa 	bl	80029e2 <HAL_GPIO_TogglePin>
      /**
       * The switch flash rate is always at this rate
       * It will only flash if the switch is in the correct position
       * thus this output can continuously toggle
       **/
      HAL_GPIO_TogglePin(SW_FLASHER_TTL_GPIO_Port, SW_FLASHER_TTL_Pin);   
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	480e      	ldr	r0, [pc, #56]	@ (80010cc <main+0x134>)
 8001094:	f001 fca5 	bl	80029e2 <HAL_GPIO_TogglePin>
    
      if(but.quick_flash_counts >= MAX_NUM_OF_QUICK_FLASHES) 
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <main+0x12c>)
 800109a:	789b      	ldrb	r3, [r3, #2]
 800109c:	2b13      	cmp	r3, #19
 800109e:	d9b1      	bls.n	8001004 <main+0x6c>
      {
        HAL_GPIO_TogglePin(TAILLIGHT_FLASHER_TTL_GPIO_Port, TAILLIGHT_FLASHER_TTL_Pin);  
 80010a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a4:	4809      	ldr	r0, [pc, #36]	@ (80010cc <main+0x134>)
 80010a6:	f001 fc9c 	bl	80029e2 <HAL_GPIO_TogglePin>
    if (uart.byte_counter >= MAX_RX_BUF_INDEX) 
 80010aa:	e7ab      	b.n	8001004 <main+0x6c>
 80010ac:	200001f0 	.word	0x200001f0
 80010b0:	2000028c 	.word	0x2000028c
 80010b4:	20000211 	.word	0x20000211
 80010b8:	200002d4 	.word	0x200002d4
 80010bc:	20000220 	.word	0x20000220
 80010c0:	20000238 	.word	0x20000238
 80010c4:	20000230 	.word	0x20000230
 80010c8:	20000236 	.word	0x20000236
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40011000 	.word	0x40011000

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	2238      	movs	r2, #56	@ 0x38
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fc63 	bl	80059ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010f6:	2309      	movs	r3, #9
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001114:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800111a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800111e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001120:	2300      	movs	r3, #0
 8001122:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fcc7 	bl	8002abc <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001134:	f000 fa90 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f001 ffc8 	bl	80030e8 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800115e:	f000 fa7b 	bl	8001658 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001162:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <SystemClock_Config+0x9c>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	@ 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	42420070 	.word	0x42420070

08001174 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_IWDG_Init+0x2c>)
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <MX_IWDG_Init+0x30>)
 800117c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800117e:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <MX_IWDG_Init+0x2c>)
 8001180:	2203      	movs	r2, #3
 8001182:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1499;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_IWDG_Init+0x2c>)
 8001186:	f240 52db 	movw	r2, #1499	@ 0x5db
 800118a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_IWDG_Init+0x2c>)
 800118e:	f001 fc41 	bl	8002a14 <HAL_IWDG_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001198:	f000 fa5e 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000238 	.word	0x20000238
 80011a4:	40003000 	.word	0x40003000

080011a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001244 <MX_TIM1_Init+0x9c>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f0:	4813      	ldr	r0, [pc, #76]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011f2:	f002 f9a9 	bl	8003548 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011fc:	f000 fa2c 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_TIM1_Init+0x98>)
 800120e:	f002 fb35 	bl	800387c <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001218:	f000 fa1e 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_TIM1_Init+0x98>)
 800122a:	f002 fd21 	bl	8003c70 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001234:	f000 fa10 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000244 	.word	0x20000244
 8001244:	40012c00 	.word	0x40012c00

08001248 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_TIM6_Init+0x64>)
 8001258:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <MX_TIM6_Init+0x68>)
 800125a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 800125c:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_TIM6_Init+0x64>)
 800125e:	2247      	movs	r2, #71	@ 0x47
 8001260:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_TIM6_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <MX_TIM6_Init+0x64>)
 800126a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800126e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_TIM6_Init+0x64>)
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_TIM6_Init+0x64>)
 8001278:	f002 f966 	bl	8003548 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001282:	f000 f9e9 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_TIM6_Init+0x64>)
 8001294:	f002 fcec 	bl	8003c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800129e:	f000 f9db 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000028c 	.word	0x2000028c
 80012b0:	40001000 	.word	0x40001000

080012b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <MX_USART1_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012c0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80012c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ec:	f002 fd38 	bl	8003d60 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 f9af 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200002d4 	.word	0x200002d4
 8001304:	40013800 	.word	0x40013800

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131c:	4b33      	ldr	r3, [pc, #204]	@ (80013ec <MX_GPIO_Init+0xe4>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a32      	ldr	r2, [pc, #200]	@ (80013ec <MX_GPIO_Init+0xe4>)
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <MX_GPIO_Init+0xe4>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <MX_GPIO_Init+0xe4>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a2c      	ldr	r2, [pc, #176]	@ (80013ec <MX_GPIO_Init+0xe4>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <MX_GPIO_Init+0xe4>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <MX_GPIO_Init+0xe4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <MX_GPIO_Init+0xe4>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <MX_GPIO_Init+0xe4>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_GPIO_Init+0xe4>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a20      	ldr	r2, [pc, #128]	@ (80013ec <MX_GPIO_Init+0xe4>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_GPIO_Init+0xe4>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	481b      	ldr	r0, [pc, #108]	@ (80013f0 <MX_GPIO_Init+0xe8>)
 8001382:	f001 fb16 	bl	80029b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RT_nLT_TTL_Pin|EN_LIGHTS_TTL_Pin|SW_FLASHER_TTL_Pin|TAILLIGHT_FLASHER_TTL_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800138c:	4819      	ldr	r0, [pc, #100]	@ (80013f4 <MX_GPIO_Init+0xec>)
 800138e:	f001 fb10 	bl	80029b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HLTH_LED_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin;
 8001392:	2301      	movs	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HLTH_LED_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	4811      	ldr	r0, [pc, #68]	@ (80013f0 <MX_GPIO_Init+0xe8>)
 80013aa:	f001 f967 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_TURN_GPI_Pin RIGHT_TURN_GPI_Pin */
  GPIO_InitStruct.Pin = LEFT_TURN_GPI_Pin|RIGHT_TURN_GPI_Pin;
 80013ae:	2360      	movs	r3, #96	@ 0x60
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <MX_GPIO_Init+0xe8>)
 80013c2:	f001 f95b 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : RT_nLT_TTL_Pin EN_LIGHTS_TTL_Pin SW_FLASHER_TTL_Pin TAILLIGHT_FLASHER_TTL_Pin */
  GPIO_InitStruct.Pin = RT_nLT_TTL_Pin|EN_LIGHTS_TTL_Pin|SW_FLASHER_TTL_Pin|TAILLIGHT_FLASHER_TTL_Pin;
 80013c6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_GPIO_Init+0xec>)
 80013e0:	f001 f94c 	bl	800267c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <init_timer>:
/* USER CODE BEGIN 4 */

/********************************************//**
*  @brief Initialize timer events 
***********************************************/
void init_timer ( void ) {
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  tim.led_fast_blink = false;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <init_timer+0x44>)
 80013fe:	2200      	movs	r2, #0
 8001400:	725a      	strb	r2, [r3, #9]
  tim.flag_10ms_tick = false;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <init_timer+0x44>)
 8001404:	2200      	movs	r2, #0
 8001406:	719a      	strb	r2, [r3, #6]
  tim.flag_100ms_tick = false;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <init_timer+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	71da      	strb	r2, [r3, #7]
  tim.flag_500ms_tick = false;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <init_timer+0x44>)
 8001410:	2200      	movs	r2, #0
 8001412:	721a      	strb	r2, [r3, #8]
  tim.ticks10ms = 0;
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <init_timer+0x44>)
 8001416:	2200      	movs	r2, #0
 8001418:	801a      	strh	r2, [r3, #0]
  tim.ticks100ms = 0;
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <init_timer+0x44>)
 800141c:	2200      	movs	r2, #0
 800141e:	805a      	strh	r2, [r3, #2]
  tim.ticks500ms = 0;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <init_timer+0x44>)
 8001422:	2200      	movs	r2, #0
 8001424:	809a      	strh	r2, [r3, #4]

  tim.timer_100ms_running = false;
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <init_timer+0x44>)
 8001428:	2200      	movs	r2, #0
 800142a:	731a      	strb	r2, [r3, #12]
  tim.timer_100ms_cntr = 0;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <init_timer+0x44>)
 800142e:	2200      	movs	r2, #0
 8001430:	815a      	strh	r2, [r3, #10]

}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000220 	.word	0x20000220

08001440 <check_button_states>:

/**********************************************
 *  @brief Function for checking switch status   
 ***********************************************/
void check_button_states( void )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  
  /**
   * Case where button is in neutral position
   */
  if( !HAL_GPIO_ReadPin(LEFT_TURN_GPI_GPIO_Port, LEFT_TURN_GPI_Pin) && 
 8001444:	2120      	movs	r1, #32
 8001446:	483a      	ldr	r0, [pc, #232]	@ (8001530 <check_button_states+0xf0>)
 8001448:	f001 fa9c 	bl	8002984 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11f      	bne.n	8001492 <check_button_states+0x52>
      !HAL_GPIO_ReadPin(RIGHT_TURN_GPI_GPIO_Port, RIGHT_TURN_GPI_Pin)) {
 8001452:	2140      	movs	r1, #64	@ 0x40
 8001454:	4836      	ldr	r0, [pc, #216]	@ (8001530 <check_button_states+0xf0>)
 8001456:	f001 fa95 	bl	8002984 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
  if( !HAL_GPIO_ReadPin(LEFT_TURN_GPI_GPIO_Port, LEFT_TURN_GPI_Pin) && 
 800145c:	2b00      	cmp	r3, #0
 800145e:	d118      	bne.n	8001492 <check_button_states+0x52>

    but.left_turn_debounce_counter  = 0;
 8001460:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <check_button_states+0xf4>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
    but.right_turn_debounce_counter = 0;
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <check_button_states+0xf4>)
 8001468:	2200      	movs	r2, #0
 800146a:	705a      	strb	r2, [r3, #1]
    but.quick_flash_counts          = 0;
 800146c:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <check_button_states+0xf4>)
 800146e:	2200      	movs	r2, #0
 8001470:	709a      	strb	r2, [r3, #2]

    /* Set the state to idle */
    blinker_state = IDLE;
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <check_button_states+0xf8>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
    
    /* Verify the outputs are inactive */
    HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, false);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800147e:	482f      	ldr	r0, [pc, #188]	@ (800153c <check_button_states+0xfc>)
 8001480:	f001 fa97 	bl	80029b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, false);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800148a:	482c      	ldr	r0, [pc, #176]	@ (800153c <check_button_states+0xfc>)
 800148c:	f001 fa91 	bl	80029b2 <HAL_GPIO_WritePin>
 8001490:	e019      	b.n	80014c6 <check_button_states+0x86>
  /**
   * See if either Left or Right is selected 
   * and then increase the debounce counter appropriately
   */
  else {
    if(HAL_GPIO_ReadPin(LEFT_TURN_GPI_GPIO_Port, LEFT_TURN_GPI_Pin)){
 8001492:	2120      	movs	r1, #32
 8001494:	4826      	ldr	r0, [pc, #152]	@ (8001530 <check_button_states+0xf0>)
 8001496:	f001 fa75 	bl	8002984 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <check_button_states+0x6c>
      but.left_turn_debounce_counter ++;
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <check_button_states+0xf4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <check_button_states+0xf4>)
 80014aa:	701a      	strb	r2, [r3, #0]
    }
    if(HAL_GPIO_ReadPin(RIGHT_TURN_GPI_GPIO_Port, RIGHT_TURN_GPI_Pin)){
 80014ac:	2140      	movs	r1, #64	@ 0x40
 80014ae:	4820      	ldr	r0, [pc, #128]	@ (8001530 <check_button_states+0xf0>)
 80014b0:	f001 fa68 	bl	8002984 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <check_button_states+0x86>
      but.right_turn_debounce_counter ++;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <check_button_states+0xf4>)
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	3301      	adds	r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <check_button_states+0xf4>)
 80014c4:	705a      	strb	r2, [r3, #1]

  /**
   * Left turn input surpassed 
   * debounce filter
   */
  if(but.left_turn_debounce_counter >= BUTTON_DEBOUNCE_MSX10){
 80014c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <check_button_states+0xf4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b13      	cmp	r3, #19
 80014cc:	d915      	bls.n	80014fa <check_button_states+0xba>
    but.left_turn_active = true;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <check_button_states+0xf4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	70da      	strb	r2, [r3, #3]
    but.left_turn_debounce_counter = 0;
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <check_button_states+0xf4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
    blinker_state = LEFT_TURN;
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <check_button_states+0xf8>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
    
    /* Define pin states to correctly illuminate the taillight flasher */
    HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, true);
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e6:	4815      	ldr	r0, [pc, #84]	@ (800153c <check_button_states+0xfc>)
 80014e8:	f001 fa63 	bl	80029b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, false);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f2:	4812      	ldr	r0, [pc, #72]	@ (800153c <check_button_states+0xfc>)
 80014f4:	f001 fa5d 	bl	80029b2 <HAL_GPIO_WritePin>
    /* Define pin states to correctly illuminate the taillight flasher */
    HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, true);
    HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, true);
  }

}
 80014f8:	e018      	b.n	800152c <check_button_states+0xec>
  else if (but.right_turn_debounce_counter >= BUTTON_DEBOUNCE_MSX10) {
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <check_button_states+0xf4>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	2b13      	cmp	r3, #19
 8001500:	d914      	bls.n	800152c <check_button_states+0xec>
    but.right_turn_active = true;
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <check_button_states+0xf4>)
 8001504:	2201      	movs	r2, #1
 8001506:	711a      	strb	r2, [r3, #4]
    but.right_turn_debounce_counter = 0;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <check_button_states+0xf4>)
 800150a:	2200      	movs	r2, #0
 800150c:	705a      	strb	r2, [r3, #1]
    blinker_state = RIGHT_TURN;
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <check_button_states+0xf8>)
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, true);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151a:	4808      	ldr	r0, [pc, #32]	@ (800153c <check_button_states+0xfc>)
 800151c:	f001 fa49 	bl	80029b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, true);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <check_button_states+0xfc>)
 8001528:	f001 fa43 	bl	80029b2 <HAL_GPIO_WritePin>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40011000 	.word	0x40011000
 8001534:	20000230 	.word	0x20000230
 8001538:	20000236 	.word	0x20000236
 800153c:	40010c00 	.word	0x40010c00

08001540 <HAL_TIM_PeriodElapsedCallback>:

/********************************************//**
*  @brief Handle Timer Interrupts 
***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a24      	ldr	r2, [pc, #144]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d140      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x92>
			tim.flag_10ms_tick = true;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001552:	2201      	movs	r2, #1
 8001554:	719a      	strb	r2, [r3, #6]

		 if(tim.ticks10ms == 9) {
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d133      	bne.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x86>
		   tim.ticks10ms = 0;
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001560:	2200      	movs	r2, #0
 8001562:	801a      	strh	r2, [r3, #0]
		   tim.flag_100ms_tick = true;
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001566:	2201      	movs	r2, #1
 8001568:	71da      	strb	r2, [r3, #7]
       if(tim.timer_100ms_running) {
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800156c:	7b1b      	ldrb	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_TIM_PeriodElapsedCallback+0x40>
        tim.timer_100ms_cntr++;
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001574:	895b      	ldrh	r3, [r3, #10]
 8001576:	3301      	adds	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800157c:	815a      	strh	r2, [r3, #10]
 800157e:	e002      	b.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x46>
       }
       else {
        tim.timer_100ms_cntr = 0;
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001582:	2200      	movs	r2, #0
 8001584:	815a      	strh	r2, [r3, #10]
       }

		   if(tim.ticks100ms == 4) {
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001588:	885b      	ldrh	r3, [r3, #2]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d114      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x78>
			 tim.ticks100ms = 0;
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001590:	2200      	movs	r2, #0
 8001592:	805a      	strh	r2, [r3, #2]
			 tim.flag_500ms_tick = true;
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001596:	2201      	movs	r2, #1
 8001598:	721a      	strb	r2, [r3, #8]

			 if(tim.ticks500ms == 119)										// One minute worth of half seconds
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	2b77      	cmp	r3, #119	@ 0x77
 80015a0:	d103      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0x6a>
			   tim.ticks500ms = 0;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	809a      	strh	r2, [r3, #4]
		 else {
		   tim.ticks10ms += 1;
		 }

		}
}
 80015a8:	e013      	b.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x92>
			   tim.ticks500ms += 1;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015ac:	889b      	ldrh	r3, [r3, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015b4:	809a      	strh	r2, [r3, #4]
}
 80015b6:	e00c      	b.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x92>
			   tim.ticks100ms += 1;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015ba:	885b      	ldrh	r3, [r3, #2]
 80015bc:	3301      	adds	r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015c2:	805a      	strh	r2, [r3, #2]
}
 80015c4:	e005      	b.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x92>
		   tim.ticks10ms += 1;
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015d0:	801a      	strh	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	2000028c 	.word	0x2000028c
 80015e0:	20000220 	.word	0x20000220

080015e4 <HAL_UART_RxCpltCallback>:

/**********************************************
 *  @brief Handle UART RX interrupts
 ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(huart == &huart1) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a17      	ldr	r2, [pc, #92]	@ (800164c <HAL_UART_RxCpltCallback+0x68>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d127      	bne.n	8001644 <HAL_UART_RxCpltCallback+0x60>
    
    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 80015f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 80015fe:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 8001604:	5499      	strb	r1, [r3, r2]
    uart.byte_counter++;                                                   //Increase data counter
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 8001608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800160c:	3301      	adds	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 8001612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 8001618:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800161c:	2b1f      	cmp	r3, #31
 800161e:	d904      	bls.n	800162a <HAL_UART_RxCpltCallback+0x46>
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001628:	e007      	b.n	800163a <HAL_UART_RxCpltCallback+0x56>
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 800162c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001630:	3301      	adds	r3, #1
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_UART_RxCpltCallback+0x6c>)
 8001636:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	4905      	ldr	r1, [pc, #20]	@ (8001654 <HAL_UART_RxCpltCallback+0x70>)
 800163e:	4803      	ldr	r0, [pc, #12]	@ (800164c <HAL_UART_RxCpltCallback+0x68>)
 8001640:	f002 fc69 	bl	8003f16 <HAL_UART_Receive_IT>
	}
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002d4 	.word	0x200002d4
 8001650:	200001f0 	.word	0x200001f0
 8001654:	20000211 	.word	0x20000211

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <Error_Handler+0x8>

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_MspInit+0x5c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_MspInit+0x60>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_MspInit+0x60>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_TIM_Base_MspInit+0x68>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10c      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 80016e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016f2:	e018      	b.n	8001726 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <HAL_TIM_Base_MspInit+0x70>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d113      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2036      	movs	r0, #54	@ 0x36
 800171c:	f000 fe35 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001720:	2036      	movs	r0, #54	@ 0x36
 8001722:	f000 fe4e 	bl	80023c2 <HAL_NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40012c00 	.word	0x40012c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40001000 	.word	0x40001000

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <HAL_UART_MspInit+0x9c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d139      	bne.n	80017d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_UART_MspInit+0xa0>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a1e      	ldr	r2, [pc, #120]	@ (80017dc <HAL_UART_MspInit+0xa0>)
 8001762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <HAL_UART_MspInit+0xa0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_UART_MspInit+0xa0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_UART_MspInit+0xa0>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_UART_MspInit+0xa0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800178c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	@ (80017e0 <HAL_UART_MspInit+0xa4>)
 80017a2:	f000 ff6b 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <HAL_UART_MspInit+0xa4>)
 80017bc:	f000 ff5e 	bl	800267c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2025      	movs	r0, #37	@ 0x25
 80017c6:	f000 fde0 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ca:	2025      	movs	r0, #37	@ 0x25
 80017cc:	f000 fdf9 	bl	80023c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010800 	.word	0x40010800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 fc92 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <USART1_IRQHandler+0x10>)
 8001842:	f002 fb8d 	bl	8003f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002d4 	.word	0x200002d4

08001850 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM6_IRQHandler+0x10>)
 8001856:	f001 ff21 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000028c 	.word	0x2000028c

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_kill>:

int _kill(int pid, int sig)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187c:	f004 f8ea 	bl	8005a54 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	2216      	movs	r2, #22
 8001884:	601a      	str	r2, [r3, #0]
  return -1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_exit>:

void _exit (int status)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189a:	f04f 31ff 	mov.w	r1, #4294967295
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffe7 	bl	8001872 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <_exit+0x12>

080018a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e00a      	b.n	80018d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ba:	f3af 8000 	nop.w
 80018be:	4601      	mov	r1, r0
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf0      	blt.n	80018ba <_read+0x12>
  }

  return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e009      	b.n	8001908 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf1      	blt.n	80018f4 <_write+0x12>
  }
  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_close>:

int _close(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	605a      	str	r2, [r3, #4]
  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f004 f852 	bl	8005a54 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20010000 	.word	0x20010000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	2000031c 	.word	0x2000031c
 80019e4:	20000470 	.word	0x20000470

080019e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <print_string>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 8001a04:	e009      	b.n	8001a1a <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4819      	ldr	r0, [pc, #100]	@ (8001a74 <print_string+0x80>)
 8001a10:	f002 f9f6 	bl	8003e00 <HAL_UART_Transmit>
        s++;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f1      	bne.n	8001a06 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d114      	bne.n	8001a52 <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001a28:	230d      	movs	r3, #13
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	f107 010f 	add.w	r1, r7, #15
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	2201      	movs	r2, #1
 8001a36:	480f      	ldr	r0, [pc, #60]	@ (8001a74 <print_string+0x80>)
 8001a38:	f002 f9e2 	bl	8003e00 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	f107 010f 	add.w	r1, r7, #15
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
 8001a48:	2201      	movs	r2, #1
 8001a4a:	480a      	ldr	r0, [pc, #40]	@ (8001a74 <print_string+0x80>)
 8001a4c:	f002 f9d8 	bl	8003e00 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 8001a50:	e00c      	b.n	8001a6c <print_string+0x78>
    else if(action == CR) {
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d109      	bne.n	8001a6c <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001a58:	230d      	movs	r3, #13
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	f107 010f 	add.w	r1, r7, #15
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	2201      	movs	r2, #1
 8001a66:	4803      	ldr	r0, [pc, #12]	@ (8001a74 <print_string+0x80>)
 8001a68:	f002 f9ca 	bl	8003e00 <HAL_UART_Transmit>
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200002d4 	.word	0x200002d4

08001a78 <print_unsigned_decimal>:

void print_unsigned_decimal (uint16_t number, uint8_t action) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460a      	mov	r2, r1
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	4613      	mov	r3, r2
 8001a86:	717b      	strb	r3, [r7, #5]
    char temphex[5];        //Define the array that will hold the ASCII values
    char c = '\r';
 8001a88:	230d      	movs	r3, #13
 8001a8a:	73fb      	strb	r3, [r7, #15]
    uint8_t i;                
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	4920      	ldr	r1, [pc, #128]	@ (8001b14 <print_unsigned_decimal+0x9c>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fefb 	bl	8005890 <siprintf>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75bb      	strb	r3, [r7, #22]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
 8001aa2:	e00c      	b.n	8001abe <print_unsigned_decimal+0x46>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	f107 0210 	add.w	r2, r7, #16
 8001aaa:	18d1      	adds	r1, r2, r3
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <print_unsigned_decimal+0xa0>)
 8001ab4:	f002 f9a4 	bl	8003e00 <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	3301      	adds	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
 8001abe:	7dfa      	ldrb	r2, [r7, #23]
 8001ac0:	7dbb      	ldrb	r3, [r7, #22]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3ee      	bcc.n	8001aa4 <print_unsigned_decimal+0x2c>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8001ac6:	797b      	ldrb	r3, [r7, #5]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d112      	bne.n	8001af2 <print_unsigned_decimal+0x7a>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001acc:	f107 010f 	add.w	r1, r7, #15
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4810      	ldr	r0, [pc, #64]	@ (8001b18 <print_unsigned_decimal+0xa0>)
 8001ad8:	f002 f992 	bl	8003e00 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001adc:	230a      	movs	r3, #10
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	f107 010f 	add.w	r1, r7, #15
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	2201      	movs	r2, #1
 8001aea:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <print_unsigned_decimal+0xa0>)
 8001aec:	f002 f988 	bl	8003e00 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8001af0:	e00c      	b.n	8001b0c <print_unsigned_decimal+0x94>
    else if(action == CR) {
 8001af2:	797b      	ldrb	r3, [r7, #5]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d109      	bne.n	8001b0c <print_unsigned_decimal+0x94>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001af8:	230d      	movs	r3, #13
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	f107 010f 	add.w	r1, r7, #15
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	2201      	movs	r2, #1
 8001b06:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <print_unsigned_decimal+0xa0>)
 8001b08:	f002 f97a 	bl	8003e00 <HAL_UART_Transmit>
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08009958 	.word	0x08009958
 8001b18:	200002d4 	.word	0x200002d4

08001b1c <CursorTopLeft>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void CursorTopLeft( void ) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
    char c = 0x1B;
 8001b22:	231b      	movs	r3, #27
 8001b24:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001b26:	1df9      	adds	r1, r7, #7
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <CursorTopLeft+0x28>)
 8001b30:	f002 f966 	bl	8003e00 <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 8001b34:	2100      	movs	r1, #0
 8001b36:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <CursorTopLeft+0x2c>)
 8001b38:	f7ff ff5c 	bl	80019f4 <print_string>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200002d4 	.word	0x200002d4
 8001b48:	08009968 	.word	0x08009968

08001b4c <ResetTerminal>:

void ResetTerminal( void ) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
    char c = 0x1B;
 8001b52:	231b      	movs	r3, #27
 8001b54:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001b56:	1df9      	adds	r1, r7, #7
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <ResetTerminal+0x28>)
 8001b60:	f002 f94e 	bl	8003e00 <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 8001b64:	2100      	movs	r1, #0
 8001b66:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <ResetTerminal+0x2c>)
 8001b68:	f7ff ff44 	bl	80019f4 <print_string>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200002d4 	.word	0x200002d4
 8001b78:	0800996c 	.word	0x0800996c

08001b7c <InsertLineFeed>:

void InsertLineFeed( uint8_t line_feeds ) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 8001b8a:	230d      	movs	r3, #13
 8001b8c:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e014      	b.n	8001bbe <InsertLineFeed+0x42>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001b94:	f107 010e 	add.w	r1, r7, #14
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <InsertLineFeed+0x54>)
 8001ba0:	f002 f92e 	bl	8003e00 <HAL_UART_Transmit>
        c = '\n'; //TODO: do we need this line?
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001ba8:	f107 010e 	add.w	r1, r7, #14
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <InsertLineFeed+0x54>)
 8001bb4:	f002 f924 	bl	8003e00 <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3e6      	bcc.n	8001b94 <InsertLineFeed+0x18>
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200002d4 	.word	0x200002d4

08001bd4 <InsertLineSeparator>:

void InsertLineSeparator( void ) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    print_string("---------------------------------------", LF);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <InsertLineSeparator+0x10>)
 8001bdc:	f7ff ff0a 	bl	80019f4 <print_string>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	08009970 	.word	0x08009970

08001be8 <ResetRxBuffer>:

void ResetRxBuffer(uart_type * ut) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

    ut->consumer_index = ut->producer_index = 0;                              //Reset the pointers
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    ut->byte_counter = 0;                                            //Reset the data counter
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    memset(ut->rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2221      	movs	r2, #33	@ 0x21
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fecb 	bl	80059ae <memset>
} /* End of ResetRxBuffer */
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HandleByte>:

void HandleByte(uart_type * ut) {     
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    
    switch(ut->msg_state) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d12e      	bne.n	8001c90 <HandleByte+0x70>
        case(STATESTART):                                   //Have yet to receive a valid SOF
            ut->len_verify = 0;                            //Good place to reset the length verify counter
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if(ut->rxbuf[ut->consumer_index] == RXSOF) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001c40:	461a      	mov	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	5c9b      	ldrb	r3, [r3, r2]
 8001c46:	2bfc      	cmp	r3, #252	@ 0xfc
 8001c48:	d107      	bne.n	8001c5a <HandleByte+0x3a>
                ut->msg_state = SOFRXED;                   //Advance state if we receive SOF
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                IncrementConsumer(ut);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f820 	bl	8001c98 <IncrementConsumer>
                ut->inmenu = false;                     //Clear this now that the sensors have been calibrated
            }
            else {
                IncrementConsumer(ut);                        //Not a valid byte, keep looking
            }
        break;
 8001c58:	e019      	b.n	8001c8e <HandleByte+0x6e>
            else if(ut->rxbuf[ut -> consumer_index] == 'z') {     //User wishes to run calibration routine
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	5c9b      	ldrb	r3, [r3, r2]
 8001c66:	2b7a      	cmp	r3, #122	@ 0x7a
 8001c68:	d10e      	bne.n	8001c88 <HandleByte+0x68>
                ut->inmenu = true;                      //Set this flag so that we don't mess up the rxbuffer
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                ResetRxBuffer(ut);                            //Reset this because messaging handling didn't occur while calibrating
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffb8 	bl	8001be8 <ResetRxBuffer>
                MainMenu(ut);                         //Run the calibration routine
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f887 	bl	8001d8c <MainMenu>
                ut->inmenu = false;                     //Clear this now that the sensors have been calibrated
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        break;
 8001c86:	e002      	b.n	8001c8e <HandleByte+0x6e>
                IncrementConsumer(ut);                        //Not a valid byte, keep looking
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f805 	bl	8001c98 <IncrementConsumer>
        break;
 8001c8e:	bf00      	nop

        //     ut->len_verify++;                           //Used to validate the length byte received
        //     IncrementConsumer();                        //Move pointer
        // break;
    }
} /* End of HandleByte */
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <IncrementConsumer>:

void IncrementConsumer(uart_type * ut) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
    ut->consumer_index >= MAX_RX_BUF_INDEX ? (ut->consumer_index = 0):(ut->consumer_index++);                        // Either roll over or increment the "consumer" pointer
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001ca6:	2b1f      	cmp	r3, #31
 8001ca8:	d904      	bls.n	8001cb4 <IncrementConsumer+0x1c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001cb2:	e007      	b.n	8001cc4 <IncrementConsumer+0x2c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    (ut->byte_counter <= 1) ? (ut->byte_counter = 0):(ut->byte_counter--);                                           //Decrement data counter
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d804      	bhi.n	8001cd8 <IncrementConsumer+0x40>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
} /* End of IncrementConsumer */
 8001cd6:	e007      	b.n	8001ce8 <IncrementConsumer+0x50>
    (ut->byte_counter <= 1) ? (ut->byte_counter = 0):(ut->byte_counter--);                                           //Decrement data counter
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
} /* End of IncrementConsumer */
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <getNumber_u8>:

uint8_t getNumber_u8 (uart_type * ut ) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    int number      = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
    uint8_t timeout     = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

    ResetRxBuffer(ut);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff6f 	bl	8001be8 <ResetRxBuffer>
    
    ut->rxchar = '\0';
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while(ut->rxchar == '\0'){
 8001d12:	e002      	b.n	8001d1a <getNumber_u8+0x26>
        HAL_IWDG_Refresh(&hiwdg);      
 8001d14:	481a      	ldr	r0, [pc, #104]	@ (8001d80 <getNumber_u8+0x8c>)
 8001d16:	f000 fec1 	bl	8002a9c <HAL_IWDG_Refresh>
    while(ut->rxchar == '\0'){
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f7      	beq.n	8001d14 <getNumber_u8+0x20>
    }                   // Wait for keyboard input 
    
    while (timeout < 20) {
 8001d24:	e00d      	b.n	8001d42 <getNumber_u8+0x4e>
        if(ut->rxchar == ENTER_KEY) break;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d2c:	2b0d      	cmp	r3, #13
 8001d2e:	d00c      	beq.n	8001d4a <getNumber_u8+0x56>

        HAL_Delay(100);          // Delay in ms 
 8001d30:	2064      	movs	r0, #100	@ 0x64
 8001d32:	f000 fa2f 	bl	8002194 <HAL_Delay>
        HAL_IWDG_Refresh(&hiwdg);
 8001d36:	4812      	ldr	r0, [pc, #72]	@ (8001d80 <getNumber_u8+0x8c>)
 8001d38:	f000 feb0 	bl	8002a9c <HAL_IWDG_Refresh>
        timeout++;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
    while (timeout < 20) {
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b13      	cmp	r3, #19
 8001d46:	d9ee      	bls.n	8001d26 <getNumber_u8+0x32>
 8001d48:	e000      	b.n	8001d4c <getNumber_u8+0x58>
        if(ut->rxchar == ENTER_KEY) break;
 8001d4a:	bf00      	nop
    }

    sscanf(ut->rxbuf,"%d",&number);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f107 0208 	add.w	r2, r7, #8
 8001d52:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <getNumber_u8+0x90>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fdbb 	bl	80058d0 <siscanf>

    print_string("Number Received: ",0);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <getNumber_u8+0x94>)
 8001d5e:	f7ff fe49 	bl	80019f4 <print_string>
    print_unsigned_decimal((uint8_t)number, LF);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2101      	movs	r1, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe85 	bl	8001a78 <print_unsigned_decimal>

    ResetRxBuffer(ut);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ff3a 	bl	8001be8 <ResetRxBuffer>
    return(number);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	b2db      	uxtb	r3, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000238 	.word	0x20000238
 8001d84:	08009998 	.word	0x08009998
 8001d88:	0800999c 	.word	0x0800999c

08001d8c <MainMenu>:

    return(number);

}

void MainMenu(uart_type * ut) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
     * in main.c just prior to entering this routine. 
     * 
     * 
     */

	uint8_t     temp_counter            = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
    uint8_t     usr_number_u8           = 0;        // Number user has entered will be stored here
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73bb      	strb	r3, [r7, #14]
    float       temp_float              = 0.0;
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
    
    ut->rxchar = '\0';                  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    ResetTerminal();                            // Clear all the contents on the terminal
 8001daa:	f7ff fecf 	bl	8001b4c <ResetTerminal>

    
    HAL_Delay(1);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 f9f0 	bl	8002194 <HAL_Delay>
    CursorTopLeft();
 8001db4:	f7ff feb2 	bl	8001b1c <CursorTopLeft>
    HAL_Delay(1);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f000 f9eb 	bl	8002194 <HAL_Delay>

    while(usr_number_u8 != 99) {
 8001dbe:	e131      	b.n	8002024 <MainMenu+0x298>
        InsertLineFeed(1);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f7ff fedb 	bl	8001b7c <InsertLineFeed>
        InsertLineSeparator();
 8001dc6:	f7ff ff05 	bl	8001bd4 <InsertLineSeparator>
        print_string("1 --- Flash RIGHT Taillight.",LF);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	489b      	ldr	r0, [pc, #620]	@ (800203c <MainMenu+0x2b0>)
 8001dce:	f7ff fe11 	bl	80019f4 <print_string>
        print_string("2 --- Flash LEFT Taillight.",LF);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	489a      	ldr	r0, [pc, #616]	@ (8002040 <MainMenu+0x2b4>)
 8001dd6:	f7ff fe0d 	bl	80019f4 <print_string>
        print_string("3 --- View Toggle Switch State.",LF);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4899      	ldr	r0, [pc, #612]	@ (8002044 <MainMenu+0x2b8>)
 8001dde:	f7ff fe09 	bl	80019f4 <print_string>
        
        InsertLineFeed(1);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff feca 	bl	8001b7c <InsertLineFeed>
        
        print_string("4 --- Get SW version information.",LF);
 8001de8:	2101      	movs	r1, #1
 8001dea:	4897      	ldr	r0, [pc, #604]	@ (8002048 <MainMenu+0x2bc>)
 8001dec:	f7ff fe02 	bl	80019f4 <print_string>
        
        print_string("99 -- Exit menu.",LF);  
 8001df0:	2101      	movs	r1, #1
 8001df2:	4896      	ldr	r0, [pc, #600]	@ (800204c <MainMenu+0x2c0>)
 8001df4:	f7ff fdfe 	bl	80019f4 <print_string>
        
        InsertLineFeed(2);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7ff febf 	bl	8001b7c <InsertLineFeed>
        
        print_string("Enter Selection:  ",0);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4893      	ldr	r0, [pc, #588]	@ (8002050 <MainMenu+0x2c4>)
 8001e02:	f7ff fdf7 	bl	80019f4 <print_string>
        HAL_IWDG_Refresh(&hiwdg);
 8001e06:	4893      	ldr	r0, [pc, #588]	@ (8002054 <MainMenu+0x2c8>)
 8001e08:	f000 fe48 	bl	8002a9c <HAL_IWDG_Refresh>
        
        usr_number_u8 = getNumber_u8(ut);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff71 	bl	8001cf4 <getNumber_u8>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73bb      	strb	r3, [r7, #14]
       
        switch(usr_number_u8) {
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	dc11      	bgt.n	8001e40 <MainMenu+0xb4>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f340 80ff 	ble.w	8002020 <MainMenu+0x294>
 8001e22:	3b01      	subs	r3, #1
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	f200 80fb 	bhi.w	8002020 <MainMenu+0x294>
 8001e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <MainMenu+0xa4>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001ec9 	.word	0x08001ec9
 8001e38:	08001f49 	.word	0x08001f49
 8001e3c:	08001fdf 	.word	0x08001fdf
 8001e40:	2b63      	cmp	r3, #99	@ 0x63
 8001e42:	f000 80dd 	beq.w	8002000 <MainMenu+0x274>
 8001e46:	e0eb      	b.n	8002020 <MainMenu+0x294>
            /* Flash the RIGHT taillight */
            case 1:
                InsertLineFeed(1);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff fe97 	bl	8001b7c <InsertLineFeed>
                InsertLineSeparator();
 8001e4e:	f7ff fec1 	bl	8001bd4 <InsertLineSeparator>
                print_string("Flashing RIGHT taillight...",0);
 8001e52:	2100      	movs	r1, #0
 8001e54:	4880      	ldr	r0, [pc, #512]	@ (8002058 <MainMenu+0x2cc>)
 8001e56:	f7ff fdcd 	bl	80019f4 <print_string>
                HAL_IWDG_Refresh(&hiwdg);
 8001e5a:	487e      	ldr	r0, [pc, #504]	@ (8002054 <MainMenu+0x2c8>)
 8001e5c:	f000 fe1e 	bl	8002a9c <HAL_IWDG_Refresh>
                
                /**
                 * Enable the RIGHT taillight
                 */
                HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, true);
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e66:	487d      	ldr	r0, [pc, #500]	@ (800205c <MainMenu+0x2d0>)
 8001e68:	f000 fda3 	bl	80029b2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, true);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e72:	487a      	ldr	r0, [pc, #488]	@ (800205c <MainMenu+0x2d0>)
 8001e74:	f000 fd9d 	bl	80029b2 <HAL_GPIO_WritePin>
                
                for (temp_counter=0;temp_counter < 5; temp_counter++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e00e      	b.n	8001e9c <MainMenu+0x110>
                {
                    HAL_GPIO_TogglePin(TAILLIGHT_FLASHER_TTL_GPIO_Port, TAILLIGHT_FLASHER_TTL_Pin);
 8001e7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e82:	4876      	ldr	r0, [pc, #472]	@ (800205c <MainMenu+0x2d0>)
 8001e84:	f000 fdad 	bl	80029e2 <HAL_GPIO_TogglePin>
                    HAL_Delay(500);         //Delay value is in ms
 8001e88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e8c:	f000 f982 	bl	8002194 <HAL_Delay>
                    HAL_IWDG_Refresh(&hiwdg);
 8001e90:	4870      	ldr	r0, [pc, #448]	@ (8002054 <MainMenu+0x2c8>)
 8001e92:	f000 fe03 	bl	8002a9c <HAL_IWDG_Refresh>
                for (temp_counter=0;temp_counter < 5; temp_counter++)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d9ed      	bls.n	8001e7e <MainMenu+0xf2>
                }
                
                /**
                 * Safely disable the taillight 
                 */
                HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, false);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ea8:	486c      	ldr	r0, [pc, #432]	@ (800205c <MainMenu+0x2d0>)
 8001eaa:	f000 fd82 	bl	80029b2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, true);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eb4:	4869      	ldr	r0, [pc, #420]	@ (800205c <MainMenu+0x2d0>)
 8001eb6:	f000 fd7c 	bl	80029b2 <HAL_GPIO_WritePin>
                
                InsertLineFeed(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff fe5e 	bl	8001b7c <InsertLineFeed>
                HAL_IWDG_Refresh(&hiwdg);
 8001ec0:	4864      	ldr	r0, [pc, #400]	@ (8002054 <MainMenu+0x2c8>)
 8001ec2:	f000 fdeb 	bl	8002a9c <HAL_IWDG_Refresh>

            break;
 8001ec6:	e0ad      	b.n	8002024 <MainMenu+0x298>
            
            /* Flash the LEFT taillight */
            case 2:
                InsertLineFeed(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff fe57 	bl	8001b7c <InsertLineFeed>
                InsertLineSeparator();
 8001ece:	f7ff fe81 	bl	8001bd4 <InsertLineSeparator>
                print_string("Flashing LEFT taillight...",0);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4862      	ldr	r0, [pc, #392]	@ (8002060 <MainMenu+0x2d4>)
 8001ed6:	f7ff fd8d 	bl	80019f4 <print_string>
                HAL_IWDG_Refresh(&hiwdg);
 8001eda:	485e      	ldr	r0, [pc, #376]	@ (8002054 <MainMenu+0x2c8>)
 8001edc:	f000 fdde 	bl	8002a9c <HAL_IWDG_Refresh>
                
                /**
                 * Enable the LEFT taillight
                 */
                HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, true);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ee6:	485d      	ldr	r0, [pc, #372]	@ (800205c <MainMenu+0x2d0>)
 8001ee8:	f000 fd63 	bl	80029b2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, false);
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef2:	485a      	ldr	r0, [pc, #360]	@ (800205c <MainMenu+0x2d0>)
 8001ef4:	f000 fd5d 	bl	80029b2 <HAL_GPIO_WritePin>
                
                /**
                 * Flash the light a few times
                 */
                for (temp_counter=0; temp_counter < 5; temp_counter++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e00e      	b.n	8001f1c <MainMenu+0x190>
                {
                    HAL_GPIO_TogglePin(TAILLIGHT_FLASHER_TTL_GPIO_Port, TAILLIGHT_FLASHER_TTL_Pin);
 8001efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f02:	4856      	ldr	r0, [pc, #344]	@ (800205c <MainMenu+0x2d0>)
 8001f04:	f000 fd6d 	bl	80029e2 <HAL_GPIO_TogglePin>
                    HAL_Delay(500);         //Delay value is in ms
 8001f08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f0c:	f000 f942 	bl	8002194 <HAL_Delay>
                    HAL_IWDG_Refresh(&hiwdg);
 8001f10:	4850      	ldr	r0, [pc, #320]	@ (8002054 <MainMenu+0x2c8>)
 8001f12:	f000 fdc3 	bl	8002a9c <HAL_IWDG_Refresh>
                for (temp_counter=0; temp_counter < 5; temp_counter++)
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d9ed      	bls.n	8001efe <MainMenu+0x172>
                }
                
                /**
                 * Safely disable the taillight 
                 */
                HAL_GPIO_WritePin(EN_LIGHTS_TTL_GPIO_Port, EN_LIGHTS_TTL_Pin, false);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f28:	484c      	ldr	r0, [pc, #304]	@ (800205c <MainMenu+0x2d0>)
 8001f2a:	f000 fd42 	bl	80029b2 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RT_nLT_TTL_GPIO_Port, RT_nLT_TTL_Pin, true);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f34:	4849      	ldr	r0, [pc, #292]	@ (800205c <MainMenu+0x2d0>)
 8001f36:	f000 fd3c 	bl	80029b2 <HAL_GPIO_WritePin>

                InsertLineFeed(1);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f7ff fe1e 	bl	8001b7c <InsertLineFeed>
                HAL_IWDG_Refresh(&hiwdg);
 8001f40:	4844      	ldr	r0, [pc, #272]	@ (8002054 <MainMenu+0x2c8>)
 8001f42:	f000 fdab 	bl	8002a9c <HAL_IWDG_Refresh>
            	
            break;
 8001f46:	e06d      	b.n	8002024 <MainMenu+0x298>

            /* View TS switch request value */
            case 3:
                InsertLineFeed(1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff fe17 	bl	8001b7c <InsertLineFeed>
                InsertLineSeparator();
 8001f4e:	f7ff fe41 	bl	8001bd4 <InsertLineSeparator>
                print_string("Printing state of TS switch input.",LF);
 8001f52:	2101      	movs	r1, #1
 8001f54:	4843      	ldr	r0, [pc, #268]	@ (8002064 <MainMenu+0x2d8>)
 8001f56:	f7ff fd4d 	bl	80019f4 <print_string>
                HAL_IWDG_Refresh(&hiwdg);
 8001f5a:	483e      	ldr	r0, [pc, #248]	@ (8002054 <MainMenu+0x2c8>)
 8001f5c:	f000 fd9e 	bl	8002a9c <HAL_IWDG_Refresh>

                for(temp_counter=0; temp_counter<10; temp_counter++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e031      	b.n	8001fca <MainMenu+0x23e>
                {

                    if (HAL_GPIO_ReadPin(RIGHT_TURN_GPI_GPIO_Port, RIGHT_TURN_GPI_Pin))
 8001f66:	2140      	movs	r1, #64	@ 0x40
 8001f68:	483f      	ldr	r0, [pc, #252]	@ (8002068 <MainMenu+0x2dc>)
 8001f6a:	f000 fd0b 	bl	8002984 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <MainMenu+0x1f0>
                    {
                        print_string("Switch is requesting -> RIGHT <- ",LF);
 8001f74:	2101      	movs	r1, #1
 8001f76:	483d      	ldr	r0, [pc, #244]	@ (800206c <MainMenu+0x2e0>)
 8001f78:	f7ff fd3c 	bl	80019f4 <print_string>
                    }

                    if (HAL_GPIO_ReadPin(LEFT_TURN_GPI_GPIO_Port, LEFT_TURN_GPI_Pin))
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	483a      	ldr	r0, [pc, #232]	@ (8002068 <MainMenu+0x2dc>)
 8001f80:	f000 fd00 	bl	8002984 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <MainMenu+0x206>
                    {
                        print_string("Switch is requesting -> LEFT <- ",LF);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4838      	ldr	r0, [pc, #224]	@ (8002070 <MainMenu+0x2e4>)
 8001f8e:	f7ff fd31 	bl	80019f4 <print_string>
                    }

                    if( !HAL_GPIO_ReadPin(RIGHT_TURN_GPI_GPIO_Port, RIGHT_TURN_GPI_Pin) &&
 8001f92:	2140      	movs	r1, #64	@ 0x40
 8001f94:	4834      	ldr	r0, [pc, #208]	@ (8002068 <MainMenu+0x2dc>)
 8001f96:	f000 fcf5 	bl	8002984 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <MainMenu+0x22a>
                        !HAL_GPIO_ReadPin(LEFT_TURN_GPI_GPIO_Port, LEFT_TURN_GPI_Pin)
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	4831      	ldr	r0, [pc, #196]	@ (8002068 <MainMenu+0x2dc>)
 8001fa4:	f000 fcee 	bl	8002984 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
                    if( !HAL_GPIO_ReadPin(RIGHT_TURN_GPI_GPIO_Port, RIGHT_TURN_GPI_Pin) &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <MainMenu+0x22a>
                    ) 
                    {
                        print_string("Switch is requesting -> IDLE <- ",LF);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4830      	ldr	r0, [pc, #192]	@ (8002074 <MainMenu+0x2e8>)
 8001fb2:	f7ff fd1f 	bl	80019f4 <print_string>
                    }

                    HAL_Delay(500);
 8001fb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fba:	f000 f8eb 	bl	8002194 <HAL_Delay>
                    HAL_IWDG_Refresh(&hiwdg);
 8001fbe:	4825      	ldr	r0, [pc, #148]	@ (8002054 <MainMenu+0x2c8>)
 8001fc0:	f000 fd6c 	bl	8002a9c <HAL_IWDG_Refresh>
                for(temp_counter=0; temp_counter<10; temp_counter++)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d9ca      	bls.n	8001f66 <MainMenu+0x1da>
                }
                
                InsertLineFeed(1);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff fdd3 	bl	8001b7c <InsertLineFeed>
                HAL_IWDG_Refresh(&hiwdg);
 8001fd6:	481f      	ldr	r0, [pc, #124]	@ (8002054 <MainMenu+0x2c8>)
 8001fd8:	f000 fd60 	bl	8002a9c <HAL_IWDG_Refresh>

            break;
 8001fdc:	e022      	b.n	8002024 <MainMenu+0x298>
            
            /* Print SW version */
            case 4:
                InsertLineFeed(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff fdcc 	bl	8001b7c <InsertLineFeed>
                InsertLineSeparator();
 8001fe4:	f7ff fdf6 	bl	8001bd4 <InsertLineSeparator>
                
                print_string("SW Version:",0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4823      	ldr	r0, [pc, #140]	@ (8002078 <MainMenu+0x2ec>)
 8001fec:	f7ff fd02 	bl	80019f4 <print_string>
                print_string(SW_VER_STR,LF);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4822      	ldr	r0, [pc, #136]	@ (800207c <MainMenu+0x2f0>)
 8001ff4:	f7ff fcfe 	bl	80019f4 <print_string>
                HAL_IWDG_Refresh(&hiwdg);
 8001ff8:	4816      	ldr	r0, [pc, #88]	@ (8002054 <MainMenu+0x2c8>)
 8001ffa:	f000 fd4f 	bl	8002a9c <HAL_IWDG_Refresh>

            break;
 8001ffe:	e011      	b.n	8002024 <MainMenu+0x298>

            /* Leave menu */
            case 99:
                ResetTerminal();              //Leaving menu, so clear the screen so not to confuse user
 8002000:	f7ff fda4 	bl	8001b4c <ResetTerminal>
                HAL_Delay(1);
 8002004:	2001      	movs	r0, #1
 8002006:	f000 f8c5 	bl	8002194 <HAL_Delay>
                CursorTopLeft();        //Make sure the cursor is in the Top Left position
 800200a:	f7ff fd87 	bl	8001b1c <CursorTopLeft>
                HAL_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f000 f8c0 	bl	8002194 <HAL_Delay>
                HAL_IWDG_Refresh(&hiwdg);
 8002014:	480f      	ldr	r0, [pc, #60]	@ (8002054 <MainMenu+0x2c8>)
 8002016:	f000 fd41 	bl	8002a9c <HAL_IWDG_Refresh>
                usr_number_u8 = 99;
 800201a:	2363      	movs	r3, #99	@ 0x63
 800201c:	73bb      	strb	r3, [r7, #14]
            break;
 800201e:	e001      	b.n	8002024 <MainMenu+0x298>

            default:
                usr_number_u8 = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	73bb      	strb	r3, [r7, #14]
    while(usr_number_u8 != 99) {
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	2b63      	cmp	r3, #99	@ 0x63
 8002028:	f47f aeca 	bne.w	8001dc0 <MainMenu+0x34>
        }   //END Switch(usr_number_u8)
    }  //END while(usr_number_u8 != 99)

    print_string("Leaving console.",LF);
 800202c:	2101      	movs	r1, #1
 800202e:	4814      	ldr	r0, [pc, #80]	@ (8002080 <MainMenu+0x2f4>)
 8002030:	f7ff fce0 	bl	80019f4 <print_string>

}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	080099b8 	.word	0x080099b8
 8002040:	080099d8 	.word	0x080099d8
 8002044:	080099f4 	.word	0x080099f4
 8002048:	08009a14 	.word	0x08009a14
 800204c:	08009a38 	.word	0x08009a38
 8002050:	08009a4c 	.word	0x08009a4c
 8002054:	20000238 	.word	0x20000238
 8002058:	08009a60 	.word	0x08009a60
 800205c:	40010c00 	.word	0x40010c00
 8002060:	08009a7c 	.word	0x08009a7c
 8002064:	08009a98 	.word	0x08009a98
 8002068:	40011000 	.word	0x40011000
 800206c:	08009abc 	.word	0x08009abc
 8002070:	08009ae0 	.word	0x08009ae0
 8002074:	08009b04 	.word	0x08009b04
 8002078:	08009b28 	.word	0x08009b28
 800207c:	08009b34 	.word	0x08009b34
 8002080:	08009b3c 	.word	0x08009b3c

08002084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002084:	f7ff fcb0 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002088:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800208a:	490c      	ldr	r1, [pc, #48]	@ (80020bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800208c:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020a0:	4c09      	ldr	r4, [pc, #36]	@ (80020c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ae:	f003 fcd7 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b2:	f7fe ff71 	bl	8000f98 <main>
  bx lr
 80020b6:	4770      	bx	lr
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020c0:	08009fec 	.word	0x08009fec
  ldr r2, =_sbss
 80020c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020c8:	20000470 	.word	0x20000470

080020cc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC1_2_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_Init+0x28>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <HAL_Init+0x28>)
 80020da:	f043 0310 	orr.w	r3, r3, #16
 80020de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 f947 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 f808 	bl	80020fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ec:	f7ff faba 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_InitTick+0x54>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_InitTick+0x58>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002112:	fbb3 f3f1 	udiv	r3, r3, r1
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f95f 	bl	80023de <HAL_SYSTICK_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00e      	b.n	8002148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d80a      	bhi.n	8002146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f000 f927 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800213c:	4a06      	ldr	r2, [pc, #24]	@ (8002158 <HAL_InitTick+0x5c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000000 	.word	0x20000000
 8002154:	20000008 	.word	0x20000008
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_IncTick+0x1c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_IncTick+0x20>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a03      	ldr	r2, [pc, #12]	@ (800217c <HAL_IncTick+0x20>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000008 	.word	0x20000008
 800217c:	20000320 	.word	0x20000320

08002180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b02      	ldr	r3, [pc, #8]	@ (8002190 <HAL_GetTick+0x10>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000320 	.word	0x20000320

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff fff0 	bl	8002180 <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_Delay+0x44>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffe0 	bl	8002180 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db0b      	blt.n	800226a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4906      	ldr	r1, [pc, #24]	@ (8002274 <__NVIC_EnableIRQ+0x34>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f7ff ff90 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff2d 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff42 	bl	8002224 <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff90 	bl	80022cc <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5f 	bl	8002278 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff35 	bl	8002240 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d008      	beq.n	8002420 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e020      	b.n	8002462 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d005      	beq.n	8002490 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e0d6      	b.n	800263e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b64      	ldr	r3, [pc, #400]	@ (8002648 <HAL_DMA_Abort_IT+0x1dc>)
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d958      	bls.n	800256e <HAL_DMA_Abort_IT+0x102>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a62      	ldr	r2, [pc, #392]	@ (800264c <HAL_DMA_Abort_IT+0x1e0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04f      	beq.n	8002566 <HAL_DMA_Abort_IT+0xfa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a61      	ldr	r2, [pc, #388]	@ (8002650 <HAL_DMA_Abort_IT+0x1e4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d048      	beq.n	8002562 <HAL_DMA_Abort_IT+0xf6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002654 <HAL_DMA_Abort_IT+0x1e8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Abort_IT+0xf0>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5e      	ldr	r2, [pc, #376]	@ (8002658 <HAL_DMA_Abort_IT+0x1ec>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d038      	beq.n	8002556 <HAL_DMA_Abort_IT+0xea>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5c      	ldr	r2, [pc, #368]	@ (800265c <HAL_DMA_Abort_IT+0x1f0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d030      	beq.n	8002550 <HAL_DMA_Abort_IT+0xe4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002660 <HAL_DMA_Abort_IT+0x1f4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d028      	beq.n	800254a <HAL_DMA_Abort_IT+0xde>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a52      	ldr	r2, [pc, #328]	@ (8002648 <HAL_DMA_Abort_IT+0x1dc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d020      	beq.n	8002544 <HAL_DMA_Abort_IT+0xd8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <HAL_DMA_Abort_IT+0x1f8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d019      	beq.n	8002540 <HAL_DMA_Abort_IT+0xd4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a55      	ldr	r2, [pc, #340]	@ (8002668 <HAL_DMA_Abort_IT+0x1fc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d012      	beq.n	800253c <HAL_DMA_Abort_IT+0xd0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a54      	ldr	r2, [pc, #336]	@ (800266c <HAL_DMA_Abort_IT+0x200>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00a      	beq.n	8002536 <HAL_DMA_Abort_IT+0xca>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_DMA_Abort_IT+0x204>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d102      	bne.n	8002530 <HAL_DMA_Abort_IT+0xc4>
 800252a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252e:	e01b      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002534:	e018      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002536:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800253a:	e015      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 800253c:	2310      	movs	r3, #16
 800253e:	e013      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002540:	2301      	movs	r3, #1
 8002542:	e011      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002548:	e00e      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 800254a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800254e:	e00b      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002554:	e008      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800255a:	e005      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 800255c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002560:	e002      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002562:	2310      	movs	r3, #16
 8002564:	e000      	b.n	8002568 <HAL_DMA_Abort_IT+0xfc>
 8002566:	2301      	movs	r3, #1
 8002568:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_DMA_Abort_IT+0x208>)
 800256a:	6053      	str	r3, [r2, #4]
 800256c:	e057      	b.n	800261e <HAL_DMA_Abort_IT+0x1b2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	@ (800264c <HAL_DMA_Abort_IT+0x1e0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d04f      	beq.n	8002618 <HAL_DMA_Abort_IT+0x1ac>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_DMA_Abort_IT+0x1e4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d048      	beq.n	8002614 <HAL_DMA_Abort_IT+0x1a8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_DMA_Abort_IT+0x1e8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d040      	beq.n	800260e <HAL_DMA_Abort_IT+0x1a2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_DMA_Abort_IT+0x1ec>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d038      	beq.n	8002608 <HAL_DMA_Abort_IT+0x19c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_DMA_Abort_IT+0x1f0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d030      	beq.n	8002602 <HAL_DMA_Abort_IT+0x196>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_DMA_Abort_IT+0x1f4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d028      	beq.n	80025fc <HAL_DMA_Abort_IT+0x190>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a26      	ldr	r2, [pc, #152]	@ (8002648 <HAL_DMA_Abort_IT+0x1dc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d020      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x18a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002664 <HAL_DMA_Abort_IT+0x1f8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_DMA_Abort_IT+0x186>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a29      	ldr	r2, [pc, #164]	@ (8002668 <HAL_DMA_Abort_IT+0x1fc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d012      	beq.n	80025ee <HAL_DMA_Abort_IT+0x182>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_DMA_Abort_IT+0x200>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00a      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a26      	ldr	r2, [pc, #152]	@ (8002670 <HAL_DMA_Abort_IT+0x204>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d102      	bne.n	80025e2 <HAL_DMA_Abort_IT+0x176>
 80025dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e0:	e01b      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 80025e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e6:	e018      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 80025e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ec:	e015      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 80025ee:	2310      	movs	r3, #16
 80025f0:	e013      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e011      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 80025f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025fa:	e00e      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 80025fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002600:	e00b      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 8002602:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002606:	e008      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 8002608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260c:	e005      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 800260e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002612:	e002      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 8002614:	2310      	movs	r3, #16
 8002616:	e000      	b.n	800261a <HAL_DMA_Abort_IT+0x1ae>
 8002618:	2301      	movs	r3, #1
 800261a:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <HAL_DMA_Abort_IT+0x20c>)
 800261c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
    } 
  }
  return status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40020080 	.word	0x40020080
 800264c:	40020008 	.word	0x40020008
 8002650:	4002001c 	.word	0x4002001c
 8002654:	40020030 	.word	0x40020030
 8002658:	40020044 	.word	0x40020044
 800265c:	40020058 	.word	0x40020058
 8002660:	4002006c 	.word	0x4002006c
 8002664:	40020408 	.word	0x40020408
 8002668:	4002041c 	.word	0x4002041c
 800266c:	40020430 	.word	0x40020430
 8002670:	40020444 	.word	0x40020444
 8002674:	40020400 	.word	0x40020400
 8002678:	40020000 	.word	0x40020000

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b08b      	sub	sp, #44	@ 0x2c
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	e169      	b.n	8002964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002690:	2201      	movs	r2, #1
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 8158 	bne.w	800295e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a9a      	ldr	r2, [pc, #616]	@ (800291c <HAL_GPIO_Init+0x2a0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d05e      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026b8:	4a98      	ldr	r2, [pc, #608]	@ (800291c <HAL_GPIO_Init+0x2a0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d875      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026be:	4a98      	ldr	r2, [pc, #608]	@ (8002920 <HAL_GPIO_Init+0x2a4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d058      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026c4:	4a96      	ldr	r2, [pc, #600]	@ (8002920 <HAL_GPIO_Init+0x2a4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d86f      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026ca:	4a96      	ldr	r2, [pc, #600]	@ (8002924 <HAL_GPIO_Init+0x2a8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d052      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026d0:	4a94      	ldr	r2, [pc, #592]	@ (8002924 <HAL_GPIO_Init+0x2a8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d869      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026d6:	4a94      	ldr	r2, [pc, #592]	@ (8002928 <HAL_GPIO_Init+0x2ac>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d04c      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026dc:	4a92      	ldr	r2, [pc, #584]	@ (8002928 <HAL_GPIO_Init+0x2ac>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d863      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026e2:	4a92      	ldr	r2, [pc, #584]	@ (800292c <HAL_GPIO_Init+0x2b0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d046      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
 80026e8:	4a90      	ldr	r2, [pc, #576]	@ (800292c <HAL_GPIO_Init+0x2b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d85d      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d82a      	bhi.n	8002748 <HAL_GPIO_Init+0xcc>
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d859      	bhi.n	80027aa <HAL_GPIO_Init+0x12e>
 80026f6:	a201      	add	r2, pc, #4	@ (adr r2, 80026fc <HAL_GPIO_Init+0x80>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	08002777 	.word	0x08002777
 8002700:	08002751 	.word	0x08002751
 8002704:	08002763 	.word	0x08002763
 8002708:	080027a5 	.word	0x080027a5
 800270c:	080027ab 	.word	0x080027ab
 8002710:	080027ab 	.word	0x080027ab
 8002714:	080027ab 	.word	0x080027ab
 8002718:	080027ab 	.word	0x080027ab
 800271c:	080027ab 	.word	0x080027ab
 8002720:	080027ab 	.word	0x080027ab
 8002724:	080027ab 	.word	0x080027ab
 8002728:	080027ab 	.word	0x080027ab
 800272c:	080027ab 	.word	0x080027ab
 8002730:	080027ab 	.word	0x080027ab
 8002734:	080027ab 	.word	0x080027ab
 8002738:	080027ab 	.word	0x080027ab
 800273c:	080027ab 	.word	0x080027ab
 8002740:	08002759 	.word	0x08002759
 8002744:	0800276d 	.word	0x0800276d
 8002748:	4a79      	ldr	r2, [pc, #484]	@ (8002930 <HAL_GPIO_Init+0x2b4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800274e:	e02c      	b.n	80027aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	623b      	str	r3, [r7, #32]
          break;
 8002756:	e029      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	3304      	adds	r3, #4
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e024      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	3308      	adds	r3, #8
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e01f      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	330c      	adds	r3, #12
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e01a      	b.n	80027ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277e:	2304      	movs	r3, #4
 8002780:	623b      	str	r3, [r7, #32]
          break;
 8002782:	e013      	b.n	80027ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800278c:	2308      	movs	r3, #8
 800278e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	611a      	str	r2, [r3, #16]
          break;
 8002796:	e009      	b.n	80027ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002798:	2308      	movs	r3, #8
 800279a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	615a      	str	r2, [r3, #20]
          break;
 80027a2:	e003      	b.n	80027ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
          break;
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_Init+0x130>
          break;
 80027aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2bff      	cmp	r3, #255	@ 0xff
 80027b0:	d801      	bhi.n	80027b6 <HAL_GPIO_Init+0x13a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	e001      	b.n	80027ba <HAL_GPIO_Init+0x13e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2bff      	cmp	r3, #255	@ 0xff
 80027c0:	d802      	bhi.n	80027c8 <HAL_GPIO_Init+0x14c>
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0x152>
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	3b08      	subs	r3, #8
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	210f      	movs	r1, #15
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80b1 	beq.w	800295e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002934 <HAL_GPIO_Init+0x2b8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a4c      	ldr	r2, [pc, #304]	@ (8002934 <HAL_GPIO_Init+0x2b8>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_GPIO_Init+0x2b8>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_GPIO_Init+0x2bc>)
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a40      	ldr	r2, [pc, #256]	@ (800293c <HAL_GPIO_Init+0x2c0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <HAL_GPIO_Init+0x1ec>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3f      	ldr	r2, [pc, #252]	@ (8002940 <HAL_GPIO_Init+0x2c4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00d      	beq.n	8002864 <HAL_GPIO_Init+0x1e8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3e      	ldr	r2, [pc, #248]	@ (8002944 <HAL_GPIO_Init+0x2c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <HAL_GPIO_Init+0x1e4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3d      	ldr	r2, [pc, #244]	@ (8002948 <HAL_GPIO_Init+0x2cc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_GPIO_Init+0x1e0>
 8002858:	2303      	movs	r3, #3
 800285a:	e006      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 800285c:	2304      	movs	r3, #4
 800285e:	e004      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 8002860:	2302      	movs	r3, #2
 8002862:	e002      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_GPIO_Init+0x1ee>
 8002868:	2300      	movs	r3, #0
 800286a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286c:	f002 0203 	and.w	r2, r2, #3
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	4093      	lsls	r3, r2
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800287a:	492f      	ldr	r1, [pc, #188]	@ (8002938 <HAL_GPIO_Init+0x2bc>)
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002894:	4b2d      	ldr	r3, [pc, #180]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	492c      	ldr	r1, [pc, #176]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028a2:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4928      	ldr	r1, [pc, #160]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4922      	ldr	r1, [pc, #136]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	491e      	ldr	r1, [pc, #120]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4918      	ldr	r1, [pc, #96]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4914      	ldr	r1, [pc, #80]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d021      	beq.n	8002950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	490e      	ldr	r1, [pc, #56]	@ (800294c <HAL_GPIO_Init+0x2d0>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e021      	b.n	800295e <HAL_GPIO_Init+0x2e2>
 800291a:	bf00      	nop
 800291c:	10320000 	.word	0x10320000
 8002920:	10310000 	.word	0x10310000
 8002924:	10220000 	.word	0x10220000
 8002928:	10210000 	.word	0x10210000
 800292c:	10120000 	.word	0x10120000
 8002930:	10110000 	.word	0x10110000
 8002934:	40021000 	.word	0x40021000
 8002938:	40010000 	.word	0x40010000
 800293c:	40010800 	.word	0x40010800
 8002940:	40010c00 	.word	0x40010c00
 8002944:	40011000 	.word	0x40011000
 8002948:	40011400 	.word	0x40011400
 800294c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_GPIO_Init+0x304>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	43db      	mvns	r3, r3
 8002958:	4909      	ldr	r1, [pc, #36]	@ (8002980 <HAL_GPIO_Init+0x304>)
 800295a:	4013      	ands	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	3301      	adds	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f47f ae8e 	bne.w	8002690 <HAL_GPIO_Init+0x14>
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	372c      	adds	r7, #44	@ 0x2c
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e001      	b.n	80029a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	807b      	strh	r3, [r7, #2]
 80029be:	4613      	mov	r3, r2
 80029c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c2:	787b      	ldrb	r3, [r7, #1]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c8:	887a      	ldrh	r2, [r7, #2]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	041a      	lsls	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	611a      	str	r2, [r3, #16]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f4:	887a      	ldrh	r2, [r7, #2]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	041a      	lsls	r2, r3, #16
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	887b      	ldrh	r3, [r7, #2]
 8002a02:	400b      	ands	r3, r1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e036      	b.n	8002a94 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002a38:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6852      	ldr	r2, [r2, #4]
 8002a42:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6892      	ldr	r2, [r2, #8]
 8002a4c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a4e:	f7ff fb97 	bl	8002180 <HAL_GetTick>
 8002a52:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a54:	e011      	b.n	8002a7a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002a56:	f7ff fb93 	bl	8002180 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 323c 	movw	r2, #4924	@ 0x133c
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d908      	bls.n	8002a7a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e00c      	b.n	8002a94 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e6      	bne.n	8002a56 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002a90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002aac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e304      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8087 	beq.w	8002bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002adc:	4b92      	ldr	r3, [pc, #584]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d00c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ae8:	4b8f      	ldr	r3, [pc, #572]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d112      	bne.n	8002b1a <HAL_RCC_OscConfig+0x5e>
 8002af4:	4b8c      	ldr	r3, [pc, #560]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b00:	d10b      	bne.n	8002b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b02:	4b89      	ldr	r3, [pc, #548]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d06c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x12c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d168      	bne.n	8002be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e2de      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x76>
 8002b24:	4b80      	ldr	r3, [pc, #512]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a7f      	ldr	r2, [pc, #508]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e02e      	b.n	8002b90 <HAL_RCC_OscConfig+0xd4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x98>
 8002b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b78      	ldr	r3, [pc, #480]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a77      	ldr	r2, [pc, #476]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e01d      	b.n	8002b90 <HAL_RCC_OscConfig+0xd4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0xbc>
 8002b5e:	4b72      	ldr	r3, [pc, #456]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a71      	ldr	r2, [pc, #452]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xd4>
 8002b78:	4b6b      	ldr	r3, [pc, #428]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b68      	ldr	r3, [pc, #416]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a67      	ldr	r2, [pc, #412]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff faf2 	bl	8002180 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff faee 	bl	8002180 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	@ 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e292      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe4>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fade 	bl	8002180 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fada 	bl	8002180 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	@ 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e27e      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	4b53      	ldr	r3, [pc, #332]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x10c>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d063      	beq.n	8002cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c02:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d11c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x18c>
 8002c0e:	4b46      	ldr	r3, [pc, #280]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x176>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e252      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4939      	ldr	r1, [pc, #228]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	e03a      	b.n	8002cbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c50:	4b36      	ldr	r3, [pc, #216]	@ (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7ff fa93 	bl	8002180 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fa8f 	bl	8002180 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e233      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4927      	ldr	r1, [pc, #156]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
 8002c90:	e015      	b.n	8002cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <HAL_RCC_OscConfig+0x270>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fa72 	bl	8002180 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7ff fa6e 	bl	8002180 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e212      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03a      	beq.n	8002d40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d019      	beq.n	8002d06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd2:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fa52 	bl	8002180 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fa4e 	bl	8002180 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1f2      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f000 fc04 	bl	800350c <RCC_Delay>
 8002d04:	e01c      	b.n	8002d40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_RCC_OscConfig+0x274>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7ff fa38 	bl	8002180 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d12:	e00f      	b.n	8002d34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d14:	f7ff fa34 	bl	8002180 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d908      	bls.n	8002d34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1d8      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	42420000 	.word	0x42420000
 8002d30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	4b9b      	ldr	r3, [pc, #620]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e9      	bne.n	8002d14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a6 	beq.w	8002e9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4b94      	ldr	r3, [pc, #592]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b91      	ldr	r3, [pc, #580]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a90      	ldr	r2, [pc, #576]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	61d3      	str	r3, [r2, #28]
 8002d6a:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8002fa8 <HAL_RCC_OscConfig+0x4ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b88      	ldr	r3, [pc, #544]	@ (8002fa8 <HAL_RCC_OscConfig+0x4ec>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a87      	ldr	r2, [pc, #540]	@ (8002fa8 <HAL_RCC_OscConfig+0x4ec>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7ff f9f5 	bl	8002180 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7ff f9f1 	bl	8002180 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b64      	cmp	r3, #100	@ 0x64
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e195      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa8 <HAL_RCC_OscConfig+0x4ec>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x312>
 8002dc0:	4b78      	ldr	r3, [pc, #480]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a77      	ldr	r2, [pc, #476]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	e02d      	b.n	8002e2a <HAL_RCC_OscConfig+0x36e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x334>
 8002dd6:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a72      	ldr	r2, [pc, #456]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6213      	str	r3, [r2, #32]
 8002de2:	4b70      	ldr	r3, [pc, #448]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a6f      	ldr	r2, [pc, #444]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	e01c      	b.n	8002e2a <HAL_RCC_OscConfig+0x36e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d10c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x356>
 8002df8:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a69      	ldr	r2, [pc, #420]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	6213      	str	r3, [r2, #32]
 8002e04:	4b67      	ldr	r3, [pc, #412]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a66      	ldr	r2, [pc, #408]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6213      	str	r3, [r2, #32]
 8002e10:	e00b      	b.n	8002e2a <HAL_RCC_OscConfig+0x36e>
 8002e12:	4b64      	ldr	r3, [pc, #400]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a63      	ldr	r2, [pc, #396]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6213      	str	r3, [r2, #32]
 8002e1e:	4b61      	ldr	r3, [pc, #388]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a60      	ldr	r2, [pc, #384]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d015      	beq.n	8002e5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e32:	f7ff f9a5 	bl	8002180 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7ff f9a1 	bl	8002180 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e143      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	4b54      	ldr	r3, [pc, #336]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ee      	beq.n	8002e3a <HAL_RCC_OscConfig+0x37e>
 8002e5c:	e014      	b.n	8002e88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff f98f 	bl	8002180 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7ff f98b 	bl	8002180 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e12d      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1ee      	bne.n	8002e66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8e:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a44      	ldr	r2, [pc, #272]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 808c 	beq.w	8002fbc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002ebe:	4b39      	ldr	r3, [pc, #228]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e103      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d14e      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002ed8:	4b32      	ldr	r3, [pc, #200]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0ef      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <HAL_RCC_OscConfig+0x4f0>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7ff f93f 	bl	8002180 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f06:	f7ff f93b 	bl	8002180 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	@ 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0df      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002f18:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	491c      	ldr	r1, [pc, #112]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4918      	ldr	r1, [pc, #96]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002f48:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <HAL_RCC_OscConfig+0x4f0>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7ff f917 	bl	8002180 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f56:	f7ff f913 	bl	8002180 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	@ 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0b7      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002f68:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x49a>
 8002f74:	e022      	b.n	8002fbc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002f76:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <HAL_RCC_OscConfig+0x4e8>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <HAL_RCC_OscConfig+0x4f0>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff f8fa 	bl	8002180 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002f8e:	e00f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f90:	f7ff f8f6 	bl	8002180 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d908      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e09a      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e9      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8088 	beq.w	80030d6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc6:	4b46      	ldr	r3, [pc, #280]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d068      	beq.n	80030a4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d14d      	bne.n	8003076 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b42      	ldr	r3, [pc, #264]	@ (80030e4 <HAL_RCC_OscConfig+0x628>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f8ce 	bl	8002180 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff f8ca 	bl	8002180 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e06e      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	4b39      	ldr	r3, [pc, #228]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300e:	d10f      	bne.n	8003030 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003010:	4b33      	ldr	r3, [pc, #204]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4931      	ldr	r1, [pc, #196]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 800301a:	4313      	orrs	r3, r2
 800301c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800301e:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f023 020f 	bic.w	r2, r3, #15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	492d      	ldr	r1, [pc, #180]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 800302c:	4313      	orrs	r3, r2
 800302e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	430b      	orrs	r3, r1
 8003042:	4927      	ldr	r1, [pc, #156]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b26      	ldr	r3, [pc, #152]	@ (80030e4 <HAL_RCC_OscConfig+0x628>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7ff f897 	bl	8002180 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7ff f893 	bl	8002180 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e037      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003068:	4b1d      	ldr	r3, [pc, #116]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x59a>
 8003074:	e02f      	b.n	80030d6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x628>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7ff f880 	bl	8002180 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7ff f87c 	bl	8002180 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e020      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c8>
 80030a2:	e018      	b.n	80030d6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e013      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_OscConfig+0x624>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	42420060 	.word	0x42420060

080030e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0d0      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4965      	ldr	r1, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800314e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d040      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b41      	ldr	r3, [pc, #260]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e073      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4936      	ldr	r1, [pc, #216]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe ffd2 	bl	8002180 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe ffce 	bl	8002180 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e053      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b27      	ldr	r3, [pc, #156]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d210      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4922      	ldr	r1, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe ff30 	bl	80020fc <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	08009b5c 	.word	0x08009b5c
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b092      	sub	sp, #72	@ 0x48
 80032c2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c8:	2300      	movs	r3, #0
 80032ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032cc:	2300      	movs	r3, #0
 80032ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d0:	2300      	movs	r3, #0
 80032d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d002      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d003      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	e0c3      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b67      	ldr	r3, [pc, #412]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80032f8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80032fa:	e0c3      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fe:	0c9b      	lsrs	r3, r3, #18
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	4b64      	ldr	r3, [pc, #400]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800330a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80ac 	beq.w	800346e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003316:	4b5e      	ldr	r3, [pc, #376]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	4b5f      	ldr	r3, [pc, #380]	@ (800349c <HAL_RCC_GetSysClockFreq+0x1e0>)
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003324:	4b5a      	ldr	r3, [pc, #360]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 808c 	beq.w	800344a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003332:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	3301      	adds	r3, #1
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003340:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3302      	adds	r3, #2
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2200      	movs	r2, #0
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	627a      	str	r2, [r7, #36]	@ 0x24
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	2200      	movs	r2, #0
 800335a:	4618      	mov	r0, r3
 800335c:	4611      	mov	r1, r2
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	fb00 f203 	mul.w	r2, r0, r3
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	fb03 f301 	mul.w	r3, r3, r1
 800336a:	4413      	add	r3, r2
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	fba2 4500 	umull	r4, r5, r2, r0
 8003372:	442b      	add	r3, r5
 8003374:	461d      	mov	r5, r3
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	ebb2 0a04 	subs.w	sl, r2, r4
 8003392:	eb63 0b05 	sbc.w	fp, r3, r5
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033aa:	ebb2 080a 	subs.w	r8, r2, sl
 80033ae:	eb63 090b 	sbc.w	r9, r3, fp
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
 80033ca:	eb18 0304 	adds.w	r3, r8, r4
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	eb49 0305 	adc.w	r3, r9, r5
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e2:	4629      	mov	r1, r5
 80033e4:	028b      	lsls	r3, r1, #10
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	4604      	mov	r4, r0
 80033ec:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80033f0:	4601      	mov	r1, r0
 80033f2:	028a      	lsls	r2, r1, #10
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	617a      	str	r2, [r7, #20]
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	2200      	movs	r2, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800340c:	4622      	mov	r2, r4
 800340e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003412:	4645      	mov	r5, r8
 8003414:	fb05 f202 	mul.w	r2, r5, r2
 8003418:	46cc      	mov	ip, r9
 800341a:	4625      	mov	r5, r4
 800341c:	461c      	mov	r4, r3
 800341e:	4623      	mov	r3, r4
 8003420:	fb03 f30c 	mul.w	r3, r3, ip
 8003424:	4413      	add	r3, r2
 8003426:	4622      	mov	r2, r4
 8003428:	4644      	mov	r4, r8
 800342a:	fba2 2404 	umull	r2, r4, r2, r4
 800342e:	61fc      	str	r4, [r7, #28]
 8003430:	61ba      	str	r2, [r7, #24]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343c:	f7fd fc00 	bl	8000c40 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	647b      	str	r3, [r7, #68]	@ 0x44
 8003448:	e007      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800344e:	fb03 f202 	mul.w	r2, r3, r2
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800345c:	7b5b      	ldrb	r3, [r3, #13]
 800345e:	461a      	mov	r2, r3
 8003460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8003466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	647b      	str	r3, [r7, #68]	@ 0x44
 800346c:	e004      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800346e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003470:	4a0b      	ldr	r2, [pc, #44]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8003478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800347a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003480:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003482:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8003486:	4618      	mov	r0, r3
 8003488:	3748      	adds	r7, #72	@ 0x48
 800348a:	46bd      	mov	sp, r7
 800348c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	00f42400 	.word	0x00f42400
 8003498:	08009b74 	.word	0x08009b74
 800349c:	08009b84 	.word	0x08009b84
 80034a0:	003d0900 	.word	0x003d0900
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b02      	ldr	r3, [pc, #8]	@ (80034b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20000000 	.word	0x20000000

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff2 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	@ (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08009b6c 	.word	0x08009b6c

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0adb      	lsrs	r3, r3, #11
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	@ (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	08009b6c 	.word	0x08009b6c

0800350c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <RCC_Delay+0x34>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <RCC_Delay+0x38>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a5b      	lsrs	r3, r3, #9
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003528:	bf00      	nop
  }
  while (Delay --);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <RCC_Delay+0x1c>
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000000 	.word	0x20000000
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e041      	b.n	80035de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe f8aa 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fa64 	bl	8003a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e03f      	b.n	8003680 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1b      	ldr	r2, [pc, #108]	@ (800368c <HAL_TIM_Base_Start_IT+0xa4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362a:	d00e      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x62>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_TIM_Base_Start_IT+0xa8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a16      	ldr	r2, [pc, #88]	@ (8003694 <HAL_TIM_Base_Start_IT+0xac>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x62>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <HAL_TIM_Base_Start_IT+0xb0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d111      	bne.n	800366e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d010      	beq.n	800367e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	e007      	b.n	800367e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00

0800369c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0202 	mvn.w	r2, #2
 80036d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f998 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f98b 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f99a 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0204 	mvn.w	r2, #4
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f972 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f965 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f974 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f94c 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f93f 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f94e 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0210 	mvn.w	r2, #16
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2208      	movs	r2, #8
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f926 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f919 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f928 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0201 	mvn.w	r2, #1
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fe9c 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa91 	bl	8003d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8f8 	bl	8003a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0220 	mvn.w	r2, #32
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa64 	bl	8003d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIM_ConfigClockSource+0x1c>
 8003894:	2302      	movs	r3, #2
 8003896:	e0b4      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x186>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d0:	d03e      	beq.n	8003950 <HAL_TIM_ConfigClockSource+0xd4>
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d6:	f200 8087 	bhi.w	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038de:	f000 8086 	beq.w	80039ee <HAL_TIM_ConfigClockSource+0x172>
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e6:	d87f      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b70      	cmp	r3, #112	@ 0x70
 80038ea:	d01a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0xa6>
 80038ec:	2b70      	cmp	r3, #112	@ 0x70
 80038ee:	d87b      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b60      	cmp	r3, #96	@ 0x60
 80038f2:	d050      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x11a>
 80038f4:	2b60      	cmp	r3, #96	@ 0x60
 80038f6:	d877      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b50      	cmp	r3, #80	@ 0x50
 80038fa:	d03c      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0xfa>
 80038fc:	2b50      	cmp	r3, #80	@ 0x50
 80038fe:	d873      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d058      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003904:	2b40      	cmp	r3, #64	@ 0x40
 8003906:	d86f      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b30      	cmp	r3, #48	@ 0x30
 800390a:	d064      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	2b30      	cmp	r3, #48	@ 0x30
 800390e:	d86b      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b20      	cmp	r3, #32
 8003912:	d060      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	2b20      	cmp	r3, #32
 8003916:	d867      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05c      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 800391c:	2b10      	cmp	r3, #16
 800391e:	d05a      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	e062      	b.n	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003932:	f000 f97e 	bl	8003c32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	609a      	str	r2, [r3, #8]
      break;
 800394e:	e04f      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003960:	f000 f967 	bl	8003c32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003972:	609a      	str	r2, [r3, #8]
      break;
 8003974:	e03c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	461a      	mov	r2, r3
 8003984:	f000 f8de 	bl	8003b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2150      	movs	r1, #80	@ 0x50
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f935 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 8003994:	e02c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a2:	461a      	mov	r2, r3
 80039a4:	f000 f8fc 	bl	8003ba0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2160      	movs	r1, #96	@ 0x60
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f925 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80039b4:	e01c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	461a      	mov	r2, r3
 80039c4:	f000 f8be 	bl	8003b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2140      	movs	r1, #64	@ 0x40
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f915 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80039d4:	e00c      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f000 f90c 	bl	8003bfe <TIM_ITRx_SetConfig>
      break;
 80039e6:	e003      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
      break;
 80039ec:	e000      	b.n	80039f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
	...

08003a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a33      	ldr	r2, [pc, #204]	@ (8003b34 <TIM_Base_SetConfig+0xe0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00f      	beq.n	8003a8c <TIM_Base_SetConfig+0x38>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a72:	d00b      	beq.n	8003a8c <TIM_Base_SetConfig+0x38>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a30      	ldr	r2, [pc, #192]	@ (8003b38 <TIM_Base_SetConfig+0xe4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <TIM_Base_SetConfig+0x38>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b3c <TIM_Base_SetConfig+0xe8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x38>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a2e      	ldr	r2, [pc, #184]	@ (8003b40 <TIM_Base_SetConfig+0xec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a24      	ldr	r2, [pc, #144]	@ (8003b34 <TIM_Base_SetConfig+0xe0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <TIM_Base_SetConfig+0x72>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aac:	d00b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x72>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a21      	ldr	r2, [pc, #132]	@ (8003b38 <TIM_Base_SetConfig+0xe4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_Base_SetConfig+0x72>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a20      	ldr	r2, [pc, #128]	@ (8003b3c <TIM_Base_SetConfig+0xe8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_Base_SetConfig+0x72>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <TIM_Base_SetConfig+0xec>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <TIM_Base_SetConfig+0xe0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00

08003b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f023 0201 	bic.w	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 030a 	bic.w	r3, r3, #10
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0210 	bic.w	r2, r3, #16
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	031b      	lsls	r3, r3, #12
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	621a      	str	r2, [r3, #32]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 0307 	orr.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b087      	sub	sp, #28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	021a      	lsls	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e04b      	b.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a19      	ldr	r2, [pc, #100]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00

08003d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e042      	b.n	8003df8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fcd8 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	@ 0x24
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fdb7 	bl	8004918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d175      	bne.n	8003f0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x2c>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e06e      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	@ 0x21
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fe f99f 	bl	8002180 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e58:	d108      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e003      	b.n	8003e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e74:	e02e      	b.n	8003ed4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb1c 	bl	80044be <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e03a      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e007      	b.n	8003ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1cb      	bne.n	8003e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2140      	movs	r1, #64	@ 0x40
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fae8 	bl	80044be <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e006      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	4613      	mov	r3, r2
 8003f22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d112      	bne.n	8003f56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Receive_IT+0x26>
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e00b      	b.n	8003f58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fb0f 	bl	8004570 <UART_Start_Receive_IT>
 8003f52:	4603      	mov	r3, r0
 8003f54:	e000      	b.n	8003f58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0ba      	sub	sp, #232	@ 0xe8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x66>
 8003fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fbec 	bl	800479c <UART_Receive_IT>
      return;
 8003fc4:	e25b      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80de 	beq.w	800418c <HAL_UART_IRQHandler+0x22c>
 8003fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80d1 	beq.w	800418c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_UART_IRQHandler+0xae>
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <HAL_UART_IRQHandler+0xd2>
 800401a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0xf6>
 800403e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d011      	beq.n	8004086 <HAL_UART_IRQHandler+0x126>
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800406e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f043 0208 	orr.w	r2, r3, #8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 81f2 	beq.w	8004474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_UART_IRQHandler+0x14e>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb77 	bl	800479c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_UART_IRQHandler+0x17a>
 80040d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04f      	beq.n	800417a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa81 	bl	80045e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d041      	beq.n	8004172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800410c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800411a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800411e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1d9      	bne.n	80040ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <HAL_UART_IRQHandler+0x3e0>)
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe f98c 	bl	800246c <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00e      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f993 	bl	8004496 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e00a      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f98f 	bl	8004496 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	e006      	b.n	8004188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f98b 	bl	8004496 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004186:	e175      	b.n	8004474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	bf00      	nop
    return;
 800418a:	e173      	b.n	8004474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 814f 	bne.w	8004434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8148 	beq.w	8004434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8141 	beq.w	8004434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 80b6 	beq.w	8004344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8145 	beq.w	8004478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f080 813e 	bcs.w	8004478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b20      	cmp	r3, #32
 800420c:	f000 8088 	beq.w	8004320 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800422a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800422e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800423c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004248:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1d9      	bne.n	8004210 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800426c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004280:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004284:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004288:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e1      	bne.n	800425c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3314      	adds	r3, #20
 80042b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e3      	bne.n	8004298 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f0:	f023 0310 	bic.w	r3, r3, #16
 80042f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004302:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004304:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e3      	bne.n	80042de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f86b 	bl	80023f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800432e:	b29b      	uxth	r3, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	b29b      	uxth	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8b6 	bl	80044a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800433c:	e09c      	b.n	8004478 <HAL_UART_IRQHandler+0x518>
 800433e:	bf00      	nop
 8004340:	080046a7 	.word	0x080046a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800434c:	b29b      	uxth	r3, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 808e 	beq.w	800447c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8089 	beq.w	800447c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800438e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e3      	bne.n	800436a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	623b      	str	r3, [r7, #32]
   return(result);
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e3      	bne.n	80043e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f83b 	bl	80044a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004432:	e023      	b.n	800447c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_UART_IRQHandler+0x4f4>
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f93e 	bl	80046ce <UART_Transmit_IT>
    return;
 8004452:	e014      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <HAL_UART_IRQHandler+0x51e>
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f97d 	bl	800476c <UART_EndTransmit_IT>
    return;
 8004472:	e004      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
    return;
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
      return;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <HAL_UART_IRQHandler+0x51e>
      return;
 800447c:	bf00      	nop
  }
}
 800447e:	37e8      	adds	r7, #232	@ 0xe8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	e03b      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d037      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d8:	f7fd fe52 	bl	8002180 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <UART_WaitOnFlagUntilTimeout+0x30>
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e03a      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d023      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b80      	cmp	r3, #128	@ 0x80
 8004504:	d020      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b40      	cmp	r3, #64	@ 0x40
 800450a:	d01d      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d116      	bne.n	8004548 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f856 	bl	80045e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2208      	movs	r2, #8
 800453a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e00f      	b.n	8004568 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	429a      	cmp	r2, r3
 8004564:	d0b4      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2222      	movs	r2, #34	@ 0x22
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0220 	orr.w	r2, r2, #32
 80045d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b095      	sub	sp, #84	@ 0x54
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460a:	643a      	str	r2, [r7, #64]	@ 0x40
 800460c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e5      	bne.n	80045ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3314      	adds	r3, #20
 8004624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	61fb      	str	r3, [r7, #28]
   return(result);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800463e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e5      	bne.n	800461e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	2b01      	cmp	r3, #1
 8004658:	d119      	bne.n	800468e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	60bb      	str	r3, [r7, #8]
   return(result);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800467a:	61ba      	str	r2, [r7, #24]
 800467c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6979      	ldr	r1, [r7, #20]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	613b      	str	r3, [r7, #16]
   return(result);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800469c:	bf00      	nop
 800469e:	3754      	adds	r7, #84	@ 0x54
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff fee8 	bl	8004496 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b21      	cmp	r3, #33	@ 0x21
 80046e0:	d13e      	bne.n	8004760 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ea:	d114      	bne.n	8004716 <UART_Transmit_IT+0x48>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d110      	bne.n	8004716 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004708:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]
 8004714:	e008      	b.n	8004728 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6211      	str	r1, [r2, #32]
 8004720:	781a      	ldrb	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29b      	uxth	r3, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800474a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800475a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004782:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fe79 	bl	8004484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08c      	sub	sp, #48	@ 0x30
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b22      	cmp	r3, #34	@ 0x22
 80047ae:	f040 80ae 	bne.w	800490e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ba:	d117      	bne.n	80047ec <UART_Receive_IT+0x50>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d113      	bne.n	80047ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ea:	e026      	b.n	800483a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fe:	d007      	beq.n	8004810 <UART_Receive_IT+0x74>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <UART_Receive_IT+0x82>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e008      	b.n	8004830 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482a:	b2da      	uxtb	r2, r3
 800482c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4619      	mov	r1, r3
 8004848:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800484a:	2b00      	cmp	r3, #0
 800484c:	d15d      	bne.n	800490a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0220 	bic.w	r2, r2, #32
 800485c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800486c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	d135      	bne.n	8004900 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f023 0310 	bic.w	r3, r3, #16
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ba:	623a      	str	r2, [r7, #32]
 80048bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	69f9      	ldr	r1, [r7, #28]
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d10a      	bne.n	80048f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fdd5 	bl	80044a8 <HAL_UARTEx_RxEventCallback>
 80048fe:	e002      	b.n	8004906 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fc fe6f 	bl	80015e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e002      	b.n	8004910 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e000      	b.n	8004910 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800490e:	2302      	movs	r3, #2
  }
}
 8004910:	4618      	mov	r0, r3
 8004912:	3730      	adds	r7, #48	@ 0x30
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004952:	f023 030c 	bic.w	r3, r3, #12
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	430b      	orrs	r3, r1
 800495e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <UART_SetConfig+0x114>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7fe fdb0 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	e002      	b.n	800498e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe fd98 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 800498c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009a      	lsls	r2, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	4a22      	ldr	r2, [pc, #136]	@ (8004a30 <UART_SetConfig+0x118>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	0119      	lsls	r1, r3, #4
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <UART_SetConfig+0x118>)
 80049c6:	fba3 0302 	umull	r0, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2064      	movs	r0, #100	@ 0x64
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	3332      	adds	r3, #50	@ 0x32
 80049d8:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <UART_SetConfig+0x118>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049e4:	4419      	add	r1, r3
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	009a      	lsls	r2, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <UART_SetConfig+0x118>)
 80049fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2064      	movs	r0, #100	@ 0x64
 8004a06:	fb00 f303 	mul.w	r3, r0, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	3332      	adds	r3, #50	@ 0x32
 8004a10:	4a07      	ldr	r2, [pc, #28]	@ (8004a30 <UART_SetConfig+0x118>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	440a      	add	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	51eb851f 	.word	0x51eb851f

08004a34 <__cvt>:
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	bfbb      	ittet	lt
 8004a3e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004a42:	461d      	movlt	r5, r3
 8004a44:	2300      	movge	r3, #0
 8004a46:	232d      	movlt	r3, #45	@ 0x2d
 8004a48:	b088      	sub	sp, #32
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	bfb8      	it	lt
 8004a4e:	4614      	movlt	r4, r2
 8004a50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a52:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004a54:	7013      	strb	r3, [r2, #0]
 8004a56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a58:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004a5c:	f023 0820 	bic.w	r8, r3, #32
 8004a60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a64:	d005      	beq.n	8004a72 <__cvt+0x3e>
 8004a66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a6a:	d100      	bne.n	8004a6e <__cvt+0x3a>
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e000      	b.n	8004a74 <__cvt+0x40>
 8004a72:	2303      	movs	r3, #3
 8004a74:	aa07      	add	r2, sp, #28
 8004a76:	9204      	str	r2, [sp, #16]
 8004a78:	aa06      	add	r2, sp, #24
 8004a7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a7e:	e9cd 3600 	strd	r3, r6, [sp]
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	f001 f8af 	bl	8005be8 <_dtoa_r>
 8004a8a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a8e:	4607      	mov	r7, r0
 8004a90:	d119      	bne.n	8004ac6 <__cvt+0x92>
 8004a92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a94:	07db      	lsls	r3, r3, #31
 8004a96:	d50e      	bpl.n	8004ab6 <__cvt+0x82>
 8004a98:	eb00 0906 	add.w	r9, r0, r6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f7fb ffec 	bl	8000a80 <__aeabi_dcmpeq>
 8004aa8:	b108      	cbz	r0, 8004aae <__cvt+0x7a>
 8004aaa:	f8cd 901c 	str.w	r9, [sp, #28]
 8004aae:	2230      	movs	r2, #48	@ 0x30
 8004ab0:	9b07      	ldr	r3, [sp, #28]
 8004ab2:	454b      	cmp	r3, r9
 8004ab4:	d31e      	bcc.n	8004af4 <__cvt+0xc0>
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	9b07      	ldr	r3, [sp, #28]
 8004aba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004abc:	1bdb      	subs	r3, r3, r7
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	b008      	add	sp, #32
 8004ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004aca:	eb00 0906 	add.w	r9, r0, r6
 8004ace:	d1e5      	bne.n	8004a9c <__cvt+0x68>
 8004ad0:	7803      	ldrb	r3, [r0, #0]
 8004ad2:	2b30      	cmp	r3, #48	@ 0x30
 8004ad4:	d10a      	bne.n	8004aec <__cvt+0xb8>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fb ffcf 	bl	8000a80 <__aeabi_dcmpeq>
 8004ae2:	b918      	cbnz	r0, 8004aec <__cvt+0xb8>
 8004ae4:	f1c6 0601 	rsb	r6, r6, #1
 8004ae8:	f8ca 6000 	str.w	r6, [sl]
 8004aec:	f8da 3000 	ldr.w	r3, [sl]
 8004af0:	4499      	add	r9, r3
 8004af2:	e7d3      	b.n	8004a9c <__cvt+0x68>
 8004af4:	1c59      	adds	r1, r3, #1
 8004af6:	9107      	str	r1, [sp, #28]
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	e7d9      	b.n	8004ab0 <__cvt+0x7c>

08004afc <__exponent>:
 8004afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004afe:	2900      	cmp	r1, #0
 8004b00:	bfb6      	itet	lt
 8004b02:	232d      	movlt	r3, #45	@ 0x2d
 8004b04:	232b      	movge	r3, #43	@ 0x2b
 8004b06:	4249      	neglt	r1, r1
 8004b08:	2909      	cmp	r1, #9
 8004b0a:	7002      	strb	r2, [r0, #0]
 8004b0c:	7043      	strb	r3, [r0, #1]
 8004b0e:	dd29      	ble.n	8004b64 <__exponent+0x68>
 8004b10:	f10d 0307 	add.w	r3, sp, #7
 8004b14:	461d      	mov	r5, r3
 8004b16:	270a      	movs	r7, #10
 8004b18:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	fb07 1416 	mls	r4, r7, r6, r1
 8004b22:	3430      	adds	r4, #48	@ 0x30
 8004b24:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b28:	460c      	mov	r4, r1
 8004b2a:	2c63      	cmp	r4, #99	@ 0x63
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b32:	dcf1      	bgt.n	8004b18 <__exponent+0x1c>
 8004b34:	3130      	adds	r1, #48	@ 0x30
 8004b36:	1e94      	subs	r4, r2, #2
 8004b38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	1c41      	adds	r1, r0, #1
 8004b40:	42ab      	cmp	r3, r5
 8004b42:	d30a      	bcc.n	8004b5a <__exponent+0x5e>
 8004b44:	f10d 0309 	add.w	r3, sp, #9
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	42ac      	cmp	r4, r5
 8004b4c:	bf88      	it	hi
 8004b4e:	2300      	movhi	r3, #0
 8004b50:	3302      	adds	r3, #2
 8004b52:	4403      	add	r3, r0
 8004b54:	1a18      	subs	r0, r3, r0
 8004b56:	b003      	add	sp, #12
 8004b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b5e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b62:	e7ed      	b.n	8004b40 <__exponent+0x44>
 8004b64:	2330      	movs	r3, #48	@ 0x30
 8004b66:	3130      	adds	r1, #48	@ 0x30
 8004b68:	7083      	strb	r3, [r0, #2]
 8004b6a:	70c1      	strb	r1, [r0, #3]
 8004b6c:	1d03      	adds	r3, r0, #4
 8004b6e:	e7f1      	b.n	8004b54 <__exponent+0x58>

08004b70 <_printf_float>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	b091      	sub	sp, #68	@ 0x44
 8004b76:	460c      	mov	r4, r1
 8004b78:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	461f      	mov	r7, r3
 8004b80:	4605      	mov	r5, r0
 8004b82:	f000 ff1d 	bl	80059c0 <_localeconv_r>
 8004b86:	6803      	ldr	r3, [r0, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	9308      	str	r3, [sp, #32]
 8004b8c:	f7fb fb4c 	bl	8000228 <strlen>
 8004b90:	2300      	movs	r3, #0
 8004b92:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b94:	f8d8 3000 	ldr.w	r3, [r8]
 8004b98:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b9a:	3307      	adds	r3, #7
 8004b9c:	f023 0307 	bic.w	r3, r3, #7
 8004ba0:	f103 0208 	add.w	r2, r3, #8
 8004ba4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ba8:	f8d4 b000 	ldr.w	fp, [r4]
 8004bac:	f8c8 2000 	str.w	r2, [r8]
 8004bb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004bc6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004bca:	4b9c      	ldr	r3, [pc, #624]	@ (8004e3c <_printf_float+0x2cc>)
 8004bcc:	f7fb ff8a 	bl	8000ae4 <__aeabi_dcmpun>
 8004bd0:	bb70      	cbnz	r0, 8004c30 <_printf_float+0xc0>
 8004bd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	4b98      	ldr	r3, [pc, #608]	@ (8004e3c <_printf_float+0x2cc>)
 8004bdc:	f7fb ff64 	bl	8000aa8 <__aeabi_dcmple>
 8004be0:	bb30      	cbnz	r0, 8004c30 <_printf_float+0xc0>
 8004be2:	2200      	movs	r2, #0
 8004be4:	2300      	movs	r3, #0
 8004be6:	4640      	mov	r0, r8
 8004be8:	4649      	mov	r1, r9
 8004bea:	f7fb ff53 	bl	8000a94 <__aeabi_dcmplt>
 8004bee:	b110      	cbz	r0, 8004bf6 <_printf_float+0x86>
 8004bf0:	232d      	movs	r3, #45	@ 0x2d
 8004bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bf6:	4a92      	ldr	r2, [pc, #584]	@ (8004e40 <_printf_float+0x2d0>)
 8004bf8:	4b92      	ldr	r3, [pc, #584]	@ (8004e44 <_printf_float+0x2d4>)
 8004bfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bfe:	bf94      	ite	ls
 8004c00:	4690      	movls	r8, r2
 8004c02:	4698      	movhi	r8, r3
 8004c04:	2303      	movs	r3, #3
 8004c06:	f04f 0900 	mov.w	r9, #0
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f02b 0304 	bic.w	r3, fp, #4
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	4633      	mov	r3, r6
 8004c14:	4621      	mov	r1, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	9700      	str	r7, [sp, #0]
 8004c1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004c1c:	f000 f9d4 	bl	8004fc8 <_printf_common>
 8004c20:	3001      	adds	r0, #1
 8004c22:	f040 8090 	bne.w	8004d46 <_printf_float+0x1d6>
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	b011      	add	sp, #68	@ 0x44
 8004c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	4640      	mov	r0, r8
 8004c36:	4649      	mov	r1, r9
 8004c38:	f7fb ff54 	bl	8000ae4 <__aeabi_dcmpun>
 8004c3c:	b148      	cbz	r0, 8004c52 <_printf_float+0xe2>
 8004c3e:	464b      	mov	r3, r9
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bfb8      	it	lt
 8004c44:	232d      	movlt	r3, #45	@ 0x2d
 8004c46:	4a80      	ldr	r2, [pc, #512]	@ (8004e48 <_printf_float+0x2d8>)
 8004c48:	bfb8      	it	lt
 8004c4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c4e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e4c <_printf_float+0x2dc>)
 8004c50:	e7d3      	b.n	8004bfa <_printf_float+0x8a>
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	d13f      	bne.n	8004cdc <_printf_float+0x16c>
 8004c5c:	2306      	movs	r3, #6
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	9206      	str	r2, [sp, #24]
 8004c6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c6c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004c70:	aa0d      	add	r2, sp, #52	@ 0x34
 8004c72:	9203      	str	r2, [sp, #12]
 8004c74:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004c78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c7c:	6863      	ldr	r3, [r4, #4]
 8004c7e:	4642      	mov	r2, r8
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4628      	mov	r0, r5
 8004c84:	464b      	mov	r3, r9
 8004c86:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c88:	f7ff fed4 	bl	8004a34 <__cvt>
 8004c8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c8e:	4680      	mov	r8, r0
 8004c90:	2947      	cmp	r1, #71	@ 0x47
 8004c92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c94:	d128      	bne.n	8004ce8 <_printf_float+0x178>
 8004c96:	1cc8      	adds	r0, r1, #3
 8004c98:	db02      	blt.n	8004ca0 <_printf_float+0x130>
 8004c9a:	6863      	ldr	r3, [r4, #4]
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	dd40      	ble.n	8004d22 <_printf_float+0x1b2>
 8004ca0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ca4:	fa5f fa8a 	uxtb.w	sl, sl
 8004ca8:	4652      	mov	r2, sl
 8004caa:	3901      	subs	r1, #1
 8004cac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004cb0:	910d      	str	r1, [sp, #52]	@ 0x34
 8004cb2:	f7ff ff23 	bl	8004afc <__exponent>
 8004cb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004cb8:	4681      	mov	r9, r0
 8004cba:	1813      	adds	r3, r2, r0
 8004cbc:	2a01      	cmp	r2, #1
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	dc02      	bgt.n	8004cc8 <_printf_float+0x158>
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	07d2      	lsls	r2, r2, #31
 8004cc6:	d501      	bpl.n	8004ccc <_printf_float+0x15c>
 8004cc8:	3301      	adds	r3, #1
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d09e      	beq.n	8004c12 <_printf_float+0xa2>
 8004cd4:	232d      	movs	r3, #45	@ 0x2d
 8004cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cda:	e79a      	b.n	8004c12 <_printf_float+0xa2>
 8004cdc:	2947      	cmp	r1, #71	@ 0x47
 8004cde:	d1bf      	bne.n	8004c60 <_printf_float+0xf0>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1bd      	bne.n	8004c60 <_printf_float+0xf0>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e7ba      	b.n	8004c5e <_printf_float+0xee>
 8004ce8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cec:	d9dc      	bls.n	8004ca8 <_printf_float+0x138>
 8004cee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cf2:	d118      	bne.n	8004d26 <_printf_float+0x1b6>
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	dd0b      	ble.n	8004d12 <_printf_float+0x1a2>
 8004cfa:	6121      	str	r1, [r4, #16]
 8004cfc:	b913      	cbnz	r3, 8004d04 <_printf_float+0x194>
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	07d0      	lsls	r0, r2, #31
 8004d02:	d502      	bpl.n	8004d0a <_printf_float+0x19a>
 8004d04:	3301      	adds	r3, #1
 8004d06:	440b      	add	r3, r1
 8004d08:	6123      	str	r3, [r4, #16]
 8004d0a:	f04f 0900 	mov.w	r9, #0
 8004d0e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d10:	e7dc      	b.n	8004ccc <_printf_float+0x15c>
 8004d12:	b913      	cbnz	r3, 8004d1a <_printf_float+0x1aa>
 8004d14:	6822      	ldr	r2, [r4, #0]
 8004d16:	07d2      	lsls	r2, r2, #31
 8004d18:	d501      	bpl.n	8004d1e <_printf_float+0x1ae>
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	e7f4      	b.n	8004d08 <_printf_float+0x198>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e7f2      	b.n	8004d08 <_printf_float+0x198>
 8004d22:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	db05      	blt.n	8004d38 <_printf_float+0x1c8>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	6121      	str	r1, [r4, #16]
 8004d30:	07d8      	lsls	r0, r3, #31
 8004d32:	d5ea      	bpl.n	8004d0a <_printf_float+0x19a>
 8004d34:	1c4b      	adds	r3, r1, #1
 8004d36:	e7e7      	b.n	8004d08 <_printf_float+0x198>
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	bfcc      	ite	gt
 8004d3c:	2201      	movgt	r2, #1
 8004d3e:	f1c1 0202 	rsble	r2, r1, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	e7e0      	b.n	8004d08 <_printf_float+0x198>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	055a      	lsls	r2, r3, #21
 8004d4a:	d407      	bmi.n	8004d5c <_printf_float+0x1ec>
 8004d4c:	6923      	ldr	r3, [r4, #16]
 8004d4e:	4642      	mov	r2, r8
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	d12b      	bne.n	8004db2 <_printf_float+0x242>
 8004d5a:	e764      	b.n	8004c26 <_printf_float+0xb6>
 8004d5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d60:	f240 80dc 	bls.w	8004f1c <_printf_float+0x3ac>
 8004d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f7fb fe88 	bl	8000a80 <__aeabi_dcmpeq>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d033      	beq.n	8004ddc <_printf_float+0x26c>
 8004d74:	2301      	movs	r3, #1
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	4a35      	ldr	r2, [pc, #212]	@ (8004e50 <_printf_float+0x2e0>)
 8004d7c:	47b8      	blx	r7
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f af51 	beq.w	8004c26 <_printf_float+0xb6>
 8004d84:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004d88:	4543      	cmp	r3, r8
 8004d8a:	db02      	blt.n	8004d92 <_printf_float+0x222>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	07d8      	lsls	r0, r3, #31
 8004d90:	d50f      	bpl.n	8004db2 <_printf_float+0x242>
 8004d92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f af42 	beq.w	8004c26 <_printf_float+0xb6>
 8004da2:	f04f 0900 	mov.w	r9, #0
 8004da6:	f108 38ff 	add.w	r8, r8, #4294967295
 8004daa:	f104 0a1a 	add.w	sl, r4, #26
 8004dae:	45c8      	cmp	r8, r9
 8004db0:	dc09      	bgt.n	8004dc6 <_printf_float+0x256>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	079b      	lsls	r3, r3, #30
 8004db6:	f100 8102 	bmi.w	8004fbe <_printf_float+0x44e>
 8004dba:	68e0      	ldr	r0, [r4, #12]
 8004dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dbe:	4298      	cmp	r0, r3
 8004dc0:	bfb8      	it	lt
 8004dc2:	4618      	movlt	r0, r3
 8004dc4:	e731      	b.n	8004c2a <_printf_float+0xba>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4652      	mov	r2, sl
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f af28 	beq.w	8004c26 <_printf_float+0xb6>
 8004dd6:	f109 0901 	add.w	r9, r9, #1
 8004dda:	e7e8      	b.n	8004dae <_printf_float+0x23e>
 8004ddc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dc38      	bgt.n	8004e54 <_printf_float+0x2e4>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	4a19      	ldr	r2, [pc, #100]	@ (8004e50 <_printf_float+0x2e0>)
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f af1a 	beq.w	8004c26 <_printf_float+0xb6>
 8004df2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004df6:	ea59 0303 	orrs.w	r3, r9, r3
 8004dfa:	d102      	bne.n	8004e02 <_printf_float+0x292>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	07d9      	lsls	r1, r3, #31
 8004e00:	d5d7      	bpl.n	8004db2 <_printf_float+0x242>
 8004e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e06:	4631      	mov	r1, r6
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b8      	blx	r7
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	f43f af0a 	beq.w	8004c26 <_printf_float+0xb6>
 8004e12:	f04f 0a00 	mov.w	sl, #0
 8004e16:	f104 0b1a 	add.w	fp, r4, #26
 8004e1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e1c:	425b      	negs	r3, r3
 8004e1e:	4553      	cmp	r3, sl
 8004e20:	dc01      	bgt.n	8004e26 <_printf_float+0x2b6>
 8004e22:	464b      	mov	r3, r9
 8004e24:	e793      	b.n	8004d4e <_printf_float+0x1de>
 8004e26:	2301      	movs	r3, #1
 8004e28:	465a      	mov	r2, fp
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f aef8 	beq.w	8004c26 <_printf_float+0xb6>
 8004e36:	f10a 0a01 	add.w	sl, sl, #1
 8004e3a:	e7ee      	b.n	8004e1a <_printf_float+0x2aa>
 8004e3c:	7fefffff 	.word	0x7fefffff
 8004e40:	08009b94 	.word	0x08009b94
 8004e44:	08009b98 	.word	0x08009b98
 8004e48:	08009b9c 	.word	0x08009b9c
 8004e4c:	08009ba0 	.word	0x08009ba0
 8004e50:	08009f30 	.word	0x08009f30
 8004e54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e56:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e5a:	4553      	cmp	r3, sl
 8004e5c:	bfa8      	it	ge
 8004e5e:	4653      	movge	r3, sl
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	4699      	mov	r9, r3
 8004e64:	dc36      	bgt.n	8004ed4 <_printf_float+0x364>
 8004e66:	f04f 0b00 	mov.w	fp, #0
 8004e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e6e:	f104 021a 	add.w	r2, r4, #26
 8004e72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e74:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e76:	eba3 0309 	sub.w	r3, r3, r9
 8004e7a:	455b      	cmp	r3, fp
 8004e7c:	dc31      	bgt.n	8004ee2 <_printf_float+0x372>
 8004e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e80:	459a      	cmp	sl, r3
 8004e82:	dc3a      	bgt.n	8004efa <_printf_float+0x38a>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	07da      	lsls	r2, r3, #31
 8004e88:	d437      	bmi.n	8004efa <_printf_float+0x38a>
 8004e8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e8c:	ebaa 0903 	sub.w	r9, sl, r3
 8004e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e92:	ebaa 0303 	sub.w	r3, sl, r3
 8004e96:	4599      	cmp	r9, r3
 8004e98:	bfa8      	it	ge
 8004e9a:	4699      	movge	r9, r3
 8004e9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ea0:	dc33      	bgt.n	8004f0a <_printf_float+0x39a>
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eaa:	f104 0b1a 	add.w	fp, r4, #26
 8004eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8004eb4:	eba3 0309 	sub.w	r3, r3, r9
 8004eb8:	4543      	cmp	r3, r8
 8004eba:	f77f af7a 	ble.w	8004db2 <_printf_float+0x242>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	465a      	mov	r2, fp
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f43f aeac 	beq.w	8004c26 <_printf_float+0xb6>
 8004ece:	f108 0801 	add.w	r8, r8, #1
 8004ed2:	e7ec      	b.n	8004eae <_printf_float+0x33e>
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	d1c2      	bne.n	8004e66 <_printf_float+0x2f6>
 8004ee0:	e6a1      	b.n	8004c26 <_printf_float+0xb6>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	920a      	str	r2, [sp, #40]	@ 0x28
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f ae9a 	beq.w	8004c26 <_printf_float+0xb6>
 8004ef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ef4:	f10b 0b01 	add.w	fp, fp, #1
 8004ef8:	e7bb      	b.n	8004e72 <_printf_float+0x302>
 8004efa:	4631      	mov	r1, r6
 8004efc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	d1c0      	bne.n	8004e8a <_printf_float+0x31a>
 8004f08:	e68d      	b.n	8004c26 <_printf_float+0xb6>
 8004f0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	4442      	add	r2, r8
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	d1c3      	bne.n	8004ea2 <_printf_float+0x332>
 8004f1a:	e684      	b.n	8004c26 <_printf_float+0xb6>
 8004f1c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f20:	f1ba 0f01 	cmp.w	sl, #1
 8004f24:	dc01      	bgt.n	8004f2a <_printf_float+0x3ba>
 8004f26:	07db      	lsls	r3, r3, #31
 8004f28:	d536      	bpl.n	8004f98 <_printf_float+0x428>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f ae76 	beq.w	8004c26 <_printf_float+0xb6>
 8004f3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae6e 	beq.w	8004c26 <_printf_float+0xb6>
 8004f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f56:	f7fb fd93 	bl	8000a80 <__aeabi_dcmpeq>
 8004f5a:	b9c0      	cbnz	r0, 8004f8e <_printf_float+0x41e>
 8004f5c:	4653      	mov	r3, sl
 8004f5e:	f108 0201 	add.w	r2, r8, #1
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d10c      	bne.n	8004f86 <_printf_float+0x416>
 8004f6c:	e65b      	b.n	8004c26 <_printf_float+0xb6>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	465a      	mov	r2, fp
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae54 	beq.w	8004c26 <_printf_float+0xb6>
 8004f7e:	f108 0801 	add.w	r8, r8, #1
 8004f82:	45d0      	cmp	r8, sl
 8004f84:	dbf3      	blt.n	8004f6e <_printf_float+0x3fe>
 8004f86:	464b      	mov	r3, r9
 8004f88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f8c:	e6e0      	b.n	8004d50 <_printf_float+0x1e0>
 8004f8e:	f04f 0800 	mov.w	r8, #0
 8004f92:	f104 0b1a 	add.w	fp, r4, #26
 8004f96:	e7f4      	b.n	8004f82 <_printf_float+0x412>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	e7e1      	b.n	8004f62 <_printf_float+0x3f2>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	464a      	mov	r2, r9
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f43f ae3c 	beq.w	8004c26 <_printf_float+0xb6>
 8004fae:	f108 0801 	add.w	r8, r8, #1
 8004fb2:	68e3      	ldr	r3, [r4, #12]
 8004fb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004fb6:	1a5b      	subs	r3, r3, r1
 8004fb8:	4543      	cmp	r3, r8
 8004fba:	dcf0      	bgt.n	8004f9e <_printf_float+0x42e>
 8004fbc:	e6fd      	b.n	8004dba <_printf_float+0x24a>
 8004fbe:	f04f 0800 	mov.w	r8, #0
 8004fc2:	f104 0919 	add.w	r9, r4, #25
 8004fc6:	e7f4      	b.n	8004fb2 <_printf_float+0x442>

08004fc8 <_printf_common>:
 8004fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	4616      	mov	r6, r2
 8004fce:	4698      	mov	r8, r3
 8004fd0:	688a      	ldr	r2, [r1, #8]
 8004fd2:	690b      	ldr	r3, [r1, #16]
 8004fd4:	4607      	mov	r7, r0
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	bfb8      	it	lt
 8004fda:	4613      	movlt	r3, r2
 8004fdc:	6033      	str	r3, [r6, #0]
 8004fde:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fe8:	b10a      	cbz	r2, 8004fee <_printf_common+0x26>
 8004fea:	3301      	adds	r3, #1
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	0699      	lsls	r1, r3, #26
 8004ff2:	bf42      	ittt	mi
 8004ff4:	6833      	ldrmi	r3, [r6, #0]
 8004ff6:	3302      	addmi	r3, #2
 8004ff8:	6033      	strmi	r3, [r6, #0]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	f015 0506 	ands.w	r5, r5, #6
 8005000:	d106      	bne.n	8005010 <_printf_common+0x48>
 8005002:	f104 0a19 	add.w	sl, r4, #25
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	6832      	ldr	r2, [r6, #0]
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	42ab      	cmp	r3, r5
 800500e:	dc2b      	bgt.n	8005068 <_printf_common+0xa0>
 8005010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	3b00      	subs	r3, #0
 8005018:	bf18      	it	ne
 800501a:	2301      	movne	r3, #1
 800501c:	0692      	lsls	r2, r2, #26
 800501e:	d430      	bmi.n	8005082 <_printf_common+0xba>
 8005020:	4641      	mov	r1, r8
 8005022:	4638      	mov	r0, r7
 8005024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005028:	47c8      	blx	r9
 800502a:	3001      	adds	r0, #1
 800502c:	d023      	beq.n	8005076 <_printf_common+0xae>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	6922      	ldr	r2, [r4, #16]
 8005032:	f003 0306 	and.w	r3, r3, #6
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf14      	ite	ne
 800503a:	2500      	movne	r5, #0
 800503c:	6833      	ldreq	r3, [r6, #0]
 800503e:	f04f 0600 	mov.w	r6, #0
 8005042:	bf08      	it	eq
 8005044:	68e5      	ldreq	r5, [r4, #12]
 8005046:	f104 041a 	add.w	r4, r4, #26
 800504a:	bf08      	it	eq
 800504c:	1aed      	subeq	r5, r5, r3
 800504e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005052:	bf08      	it	eq
 8005054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005058:	4293      	cmp	r3, r2
 800505a:	bfc4      	itt	gt
 800505c:	1a9b      	subgt	r3, r3, r2
 800505e:	18ed      	addgt	r5, r5, r3
 8005060:	42b5      	cmp	r5, r6
 8005062:	d11a      	bne.n	800509a <_printf_common+0xd2>
 8005064:	2000      	movs	r0, #0
 8005066:	e008      	b.n	800507a <_printf_common+0xb2>
 8005068:	2301      	movs	r3, #1
 800506a:	4652      	mov	r2, sl
 800506c:	4641      	mov	r1, r8
 800506e:	4638      	mov	r0, r7
 8005070:	47c8      	blx	r9
 8005072:	3001      	adds	r0, #1
 8005074:	d103      	bne.n	800507e <_printf_common+0xb6>
 8005076:	f04f 30ff 	mov.w	r0, #4294967295
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	3501      	adds	r5, #1
 8005080:	e7c1      	b.n	8005006 <_printf_common+0x3e>
 8005082:	2030      	movs	r0, #48	@ 0x30
 8005084:	18e1      	adds	r1, r4, r3
 8005086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005090:	4422      	add	r2, r4
 8005092:	3302      	adds	r3, #2
 8005094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005098:	e7c2      	b.n	8005020 <_printf_common+0x58>
 800509a:	2301      	movs	r3, #1
 800509c:	4622      	mov	r2, r4
 800509e:	4641      	mov	r1, r8
 80050a0:	4638      	mov	r0, r7
 80050a2:	47c8      	blx	r9
 80050a4:	3001      	adds	r0, #1
 80050a6:	d0e6      	beq.n	8005076 <_printf_common+0xae>
 80050a8:	3601      	adds	r6, #1
 80050aa:	e7d9      	b.n	8005060 <_printf_common+0x98>

080050ac <_printf_i>:
 80050ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	7e0f      	ldrb	r7, [r1, #24]
 80050b2:	4691      	mov	r9, r2
 80050b4:	2f78      	cmp	r7, #120	@ 0x78
 80050b6:	4680      	mov	r8, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	469a      	mov	sl, r3
 80050bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050c2:	d807      	bhi.n	80050d4 <_printf_i+0x28>
 80050c4:	2f62      	cmp	r7, #98	@ 0x62
 80050c6:	d80a      	bhi.n	80050de <_printf_i+0x32>
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	f000 80d3 	beq.w	8005274 <_printf_i+0x1c8>
 80050ce:	2f58      	cmp	r7, #88	@ 0x58
 80050d0:	f000 80ba 	beq.w	8005248 <_printf_i+0x19c>
 80050d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050dc:	e03a      	b.n	8005154 <_printf_i+0xa8>
 80050de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050e2:	2b15      	cmp	r3, #21
 80050e4:	d8f6      	bhi.n	80050d4 <_printf_i+0x28>
 80050e6:	a101      	add	r1, pc, #4	@ (adr r1, 80050ec <_printf_i+0x40>)
 80050e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050ec:	08005145 	.word	0x08005145
 80050f0:	08005159 	.word	0x08005159
 80050f4:	080050d5 	.word	0x080050d5
 80050f8:	080050d5 	.word	0x080050d5
 80050fc:	080050d5 	.word	0x080050d5
 8005100:	080050d5 	.word	0x080050d5
 8005104:	08005159 	.word	0x08005159
 8005108:	080050d5 	.word	0x080050d5
 800510c:	080050d5 	.word	0x080050d5
 8005110:	080050d5 	.word	0x080050d5
 8005114:	080050d5 	.word	0x080050d5
 8005118:	0800525b 	.word	0x0800525b
 800511c:	08005183 	.word	0x08005183
 8005120:	08005215 	.word	0x08005215
 8005124:	080050d5 	.word	0x080050d5
 8005128:	080050d5 	.word	0x080050d5
 800512c:	0800527d 	.word	0x0800527d
 8005130:	080050d5 	.word	0x080050d5
 8005134:	08005183 	.word	0x08005183
 8005138:	080050d5 	.word	0x080050d5
 800513c:	080050d5 	.word	0x080050d5
 8005140:	0800521d 	.word	0x0800521d
 8005144:	6833      	ldr	r3, [r6, #0]
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6032      	str	r2, [r6, #0]
 800514c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005154:	2301      	movs	r3, #1
 8005156:	e09e      	b.n	8005296 <_printf_i+0x1ea>
 8005158:	6833      	ldr	r3, [r6, #0]
 800515a:	6820      	ldr	r0, [r4, #0]
 800515c:	1d19      	adds	r1, r3, #4
 800515e:	6031      	str	r1, [r6, #0]
 8005160:	0606      	lsls	r6, r0, #24
 8005162:	d501      	bpl.n	8005168 <_printf_i+0xbc>
 8005164:	681d      	ldr	r5, [r3, #0]
 8005166:	e003      	b.n	8005170 <_printf_i+0xc4>
 8005168:	0645      	lsls	r5, r0, #25
 800516a:	d5fb      	bpl.n	8005164 <_printf_i+0xb8>
 800516c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005170:	2d00      	cmp	r5, #0
 8005172:	da03      	bge.n	800517c <_printf_i+0xd0>
 8005174:	232d      	movs	r3, #45	@ 0x2d
 8005176:	426d      	negs	r5, r5
 8005178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800517c:	230a      	movs	r3, #10
 800517e:	4859      	ldr	r0, [pc, #356]	@ (80052e4 <_printf_i+0x238>)
 8005180:	e011      	b.n	80051a6 <_printf_i+0xfa>
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	6833      	ldr	r3, [r6, #0]
 8005186:	0608      	lsls	r0, r1, #24
 8005188:	f853 5b04 	ldr.w	r5, [r3], #4
 800518c:	d402      	bmi.n	8005194 <_printf_i+0xe8>
 800518e:	0649      	lsls	r1, r1, #25
 8005190:	bf48      	it	mi
 8005192:	b2ad      	uxthmi	r5, r5
 8005194:	2f6f      	cmp	r7, #111	@ 0x6f
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	bf14      	ite	ne
 800519a:	230a      	movne	r3, #10
 800519c:	2308      	moveq	r3, #8
 800519e:	4851      	ldr	r0, [pc, #324]	@ (80052e4 <_printf_i+0x238>)
 80051a0:	2100      	movs	r1, #0
 80051a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051a6:	6866      	ldr	r6, [r4, #4]
 80051a8:	2e00      	cmp	r6, #0
 80051aa:	bfa8      	it	ge
 80051ac:	6821      	ldrge	r1, [r4, #0]
 80051ae:	60a6      	str	r6, [r4, #8]
 80051b0:	bfa4      	itt	ge
 80051b2:	f021 0104 	bicge.w	r1, r1, #4
 80051b6:	6021      	strge	r1, [r4, #0]
 80051b8:	b90d      	cbnz	r5, 80051be <_printf_i+0x112>
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d04b      	beq.n	8005256 <_printf_i+0x1aa>
 80051be:	4616      	mov	r6, r2
 80051c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80051c4:	fb03 5711 	mls	r7, r3, r1, r5
 80051c8:	5dc7      	ldrb	r7, [r0, r7]
 80051ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051ce:	462f      	mov	r7, r5
 80051d0:	42bb      	cmp	r3, r7
 80051d2:	460d      	mov	r5, r1
 80051d4:	d9f4      	bls.n	80051c0 <_printf_i+0x114>
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d10b      	bne.n	80051f2 <_printf_i+0x146>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	07df      	lsls	r7, r3, #31
 80051de:	d508      	bpl.n	80051f2 <_printf_i+0x146>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	6861      	ldr	r1, [r4, #4]
 80051e4:	4299      	cmp	r1, r3
 80051e6:	bfde      	ittt	le
 80051e8:	2330      	movle	r3, #48	@ 0x30
 80051ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051f2:	1b92      	subs	r2, r2, r6
 80051f4:	6122      	str	r2, [r4, #16]
 80051f6:	464b      	mov	r3, r9
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f8cd a000 	str.w	sl, [sp]
 8005200:	aa03      	add	r2, sp, #12
 8005202:	f7ff fee1 	bl	8004fc8 <_printf_common>
 8005206:	3001      	adds	r0, #1
 8005208:	d14a      	bne.n	80052a0 <_printf_i+0x1f4>
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	b004      	add	sp, #16
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	f043 0320 	orr.w	r3, r3, #32
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	2778      	movs	r7, #120	@ 0x78
 800521e:	4832      	ldr	r0, [pc, #200]	@ (80052e8 <_printf_i+0x23c>)
 8005220:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	6831      	ldr	r1, [r6, #0]
 8005228:	061f      	lsls	r7, r3, #24
 800522a:	f851 5b04 	ldr.w	r5, [r1], #4
 800522e:	d402      	bmi.n	8005236 <_printf_i+0x18a>
 8005230:	065f      	lsls	r7, r3, #25
 8005232:	bf48      	it	mi
 8005234:	b2ad      	uxthmi	r5, r5
 8005236:	6031      	str	r1, [r6, #0]
 8005238:	07d9      	lsls	r1, r3, #31
 800523a:	bf44      	itt	mi
 800523c:	f043 0320 	orrmi.w	r3, r3, #32
 8005240:	6023      	strmi	r3, [r4, #0]
 8005242:	b11d      	cbz	r5, 800524c <_printf_i+0x1a0>
 8005244:	2310      	movs	r3, #16
 8005246:	e7ab      	b.n	80051a0 <_printf_i+0xf4>
 8005248:	4826      	ldr	r0, [pc, #152]	@ (80052e4 <_printf_i+0x238>)
 800524a:	e7e9      	b.n	8005220 <_printf_i+0x174>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	f023 0320 	bic.w	r3, r3, #32
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	e7f6      	b.n	8005244 <_printf_i+0x198>
 8005256:	4616      	mov	r6, r2
 8005258:	e7bd      	b.n	80051d6 <_printf_i+0x12a>
 800525a:	6833      	ldr	r3, [r6, #0]
 800525c:	6825      	ldr	r5, [r4, #0]
 800525e:	1d18      	adds	r0, r3, #4
 8005260:	6961      	ldr	r1, [r4, #20]
 8005262:	6030      	str	r0, [r6, #0]
 8005264:	062e      	lsls	r6, r5, #24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	d501      	bpl.n	800526e <_printf_i+0x1c2>
 800526a:	6019      	str	r1, [r3, #0]
 800526c:	e002      	b.n	8005274 <_printf_i+0x1c8>
 800526e:	0668      	lsls	r0, r5, #25
 8005270:	d5fb      	bpl.n	800526a <_printf_i+0x1be>
 8005272:	8019      	strh	r1, [r3, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	4616      	mov	r6, r2
 8005278:	6123      	str	r3, [r4, #16]
 800527a:	e7bc      	b.n	80051f6 <_printf_i+0x14a>
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	2100      	movs	r1, #0
 8005280:	1d1a      	adds	r2, r3, #4
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	681e      	ldr	r6, [r3, #0]
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	4630      	mov	r0, r6
 800528a:	f000 fc10 	bl	8005aae <memchr>
 800528e:	b108      	cbz	r0, 8005294 <_printf_i+0x1e8>
 8005290:	1b80      	subs	r0, r0, r6
 8005292:	6060      	str	r0, [r4, #4]
 8005294:	6863      	ldr	r3, [r4, #4]
 8005296:	6123      	str	r3, [r4, #16]
 8005298:	2300      	movs	r3, #0
 800529a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800529e:	e7aa      	b.n	80051f6 <_printf_i+0x14a>
 80052a0:	4632      	mov	r2, r6
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	47d0      	blx	sl
 80052aa:	3001      	adds	r0, #1
 80052ac:	d0ad      	beq.n	800520a <_printf_i+0x15e>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	079b      	lsls	r3, r3, #30
 80052b2:	d413      	bmi.n	80052dc <_printf_i+0x230>
 80052b4:	68e0      	ldr	r0, [r4, #12]
 80052b6:	9b03      	ldr	r3, [sp, #12]
 80052b8:	4298      	cmp	r0, r3
 80052ba:	bfb8      	it	lt
 80052bc:	4618      	movlt	r0, r3
 80052be:	e7a6      	b.n	800520e <_printf_i+0x162>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4632      	mov	r2, r6
 80052c4:	4649      	mov	r1, r9
 80052c6:	4640      	mov	r0, r8
 80052c8:	47d0      	blx	sl
 80052ca:	3001      	adds	r0, #1
 80052cc:	d09d      	beq.n	800520a <_printf_i+0x15e>
 80052ce:	3501      	adds	r5, #1
 80052d0:	68e3      	ldr	r3, [r4, #12]
 80052d2:	9903      	ldr	r1, [sp, #12]
 80052d4:	1a5b      	subs	r3, r3, r1
 80052d6:	42ab      	cmp	r3, r5
 80052d8:	dcf2      	bgt.n	80052c0 <_printf_i+0x214>
 80052da:	e7eb      	b.n	80052b4 <_printf_i+0x208>
 80052dc:	2500      	movs	r5, #0
 80052de:	f104 0619 	add.w	r6, r4, #25
 80052e2:	e7f5      	b.n	80052d0 <_printf_i+0x224>
 80052e4:	08009ba4 	.word	0x08009ba4
 80052e8:	08009bb5 	.word	0x08009bb5

080052ec <_scanf_float>:
 80052ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	b087      	sub	sp, #28
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	688b      	ldr	r3, [r1, #8]
 80052f6:	4617      	mov	r7, r2
 80052f8:	1e5a      	subs	r2, r3, #1
 80052fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80052fe:	bf82      	ittt	hi
 8005300:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005304:	eb03 0b05 	addhi.w	fp, r3, r5
 8005308:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800530c:	460a      	mov	r2, r1
 800530e:	f04f 0500 	mov.w	r5, #0
 8005312:	bf88      	it	hi
 8005314:	608b      	strhi	r3, [r1, #8]
 8005316:	680b      	ldr	r3, [r1, #0]
 8005318:	4680      	mov	r8, r0
 800531a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800531e:	f842 3b1c 	str.w	r3, [r2], #28
 8005322:	460c      	mov	r4, r1
 8005324:	bf98      	it	ls
 8005326:	f04f 0b00 	movls.w	fp, #0
 800532a:	4616      	mov	r6, r2
 800532c:	46aa      	mov	sl, r5
 800532e:	46a9      	mov	r9, r5
 8005330:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005334:	9201      	str	r2, [sp, #4]
 8005336:	9502      	str	r5, [sp, #8]
 8005338:	68a2      	ldr	r2, [r4, #8]
 800533a:	b152      	cbz	r2, 8005352 <_scanf_float+0x66>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b4e      	cmp	r3, #78	@ 0x4e
 8005342:	d865      	bhi.n	8005410 <_scanf_float+0x124>
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d83d      	bhi.n	80053c4 <_scanf_float+0xd8>
 8005348:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800534c:	b2c8      	uxtb	r0, r1
 800534e:	280e      	cmp	r0, #14
 8005350:	d93b      	bls.n	80053ca <_scanf_float+0xde>
 8005352:	f1b9 0f00 	cmp.w	r9, #0
 8005356:	d003      	beq.n	8005360 <_scanf_float+0x74>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005364:	f1ba 0f01 	cmp.w	sl, #1
 8005368:	f200 8118 	bhi.w	800559c <_scanf_float+0x2b0>
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	429e      	cmp	r6, r3
 8005370:	f200 8109 	bhi.w	8005586 <_scanf_float+0x29a>
 8005374:	2001      	movs	r0, #1
 8005376:	b007      	add	sp, #28
 8005378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005380:	2a0d      	cmp	r2, #13
 8005382:	d8e6      	bhi.n	8005352 <_scanf_float+0x66>
 8005384:	a101      	add	r1, pc, #4	@ (adr r1, 800538c <_scanf_float+0xa0>)
 8005386:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800538a:	bf00      	nop
 800538c:	080054d3 	.word	0x080054d3
 8005390:	08005353 	.word	0x08005353
 8005394:	08005353 	.word	0x08005353
 8005398:	08005353 	.word	0x08005353
 800539c:	08005533 	.word	0x08005533
 80053a0:	0800550b 	.word	0x0800550b
 80053a4:	08005353 	.word	0x08005353
 80053a8:	08005353 	.word	0x08005353
 80053ac:	080054e1 	.word	0x080054e1
 80053b0:	08005353 	.word	0x08005353
 80053b4:	08005353 	.word	0x08005353
 80053b8:	08005353 	.word	0x08005353
 80053bc:	08005353 	.word	0x08005353
 80053c0:	08005499 	.word	0x08005499
 80053c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80053c8:	e7da      	b.n	8005380 <_scanf_float+0x94>
 80053ca:	290e      	cmp	r1, #14
 80053cc:	d8c1      	bhi.n	8005352 <_scanf_float+0x66>
 80053ce:	a001      	add	r0, pc, #4	@ (adr r0, 80053d4 <_scanf_float+0xe8>)
 80053d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80053d4:	08005489 	.word	0x08005489
 80053d8:	08005353 	.word	0x08005353
 80053dc:	08005489 	.word	0x08005489
 80053e0:	0800551f 	.word	0x0800551f
 80053e4:	08005353 	.word	0x08005353
 80053e8:	08005431 	.word	0x08005431
 80053ec:	0800546f 	.word	0x0800546f
 80053f0:	0800546f 	.word	0x0800546f
 80053f4:	0800546f 	.word	0x0800546f
 80053f8:	0800546f 	.word	0x0800546f
 80053fc:	0800546f 	.word	0x0800546f
 8005400:	0800546f 	.word	0x0800546f
 8005404:	0800546f 	.word	0x0800546f
 8005408:	0800546f 	.word	0x0800546f
 800540c:	0800546f 	.word	0x0800546f
 8005410:	2b6e      	cmp	r3, #110	@ 0x6e
 8005412:	d809      	bhi.n	8005428 <_scanf_float+0x13c>
 8005414:	2b60      	cmp	r3, #96	@ 0x60
 8005416:	d8b1      	bhi.n	800537c <_scanf_float+0x90>
 8005418:	2b54      	cmp	r3, #84	@ 0x54
 800541a:	d07b      	beq.n	8005514 <_scanf_float+0x228>
 800541c:	2b59      	cmp	r3, #89	@ 0x59
 800541e:	d198      	bne.n	8005352 <_scanf_float+0x66>
 8005420:	2d07      	cmp	r5, #7
 8005422:	d196      	bne.n	8005352 <_scanf_float+0x66>
 8005424:	2508      	movs	r5, #8
 8005426:	e02c      	b.n	8005482 <_scanf_float+0x196>
 8005428:	2b74      	cmp	r3, #116	@ 0x74
 800542a:	d073      	beq.n	8005514 <_scanf_float+0x228>
 800542c:	2b79      	cmp	r3, #121	@ 0x79
 800542e:	e7f6      	b.n	800541e <_scanf_float+0x132>
 8005430:	6821      	ldr	r1, [r4, #0]
 8005432:	05c8      	lsls	r0, r1, #23
 8005434:	d51b      	bpl.n	800546e <_scanf_float+0x182>
 8005436:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800543a:	6021      	str	r1, [r4, #0]
 800543c:	f109 0901 	add.w	r9, r9, #1
 8005440:	f1bb 0f00 	cmp.w	fp, #0
 8005444:	d003      	beq.n	800544e <_scanf_float+0x162>
 8005446:	3201      	adds	r2, #1
 8005448:	f10b 3bff 	add.w	fp, fp, #4294967295
 800544c:	60a2      	str	r2, [r4, #8]
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	3b01      	subs	r3, #1
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	3301      	adds	r3, #1
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3b01      	subs	r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f340 8087 	ble.w	8005574 <_scanf_float+0x288>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	e764      	b.n	8005338 <_scanf_float+0x4c>
 800546e:	eb1a 0105 	adds.w	r1, sl, r5
 8005472:	f47f af6e 	bne.w	8005352 <_scanf_float+0x66>
 8005476:	460d      	mov	r5, r1
 8005478:	468a      	mov	sl, r1
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005480:	6022      	str	r2, [r4, #0]
 8005482:	f806 3b01 	strb.w	r3, [r6], #1
 8005486:	e7e2      	b.n	800544e <_scanf_float+0x162>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	0610      	lsls	r0, r2, #24
 800548c:	f57f af61 	bpl.w	8005352 <_scanf_float+0x66>
 8005490:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005494:	6022      	str	r2, [r4, #0]
 8005496:	e7f4      	b.n	8005482 <_scanf_float+0x196>
 8005498:	f1ba 0f00 	cmp.w	sl, #0
 800549c:	d10e      	bne.n	80054bc <_scanf_float+0x1d0>
 800549e:	f1b9 0f00 	cmp.w	r9, #0
 80054a2:	d10e      	bne.n	80054c2 <_scanf_float+0x1d6>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80054aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80054ae:	d108      	bne.n	80054c2 <_scanf_float+0x1d6>
 80054b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054b4:	f04f 0a01 	mov.w	sl, #1
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	e7e2      	b.n	8005482 <_scanf_float+0x196>
 80054bc:	f1ba 0f02 	cmp.w	sl, #2
 80054c0:	d055      	beq.n	800556e <_scanf_float+0x282>
 80054c2:	2d01      	cmp	r5, #1
 80054c4:	d002      	beq.n	80054cc <_scanf_float+0x1e0>
 80054c6:	2d04      	cmp	r5, #4
 80054c8:	f47f af43 	bne.w	8005352 <_scanf_float+0x66>
 80054cc:	3501      	adds	r5, #1
 80054ce:	b2ed      	uxtb	r5, r5
 80054d0:	e7d7      	b.n	8005482 <_scanf_float+0x196>
 80054d2:	f1ba 0f01 	cmp.w	sl, #1
 80054d6:	f47f af3c 	bne.w	8005352 <_scanf_float+0x66>
 80054da:	f04f 0a02 	mov.w	sl, #2
 80054de:	e7d0      	b.n	8005482 <_scanf_float+0x196>
 80054e0:	b97d      	cbnz	r5, 8005502 <_scanf_float+0x216>
 80054e2:	f1b9 0f00 	cmp.w	r9, #0
 80054e6:	f47f af37 	bne.w	8005358 <_scanf_float+0x6c>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80054f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80054f4:	f040 8103 	bne.w	80056fe <_scanf_float+0x412>
 80054f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054fc:	2501      	movs	r5, #1
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	e7bf      	b.n	8005482 <_scanf_float+0x196>
 8005502:	2d03      	cmp	r5, #3
 8005504:	d0e2      	beq.n	80054cc <_scanf_float+0x1e0>
 8005506:	2d05      	cmp	r5, #5
 8005508:	e7de      	b.n	80054c8 <_scanf_float+0x1dc>
 800550a:	2d02      	cmp	r5, #2
 800550c:	f47f af21 	bne.w	8005352 <_scanf_float+0x66>
 8005510:	2503      	movs	r5, #3
 8005512:	e7b6      	b.n	8005482 <_scanf_float+0x196>
 8005514:	2d06      	cmp	r5, #6
 8005516:	f47f af1c 	bne.w	8005352 <_scanf_float+0x66>
 800551a:	2507      	movs	r5, #7
 800551c:	e7b1      	b.n	8005482 <_scanf_float+0x196>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	0591      	lsls	r1, r2, #22
 8005522:	f57f af16 	bpl.w	8005352 <_scanf_float+0x66>
 8005526:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800552a:	6022      	str	r2, [r4, #0]
 800552c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005530:	e7a7      	b.n	8005482 <_scanf_float+0x196>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005538:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800553c:	d006      	beq.n	800554c <_scanf_float+0x260>
 800553e:	0550      	lsls	r0, r2, #21
 8005540:	f57f af07 	bpl.w	8005352 <_scanf_float+0x66>
 8005544:	f1b9 0f00 	cmp.w	r9, #0
 8005548:	f000 80d9 	beq.w	80056fe <_scanf_float+0x412>
 800554c:	0591      	lsls	r1, r2, #22
 800554e:	bf58      	it	pl
 8005550:	9902      	ldrpl	r1, [sp, #8]
 8005552:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005556:	bf58      	it	pl
 8005558:	eba9 0101 	subpl.w	r1, r9, r1
 800555c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	bf58      	it	pl
 8005566:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	e789      	b.n	8005482 <_scanf_float+0x196>
 800556e:	f04f 0a03 	mov.w	sl, #3
 8005572:	e786      	b.n	8005482 <_scanf_float+0x196>
 8005574:	4639      	mov	r1, r7
 8005576:	4640      	mov	r0, r8
 8005578:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800557c:	4798      	blx	r3
 800557e:	2800      	cmp	r0, #0
 8005580:	f43f aeda 	beq.w	8005338 <_scanf_float+0x4c>
 8005584:	e6e5      	b.n	8005352 <_scanf_float+0x66>
 8005586:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800558a:	463a      	mov	r2, r7
 800558c:	4640      	mov	r0, r8
 800558e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005592:	4798      	blx	r3
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	3b01      	subs	r3, #1
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	e6e7      	b.n	800536c <_scanf_float+0x80>
 800559c:	1e6b      	subs	r3, r5, #1
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d824      	bhi.n	80055ec <_scanf_float+0x300>
 80055a2:	2d02      	cmp	r5, #2
 80055a4:	d836      	bhi.n	8005614 <_scanf_float+0x328>
 80055a6:	9b01      	ldr	r3, [sp, #4]
 80055a8:	429e      	cmp	r6, r3
 80055aa:	f67f aee3 	bls.w	8005374 <_scanf_float+0x88>
 80055ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055b2:	463a      	mov	r2, r7
 80055b4:	4640      	mov	r0, r8
 80055b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055ba:	4798      	blx	r3
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	3b01      	subs	r3, #1
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	e7f0      	b.n	80055a6 <_scanf_float+0x2ba>
 80055c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055c8:	463a      	mov	r2, r7
 80055ca:	4640      	mov	r0, r8
 80055cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80055d0:	4798      	blx	r3
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	6123      	str	r3, [r4, #16]
 80055d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055dc:	fa5f fa8a 	uxtb.w	sl, sl
 80055e0:	f1ba 0f02 	cmp.w	sl, #2
 80055e4:	d1ee      	bne.n	80055c4 <_scanf_float+0x2d8>
 80055e6:	3d03      	subs	r5, #3
 80055e8:	b2ed      	uxtb	r5, r5
 80055ea:	1b76      	subs	r6, r6, r5
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	05da      	lsls	r2, r3, #23
 80055f0:	d530      	bpl.n	8005654 <_scanf_float+0x368>
 80055f2:	055b      	lsls	r3, r3, #21
 80055f4:	d511      	bpl.n	800561a <_scanf_float+0x32e>
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	429e      	cmp	r6, r3
 80055fa:	f67f aebb 	bls.w	8005374 <_scanf_float+0x88>
 80055fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005602:	463a      	mov	r2, r7
 8005604:	4640      	mov	r0, r8
 8005606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800560a:	4798      	blx	r3
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	3b01      	subs	r3, #1
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	e7f0      	b.n	80055f6 <_scanf_float+0x30a>
 8005614:	46aa      	mov	sl, r5
 8005616:	46b3      	mov	fp, r6
 8005618:	e7de      	b.n	80055d8 <_scanf_float+0x2ec>
 800561a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	2965      	cmp	r1, #101	@ 0x65
 8005622:	f103 33ff 	add.w	r3, r3, #4294967295
 8005626:	f106 35ff 	add.w	r5, r6, #4294967295
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	d00c      	beq.n	8005648 <_scanf_float+0x35c>
 800562e:	2945      	cmp	r1, #69	@ 0x45
 8005630:	d00a      	beq.n	8005648 <_scanf_float+0x35c>
 8005632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005636:	463a      	mov	r2, r7
 8005638:	4640      	mov	r0, r8
 800563a:	4798      	blx	r3
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005642:	3b01      	subs	r3, #1
 8005644:	1eb5      	subs	r5, r6, #2
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	463a      	mov	r2, r7
 800564a:	4640      	mov	r0, r8
 800564c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005650:	4798      	blx	r3
 8005652:	462e      	mov	r6, r5
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	f012 0210 	ands.w	r2, r2, #16
 800565a:	d001      	beq.n	8005660 <_scanf_float+0x374>
 800565c:	2000      	movs	r0, #0
 800565e:	e68a      	b.n	8005376 <_scanf_float+0x8a>
 8005660:	7032      	strb	r2, [r6, #0]
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566c:	d11c      	bne.n	80056a8 <_scanf_float+0x3bc>
 800566e:	9b02      	ldr	r3, [sp, #8]
 8005670:	454b      	cmp	r3, r9
 8005672:	eba3 0209 	sub.w	r2, r3, r9
 8005676:	d123      	bne.n	80056c0 <_scanf_float+0x3d4>
 8005678:	2200      	movs	r2, #0
 800567a:	4640      	mov	r0, r8
 800567c:	9901      	ldr	r1, [sp, #4]
 800567e:	f002 fc1b 	bl	8007eb8 <_strtod_r>
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	6825      	ldr	r5, [r4, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f015 0f02 	tst.w	r5, #2
 800568c:	4606      	mov	r6, r0
 800568e:	460f      	mov	r7, r1
 8005690:	f103 0204 	add.w	r2, r3, #4
 8005694:	d01f      	beq.n	80056d6 <_scanf_float+0x3ea>
 8005696:	9903      	ldr	r1, [sp, #12]
 8005698:	600a      	str	r2, [r1, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	e9c3 6700 	strd	r6, r7, [r3]
 80056a0:	68e3      	ldr	r3, [r4, #12]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60e3      	str	r3, [r4, #12]
 80056a6:	e7d9      	b.n	800565c <_scanf_float+0x370>
 80056a8:	9b04      	ldr	r3, [sp, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0e4      	beq.n	8005678 <_scanf_float+0x38c>
 80056ae:	9905      	ldr	r1, [sp, #20]
 80056b0:	230a      	movs	r3, #10
 80056b2:	4640      	mov	r0, r8
 80056b4:	3101      	adds	r1, #1
 80056b6:	f002 fc7f 	bl	8007fb8 <_strtol_r>
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	9e05      	ldr	r6, [sp, #20]
 80056be:	1ac2      	subs	r2, r0, r3
 80056c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80056c4:	429e      	cmp	r6, r3
 80056c6:	bf28      	it	cs
 80056c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80056cc:	4630      	mov	r0, r6
 80056ce:	490d      	ldr	r1, [pc, #52]	@ (8005704 <_scanf_float+0x418>)
 80056d0:	f000 f8de 	bl	8005890 <siprintf>
 80056d4:	e7d0      	b.n	8005678 <_scanf_float+0x38c>
 80056d6:	076d      	lsls	r5, r5, #29
 80056d8:	d4dd      	bmi.n	8005696 <_scanf_float+0x3aa>
 80056da:	9d03      	ldr	r5, [sp, #12]
 80056dc:	602a      	str	r2, [r5, #0]
 80056de:	681d      	ldr	r5, [r3, #0]
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	f7fb f9fe 	bl	8000ae4 <__aeabi_dcmpun>
 80056e8:	b120      	cbz	r0, 80056f4 <_scanf_float+0x408>
 80056ea:	4807      	ldr	r0, [pc, #28]	@ (8005708 <_scanf_float+0x41c>)
 80056ec:	f000 f9ee 	bl	8005acc <nanf>
 80056f0:	6028      	str	r0, [r5, #0]
 80056f2:	e7d5      	b.n	80056a0 <_scanf_float+0x3b4>
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fb fa52 	bl	8000ba0 <__aeabi_d2f>
 80056fc:	e7f8      	b.n	80056f0 <_scanf_float+0x404>
 80056fe:	f04f 0900 	mov.w	r9, #0
 8005702:	e62d      	b.n	8005360 <_scanf_float+0x74>
 8005704:	08009bc6 	.word	0x08009bc6
 8005708:	08009f78 	.word	0x08009f78

0800570c <std>:
 800570c:	2300      	movs	r3, #0
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
 8005712:	e9c0 3300 	strd	r3, r3, [r0]
 8005716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800571a:	6083      	str	r3, [r0, #8]
 800571c:	8181      	strh	r1, [r0, #12]
 800571e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005720:	81c2      	strh	r2, [r0, #14]
 8005722:	6183      	str	r3, [r0, #24]
 8005724:	4619      	mov	r1, r3
 8005726:	2208      	movs	r2, #8
 8005728:	305c      	adds	r0, #92	@ 0x5c
 800572a:	f000 f940 	bl	80059ae <memset>
 800572e:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <std+0x58>)
 8005730:	6224      	str	r4, [r4, #32]
 8005732:	6263      	str	r3, [r4, #36]	@ 0x24
 8005734:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <std+0x5c>)
 8005736:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <std+0x60>)
 800573a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800573c:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <std+0x64>)
 800573e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <std+0x68>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d006      	beq.n	8005754 <std+0x48>
 8005746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800574a:	4294      	cmp	r4, r2
 800574c:	d002      	beq.n	8005754 <std+0x48>
 800574e:	33d0      	adds	r3, #208	@ 0xd0
 8005750:	429c      	cmp	r4, r3
 8005752:	d105      	bne.n	8005760 <std+0x54>
 8005754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	f000 b9a4 	b.w	8005aa8 <__retarget_lock_init_recursive>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	bf00      	nop
 8005764:	08005925 	.word	0x08005925
 8005768:	0800594b 	.word	0x0800594b
 800576c:	08005983 	.word	0x08005983
 8005770:	080059a7 	.word	0x080059a7
 8005774:	20000324 	.word	0x20000324

08005778 <stdio_exit_handler>:
 8005778:	4a02      	ldr	r2, [pc, #8]	@ (8005784 <stdio_exit_handler+0xc>)
 800577a:	4903      	ldr	r1, [pc, #12]	@ (8005788 <stdio_exit_handler+0x10>)
 800577c:	4803      	ldr	r0, [pc, #12]	@ (800578c <stdio_exit_handler+0x14>)
 800577e:	f000 b869 	b.w	8005854 <_fwalk_sglue>
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
 8005788:	08008999 	.word	0x08008999
 800578c:	2000001c 	.word	0x2000001c

08005790 <cleanup_stdio>:
 8005790:	6841      	ldr	r1, [r0, #4]
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <cleanup_stdio+0x34>)
 8005794:	b510      	push	{r4, lr}
 8005796:	4299      	cmp	r1, r3
 8005798:	4604      	mov	r4, r0
 800579a:	d001      	beq.n	80057a0 <cleanup_stdio+0x10>
 800579c:	f003 f8fc 	bl	8008998 <_fflush_r>
 80057a0:	68a1      	ldr	r1, [r4, #8]
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <cleanup_stdio+0x38>)
 80057a4:	4299      	cmp	r1, r3
 80057a6:	d002      	beq.n	80057ae <cleanup_stdio+0x1e>
 80057a8:	4620      	mov	r0, r4
 80057aa:	f003 f8f5 	bl	8008998 <_fflush_r>
 80057ae:	68e1      	ldr	r1, [r4, #12]
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <cleanup_stdio+0x3c>)
 80057b2:	4299      	cmp	r1, r3
 80057b4:	d004      	beq.n	80057c0 <cleanup_stdio+0x30>
 80057b6:	4620      	mov	r0, r4
 80057b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057bc:	f003 b8ec 	b.w	8008998 <_fflush_r>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop
 80057c4:	20000324 	.word	0x20000324
 80057c8:	2000038c 	.word	0x2000038c
 80057cc:	200003f4 	.word	0x200003f4

080057d0 <global_stdio_init.part.0>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <global_stdio_init.part.0+0x30>)
 80057d4:	4c0b      	ldr	r4, [pc, #44]	@ (8005804 <global_stdio_init.part.0+0x34>)
 80057d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005808 <global_stdio_init.part.0+0x38>)
 80057d8:	4620      	mov	r0, r4
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	2104      	movs	r1, #4
 80057de:	2200      	movs	r2, #0
 80057e0:	f7ff ff94 	bl	800570c <std>
 80057e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057e8:	2201      	movs	r2, #1
 80057ea:	2109      	movs	r1, #9
 80057ec:	f7ff ff8e 	bl	800570c <std>
 80057f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057f4:	2202      	movs	r2, #2
 80057f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057fa:	2112      	movs	r1, #18
 80057fc:	f7ff bf86 	b.w	800570c <std>
 8005800:	2000045c 	.word	0x2000045c
 8005804:	20000324 	.word	0x20000324
 8005808:	08005779 	.word	0x08005779

0800580c <__sfp_lock_acquire>:
 800580c:	4801      	ldr	r0, [pc, #4]	@ (8005814 <__sfp_lock_acquire+0x8>)
 800580e:	f000 b94c 	b.w	8005aaa <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	20000465 	.word	0x20000465

08005818 <__sfp_lock_release>:
 8005818:	4801      	ldr	r0, [pc, #4]	@ (8005820 <__sfp_lock_release+0x8>)
 800581a:	f000 b947 	b.w	8005aac <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	20000465 	.word	0x20000465

08005824 <__sinit>:
 8005824:	b510      	push	{r4, lr}
 8005826:	4604      	mov	r4, r0
 8005828:	f7ff fff0 	bl	800580c <__sfp_lock_acquire>
 800582c:	6a23      	ldr	r3, [r4, #32]
 800582e:	b11b      	cbz	r3, 8005838 <__sinit+0x14>
 8005830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005834:	f7ff bff0 	b.w	8005818 <__sfp_lock_release>
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <__sinit+0x28>)
 800583a:	6223      	str	r3, [r4, #32]
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <__sinit+0x2c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f5      	bne.n	8005830 <__sinit+0xc>
 8005844:	f7ff ffc4 	bl	80057d0 <global_stdio_init.part.0>
 8005848:	e7f2      	b.n	8005830 <__sinit+0xc>
 800584a:	bf00      	nop
 800584c:	08005791 	.word	0x08005791
 8005850:	2000045c 	.word	0x2000045c

08005854 <_fwalk_sglue>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	4607      	mov	r7, r0
 800585a:	4688      	mov	r8, r1
 800585c:	4614      	mov	r4, r2
 800585e:	2600      	movs	r6, #0
 8005860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005864:	f1b9 0901 	subs.w	r9, r9, #1
 8005868:	d505      	bpl.n	8005876 <_fwalk_sglue+0x22>
 800586a:	6824      	ldr	r4, [r4, #0]
 800586c:	2c00      	cmp	r4, #0
 800586e:	d1f7      	bne.n	8005860 <_fwalk_sglue+0xc>
 8005870:	4630      	mov	r0, r6
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d907      	bls.n	800588c <_fwalk_sglue+0x38>
 800587c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005880:	3301      	adds	r3, #1
 8005882:	d003      	beq.n	800588c <_fwalk_sglue+0x38>
 8005884:	4629      	mov	r1, r5
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	4306      	orrs	r6, r0
 800588c:	3568      	adds	r5, #104	@ 0x68
 800588e:	e7e9      	b.n	8005864 <_fwalk_sglue+0x10>

08005890 <siprintf>:
 8005890:	b40e      	push	{r1, r2, r3}
 8005892:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005896:	b500      	push	{lr}
 8005898:	b09c      	sub	sp, #112	@ 0x70
 800589a:	ab1d      	add	r3, sp, #116	@ 0x74
 800589c:	9002      	str	r0, [sp, #8]
 800589e:	9006      	str	r0, [sp, #24]
 80058a0:	9107      	str	r1, [sp, #28]
 80058a2:	9104      	str	r1, [sp, #16]
 80058a4:	4808      	ldr	r0, [pc, #32]	@ (80058c8 <siprintf+0x38>)
 80058a6:	4909      	ldr	r1, [pc, #36]	@ (80058cc <siprintf+0x3c>)
 80058a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ac:	9105      	str	r1, [sp, #20]
 80058ae:	6800      	ldr	r0, [r0, #0]
 80058b0:	a902      	add	r1, sp, #8
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f002 fbde 	bl	8008074 <_svfiprintf_r>
 80058b8:	2200      	movs	r2, #0
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	b01c      	add	sp, #112	@ 0x70
 80058c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c4:	b003      	add	sp, #12
 80058c6:	4770      	bx	lr
 80058c8:	20000018 	.word	0x20000018
 80058cc:	ffff0208 	.word	0xffff0208

080058d0 <siscanf>:
 80058d0:	b40e      	push	{r1, r2, r3}
 80058d2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80058d6:	b530      	push	{r4, r5, lr}
 80058d8:	b09c      	sub	sp, #112	@ 0x70
 80058da:	ac1f      	add	r4, sp, #124	@ 0x7c
 80058dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80058e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	9006      	str	r0, [sp, #24]
 80058e8:	f7fa fc9e 	bl	8000228 <strlen>
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <siscanf+0x4c>)
 80058ee:	9003      	str	r0, [sp, #12]
 80058f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f2:	2300      	movs	r3, #0
 80058f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058f6:	9314      	str	r3, [sp, #80]	@ 0x50
 80058f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058fc:	9007      	str	r0, [sp, #28]
 80058fe:	4808      	ldr	r0, [pc, #32]	@ (8005920 <siscanf+0x50>)
 8005900:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005904:	462a      	mov	r2, r5
 8005906:	4623      	mov	r3, r4
 8005908:	a902      	add	r1, sp, #8
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	9401      	str	r4, [sp, #4]
 800590e:	f002 fd05 	bl	800831c <__ssvfiscanf_r>
 8005912:	b01c      	add	sp, #112	@ 0x70
 8005914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005918:	b003      	add	sp, #12
 800591a:	4770      	bx	lr
 800591c:	08005947 	.word	0x08005947
 8005920:	20000018 	.word	0x20000018

08005924 <__sread>:
 8005924:	b510      	push	{r4, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	f000 f86e 	bl	8005a0c <_read_r>
 8005930:	2800      	cmp	r0, #0
 8005932:	bfab      	itete	ge
 8005934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005936:	89a3      	ldrhlt	r3, [r4, #12]
 8005938:	181b      	addge	r3, r3, r0
 800593a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800593e:	bfac      	ite	ge
 8005940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005942:	81a3      	strhlt	r3, [r4, #12]
 8005944:	bd10      	pop	{r4, pc}

08005946 <__seofread>:
 8005946:	2000      	movs	r0, #0
 8005948:	4770      	bx	lr

0800594a <__swrite>:
 800594a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594e:	461f      	mov	r7, r3
 8005950:	898b      	ldrh	r3, [r1, #12]
 8005952:	4605      	mov	r5, r0
 8005954:	05db      	lsls	r3, r3, #23
 8005956:	460c      	mov	r4, r1
 8005958:	4616      	mov	r6, r2
 800595a:	d505      	bpl.n	8005968 <__swrite+0x1e>
 800595c:	2302      	movs	r3, #2
 800595e:	2200      	movs	r2, #0
 8005960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005964:	f000 f840 	bl	80059e8 <_lseek_r>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	4632      	mov	r2, r6
 800596c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	4628      	mov	r0, r5
 8005974:	463b      	mov	r3, r7
 8005976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800597a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597e:	f000 b857 	b.w	8005a30 <_write_r>

08005982 <__sseek>:
 8005982:	b510      	push	{r4, lr}
 8005984:	460c      	mov	r4, r1
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 f82d 	bl	80059e8 <_lseek_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	bf15      	itete	ne
 8005994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800599a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800599e:	81a3      	strheq	r3, [r4, #12]
 80059a0:	bf18      	it	ne
 80059a2:	81a3      	strhne	r3, [r4, #12]
 80059a4:	bd10      	pop	{r4, pc}

080059a6 <__sclose>:
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 b80d 	b.w	80059c8 <_close_r>

080059ae <memset>:
 80059ae:	4603      	mov	r3, r0
 80059b0:	4402      	add	r2, r0
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d100      	bne.n	80059b8 <memset+0xa>
 80059b6:	4770      	bx	lr
 80059b8:	f803 1b01 	strb.w	r1, [r3], #1
 80059bc:	e7f9      	b.n	80059b2 <memset+0x4>
	...

080059c0 <_localeconv_r>:
 80059c0:	4800      	ldr	r0, [pc, #0]	@ (80059c4 <_localeconv_r+0x4>)
 80059c2:	4770      	bx	lr
 80059c4:	20000158 	.word	0x20000158

080059c8 <_close_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	2300      	movs	r3, #0
 80059cc:	4d05      	ldr	r5, [pc, #20]	@ (80059e4 <_close_r+0x1c>)
 80059ce:	4604      	mov	r4, r0
 80059d0:	4608      	mov	r0, r1
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	f7fb ffa1 	bl	800191a <_close>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_close_r+0x1a>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_close_r+0x1a>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000460 	.word	0x20000460

080059e8 <_lseek_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	2200      	movs	r2, #0
 80059f2:	4d05      	ldr	r5, [pc, #20]	@ (8005a08 <_lseek_r+0x20>)
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fb ffb3 	bl	8001962 <_lseek>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_lseek_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_lseek_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000460 	.word	0x20000460

08005a0c <_read_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4608      	mov	r0, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	2200      	movs	r2, #0
 8005a16:	4d05      	ldr	r5, [pc, #20]	@ (8005a2c <_read_r+0x20>)
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fb ff44 	bl	80018a8 <_read>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_read_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_read_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000460 	.word	0x20000460

08005a30 <_write_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4d05      	ldr	r5, [pc, #20]	@ (8005a50 <_write_r+0x20>)
 8005a3c:	602a      	str	r2, [r5, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f7fb ff4f 	bl	80018e2 <_write>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_write_r+0x1e>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_write_r+0x1e>
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	20000460 	.word	0x20000460

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	@ (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000018 	.word	0x20000018

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	2600      	movs	r6, #0
 8005a64:	4d0c      	ldr	r5, [pc, #48]	@ (8005a98 <__libc_init_array+0x38>)
 8005a66:	4c0d      	ldr	r4, [pc, #52]	@ (8005a9c <__libc_init_array+0x3c>)
 8005a68:	1b64      	subs	r4, r4, r5
 8005a6a:	10a4      	asrs	r4, r4, #2
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	f003 ff62 	bl	8009938 <_init>
 8005a74:	2600      	movs	r6, #0
 8005a76:	4d0a      	ldr	r5, [pc, #40]	@ (8005aa0 <__libc_init_array+0x40>)
 8005a78:	4c0a      	ldr	r4, [pc, #40]	@ (8005aa4 <__libc_init_array+0x44>)
 8005a7a:	1b64      	subs	r4, r4, r5
 8005a7c:	10a4      	asrs	r4, r4, #2
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08009fe4 	.word	0x08009fe4
 8005a9c:	08009fe4 	.word	0x08009fe4
 8005aa0:	08009fe4 	.word	0x08009fe4
 8005aa4:	08009fe8 	.word	0x08009fe8

08005aa8 <__retarget_lock_init_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <__retarget_lock_acquire_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_release_recursive>:
 8005aac:	4770      	bx	lr

08005aae <memchr>:
 8005aae:	4603      	mov	r3, r0
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	b2c9      	uxtb	r1, r1
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	d101      	bne.n	8005ac0 <memchr+0x12>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e003      	b.n	8005ac8 <memchr+0x1a>
 8005ac0:	7804      	ldrb	r4, [r0, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	428c      	cmp	r4, r1
 8005ac6:	d1f6      	bne.n	8005ab6 <memchr+0x8>
 8005ac8:	bd10      	pop	{r4, pc}
	...

08005acc <nanf>:
 8005acc:	4800      	ldr	r0, [pc, #0]	@ (8005ad0 <nanf+0x4>)
 8005ace:	4770      	bx	lr
 8005ad0:	7fc00000 	.word	0x7fc00000

08005ad4 <quorem>:
 8005ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	6903      	ldr	r3, [r0, #16]
 8005ada:	690c      	ldr	r4, [r1, #16]
 8005adc:	4607      	mov	r7, r0
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	db7e      	blt.n	8005be0 <quorem+0x10c>
 8005ae2:	3c01      	subs	r4, #1
 8005ae4:	00a3      	lsls	r3, r4, #2
 8005ae6:	f100 0514 	add.w	r5, r0, #20
 8005aea:	f101 0814 	add.w	r8, r1, #20
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005afa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005afe:	3301      	adds	r3, #1
 8005b00:	429a      	cmp	r2, r3
 8005b02:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b0a:	d32e      	bcc.n	8005b6a <quorem+0x96>
 8005b0c:	f04f 0a00 	mov.w	sl, #0
 8005b10:	46c4      	mov	ip, r8
 8005b12:	46ae      	mov	lr, r5
 8005b14:	46d3      	mov	fp, sl
 8005b16:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b1a:	b298      	uxth	r0, r3
 8005b1c:	fb06 a000 	mla	r0, r6, r0, sl
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	0c02      	lsrs	r2, r0, #16
 8005b24:	fb06 2303 	mla	r3, r6, r3, r2
 8005b28:	f8de 2000 	ldr.w	r2, [lr]
 8005b2c:	b280      	uxth	r0, r0
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	1a12      	subs	r2, r2, r0
 8005b32:	445a      	add	r2, fp
 8005b34:	f8de 0000 	ldr.w	r0, [lr]
 8005b38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b46:	b292      	uxth	r2, r2
 8005b48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b4c:	45e1      	cmp	r9, ip
 8005b4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b52:	f84e 2b04 	str.w	r2, [lr], #4
 8005b56:	d2de      	bcs.n	8005b16 <quorem+0x42>
 8005b58:	9b00      	ldr	r3, [sp, #0]
 8005b5a:	58eb      	ldr	r3, [r5, r3]
 8005b5c:	b92b      	cbnz	r3, 8005b6a <quorem+0x96>
 8005b5e:	9b01      	ldr	r3, [sp, #4]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	429d      	cmp	r5, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	d32f      	bcc.n	8005bc8 <quorem+0xf4>
 8005b68:	613c      	str	r4, [r7, #16]
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f001 f9c4 	bl	8006ef8 <__mcmp>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	db25      	blt.n	8005bc0 <quorem+0xec>
 8005b74:	4629      	mov	r1, r5
 8005b76:	2000      	movs	r0, #0
 8005b78:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b7c:	f8d1 c000 	ldr.w	ip, [r1]
 8005b80:	fa1f fe82 	uxth.w	lr, r2
 8005b84:	fa1f f38c 	uxth.w	r3, ip
 8005b88:	eba3 030e 	sub.w	r3, r3, lr
 8005b8c:	4403      	add	r3, r0
 8005b8e:	0c12      	lsrs	r2, r2, #16
 8005b90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b9e:	45c1      	cmp	r9, r8
 8005ba0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ba4:	f841 3b04 	str.w	r3, [r1], #4
 8005ba8:	d2e6      	bcs.n	8005b78 <quorem+0xa4>
 8005baa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bb2:	b922      	cbnz	r2, 8005bbe <quorem+0xea>
 8005bb4:	3b04      	subs	r3, #4
 8005bb6:	429d      	cmp	r5, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	d30b      	bcc.n	8005bd4 <quorem+0x100>
 8005bbc:	613c      	str	r4, [r7, #16]
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	b003      	add	sp, #12
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	d1cb      	bne.n	8005b68 <quorem+0x94>
 8005bd0:	3c01      	subs	r4, #1
 8005bd2:	e7c6      	b.n	8005b62 <quorem+0x8e>
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d1ef      	bne.n	8005bbc <quorem+0xe8>
 8005bdc:	3c01      	subs	r4, #1
 8005bde:	e7ea      	b.n	8005bb6 <quorem+0xe2>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e7ee      	b.n	8005bc2 <quorem+0xee>
 8005be4:	0000      	movs	r0, r0
	...

08005be8 <_dtoa_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	4614      	mov	r4, r2
 8005bee:	461d      	mov	r5, r3
 8005bf0:	69c7      	ldr	r7, [r0, #28]
 8005bf2:	b097      	sub	sp, #92	@ 0x5c
 8005bf4:	4683      	mov	fp, r0
 8005bf6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bfa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005bfc:	b97f      	cbnz	r7, 8005c1e <_dtoa_r+0x36>
 8005bfe:	2010      	movs	r0, #16
 8005c00:	f000 fe02 	bl	8006808 <malloc>
 8005c04:	4602      	mov	r2, r0
 8005c06:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c0a:	b920      	cbnz	r0, 8005c16 <_dtoa_r+0x2e>
 8005c0c:	21ef      	movs	r1, #239	@ 0xef
 8005c0e:	4ba8      	ldr	r3, [pc, #672]	@ (8005eb0 <_dtoa_r+0x2c8>)
 8005c10:	48a8      	ldr	r0, [pc, #672]	@ (8005eb4 <_dtoa_r+0x2cc>)
 8005c12:	f002 ffab 	bl	8008b6c <__assert_func>
 8005c16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c1a:	6007      	str	r7, [r0, #0]
 8005c1c:	60c7      	str	r7, [r0, #12]
 8005c1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	b159      	cbz	r1, 8005c3e <_dtoa_r+0x56>
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4093      	lsls	r3, r2
 8005c2c:	604a      	str	r2, [r1, #4]
 8005c2e:	608b      	str	r3, [r1, #8]
 8005c30:	4658      	mov	r0, fp
 8005c32:	f000 fedf 	bl	80069f4 <_Bfree>
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	1e2b      	subs	r3, r5, #0
 8005c40:	bfaf      	iteee	ge
 8005c42:	2300      	movge	r3, #0
 8005c44:	2201      	movlt	r2, #1
 8005c46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c4a:	9303      	strlt	r3, [sp, #12]
 8005c4c:	bfa8      	it	ge
 8005c4e:	6033      	strge	r3, [r6, #0]
 8005c50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c54:	4b98      	ldr	r3, [pc, #608]	@ (8005eb8 <_dtoa_r+0x2d0>)
 8005c56:	bfb8      	it	lt
 8005c58:	6032      	strlt	r2, [r6, #0]
 8005c5a:	ea33 0308 	bics.w	r3, r3, r8
 8005c5e:	d112      	bne.n	8005c86 <_dtoa_r+0x9e>
 8005c60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c6c:	4323      	orrs	r3, r4
 8005c6e:	f000 8550 	beq.w	8006712 <_dtoa_r+0xb2a>
 8005c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005ebc <_dtoa_r+0x2d4>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 8552 	beq.w	8006722 <_dtoa_r+0xb3a>
 8005c7e:	f10a 0303 	add.w	r3, sl, #3
 8005c82:	f000 bd4c 	b.w	800671e <_dtoa_r+0xb36>
 8005c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	2300      	movs	r3, #0
 8005c96:	f7fa fef3 	bl	8000a80 <__aeabi_dcmpeq>
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	b158      	cbz	r0, 8005cb6 <_dtoa_r+0xce>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ca6:	b113      	cbz	r3, 8005cae <_dtoa_r+0xc6>
 8005ca8:	4b85      	ldr	r3, [pc, #532]	@ (8005ec0 <_dtoa_r+0x2d8>)
 8005caa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005ec4 <_dtoa_r+0x2dc>
 8005cb2:	f000 bd36 	b.w	8006722 <_dtoa_r+0xb3a>
 8005cb6:	ab14      	add	r3, sp, #80	@ 0x50
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	ab15      	add	r3, sp, #84	@ 0x54
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	4658      	mov	r0, fp
 8005cc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cc4:	f001 fa30 	bl	8007128 <__d2b>
 8005cc8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005ccc:	4681      	mov	r9, r0
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	d077      	beq.n	8005dc2 <_dtoa_r+0x1da>
 8005cd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cd8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ce0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ce4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ce8:	9712      	str	r7, [sp, #72]	@ 0x48
 8005cea:	4619      	mov	r1, r3
 8005cec:	2200      	movs	r2, #0
 8005cee:	4b76      	ldr	r3, [pc, #472]	@ (8005ec8 <_dtoa_r+0x2e0>)
 8005cf0:	f7fa faa6 	bl	8000240 <__aeabi_dsub>
 8005cf4:	a368      	add	r3, pc, #416	@ (adr r3, 8005e98 <_dtoa_r+0x2b0>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fc59 	bl	80005b0 <__aeabi_dmul>
 8005cfe:	a368      	add	r3, pc, #416	@ (adr r3, 8005ea0 <_dtoa_r+0x2b8>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fa9e 	bl	8000244 <__adddf3>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	f7fa fbe5 	bl	80004dc <__aeabi_i2d>
 8005d12:	a365      	add	r3, pc, #404	@ (adr r3, 8005ea8 <_dtoa_r+0x2c0>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fc4a 	bl	80005b0 <__aeabi_dmul>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fa8e 	bl	8000244 <__adddf3>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	f7fa fef0 	bl	8000b10 <__aeabi_d2iz>
 8005d30:	2200      	movs	r2, #0
 8005d32:	4607      	mov	r7, r0
 8005d34:	2300      	movs	r3, #0
 8005d36:	4620      	mov	r0, r4
 8005d38:	4629      	mov	r1, r5
 8005d3a:	f7fa feab 	bl	8000a94 <__aeabi_dcmplt>
 8005d3e:	b140      	cbz	r0, 8005d52 <_dtoa_r+0x16a>
 8005d40:	4638      	mov	r0, r7
 8005d42:	f7fa fbcb 	bl	80004dc <__aeabi_i2d>
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	f7fa fe99 	bl	8000a80 <__aeabi_dcmpeq>
 8005d4e:	b900      	cbnz	r0, 8005d52 <_dtoa_r+0x16a>
 8005d50:	3f01      	subs	r7, #1
 8005d52:	2f16      	cmp	r7, #22
 8005d54:	d853      	bhi.n	8005dfe <_dtoa_r+0x216>
 8005d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8005ecc <_dtoa_r+0x2e4>)
 8005d5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fe96 	bl	8000a94 <__aeabi_dcmplt>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d04a      	beq.n	8005e02 <_dtoa_r+0x21a>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	3f01      	subs	r7, #1
 8005d70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d74:	1b9b      	subs	r3, r3, r6
 8005d76:	1e5a      	subs	r2, r3, #1
 8005d78:	bf46      	itte	mi
 8005d7a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d7e:	2300      	movmi	r3, #0
 8005d80:	f04f 0800 	movpl.w	r8, #0
 8005d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d86:	bf48      	it	mi
 8005d88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005d8a:	2f00      	cmp	r7, #0
 8005d8c:	db3b      	blt.n	8005e06 <_dtoa_r+0x21e>
 8005d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d90:	970e      	str	r7, [sp, #56]	@ 0x38
 8005d92:	443b      	add	r3, r7
 8005d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d96:	2300      	movs	r3, #0
 8005d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d9c:	2b09      	cmp	r3, #9
 8005d9e:	d866      	bhi.n	8005e6e <_dtoa_r+0x286>
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	bfc4      	itt	gt
 8005da4:	3b04      	subgt	r3, #4
 8005da6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005da8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005daa:	bfc8      	it	gt
 8005dac:	2400      	movgt	r4, #0
 8005dae:	f1a3 0302 	sub.w	r3, r3, #2
 8005db2:	bfd8      	it	le
 8005db4:	2401      	movle	r4, #1
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d864      	bhi.n	8005e84 <_dtoa_r+0x29c>
 8005dba:	e8df f003 	tbb	[pc, r3]
 8005dbe:	382b      	.short	0x382b
 8005dc0:	5636      	.short	0x5636
 8005dc2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005dc6:	441e      	add	r6, r3
 8005dc8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	bfc1      	itttt	gt
 8005dd0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005dd8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ddc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005de0:	bfd6      	itet	le
 8005de2:	f1c3 0320 	rsble	r3, r3, #32
 8005de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005dea:	fa04 f003 	lslle.w	r0, r4, r3
 8005dee:	f7fa fb65 	bl	80004bc <__aeabi_ui2d>
 8005df2:	2201      	movs	r2, #1
 8005df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005df8:	3e01      	subs	r6, #1
 8005dfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8005dfc:	e775      	b.n	8005cea <_dtoa_r+0x102>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e7b6      	b.n	8005d70 <_dtoa_r+0x188>
 8005e02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e04:	e7b5      	b.n	8005d72 <_dtoa_r+0x18a>
 8005e06:	427b      	negs	r3, r7
 8005e08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	eba8 0807 	sub.w	r8, r8, r7
 8005e10:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e12:	e7c2      	b.n	8005d9a <_dtoa_r+0x1b2>
 8005e14:	2300      	movs	r3, #0
 8005e16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dc35      	bgt.n	8005e8a <_dtoa_r+0x2a2>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	461a      	mov	r2, r3
 8005e22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e26:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e28:	e00b      	b.n	8005e42 <_dtoa_r+0x25a>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e7f3      	b.n	8005e16 <_dtoa_r+0x22e>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	9308      	str	r3, [sp, #32]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	bfb8      	it	lt
 8005e40:	2301      	movlt	r3, #1
 8005e42:	2100      	movs	r1, #0
 8005e44:	2204      	movs	r2, #4
 8005e46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e4a:	f102 0514 	add.w	r5, r2, #20
 8005e4e:	429d      	cmp	r5, r3
 8005e50:	d91f      	bls.n	8005e92 <_dtoa_r+0x2aa>
 8005e52:	6041      	str	r1, [r0, #4]
 8005e54:	4658      	mov	r0, fp
 8005e56:	f000 fd8d 	bl	8006974 <_Balloc>
 8005e5a:	4682      	mov	sl, r0
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d139      	bne.n	8005ed4 <_dtoa_r+0x2ec>
 8005e60:	4602      	mov	r2, r0
 8005e62:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e66:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed0 <_dtoa_r+0x2e8>)
 8005e68:	e6d2      	b.n	8005c10 <_dtoa_r+0x28>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e7e0      	b.n	8005e30 <_dtoa_r+0x248>
 8005e6e:	2401      	movs	r4, #1
 8005e70:	2300      	movs	r3, #0
 8005e72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e74:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e80:	2312      	movs	r3, #18
 8005e82:	e7d0      	b.n	8005e26 <_dtoa_r+0x23e>
 8005e84:	2301      	movs	r3, #1
 8005e86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e88:	e7f5      	b.n	8005e76 <_dtoa_r+0x28e>
 8005e8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e90:	e7d7      	b.n	8005e42 <_dtoa_r+0x25a>
 8005e92:	3101      	adds	r1, #1
 8005e94:	0052      	lsls	r2, r2, #1
 8005e96:	e7d8      	b.n	8005e4a <_dtoa_r+0x262>
 8005e98:	636f4361 	.word	0x636f4361
 8005e9c:	3fd287a7 	.word	0x3fd287a7
 8005ea0:	8b60c8b3 	.word	0x8b60c8b3
 8005ea4:	3fc68a28 	.word	0x3fc68a28
 8005ea8:	509f79fb 	.word	0x509f79fb
 8005eac:	3fd34413 	.word	0x3fd34413
 8005eb0:	08009bd8 	.word	0x08009bd8
 8005eb4:	08009bef 	.word	0x08009bef
 8005eb8:	7ff00000 	.word	0x7ff00000
 8005ebc:	08009bd4 	.word	0x08009bd4
 8005ec0:	08009f31 	.word	0x08009f31
 8005ec4:	08009f30 	.word	0x08009f30
 8005ec8:	3ff80000 	.word	0x3ff80000
 8005ecc:	08009ce8 	.word	0x08009ce8
 8005ed0:	08009c47 	.word	0x08009c47
 8005ed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ed8:	6018      	str	r0, [r3, #0]
 8005eda:	9b07      	ldr	r3, [sp, #28]
 8005edc:	2b0e      	cmp	r3, #14
 8005ede:	f200 80a4 	bhi.w	800602a <_dtoa_r+0x442>
 8005ee2:	2c00      	cmp	r4, #0
 8005ee4:	f000 80a1 	beq.w	800602a <_dtoa_r+0x442>
 8005ee8:	2f00      	cmp	r7, #0
 8005eea:	dd33      	ble.n	8005f54 <_dtoa_r+0x36c>
 8005eec:	4b86      	ldr	r3, [pc, #536]	@ (8006108 <_dtoa_r+0x520>)
 8005eee:	f007 020f 	and.w	r2, r7, #15
 8005ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ef6:	05f8      	lsls	r0, r7, #23
 8005ef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005efc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f04:	d516      	bpl.n	8005f34 <_dtoa_r+0x34c>
 8005f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f0a:	4b80      	ldr	r3, [pc, #512]	@ (800610c <_dtoa_r+0x524>)
 8005f0c:	2603      	movs	r6, #3
 8005f0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f12:	f7fa fc77 	bl	8000804 <__aeabi_ddiv>
 8005f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f1a:	f004 040f 	and.w	r4, r4, #15
 8005f1e:	4d7b      	ldr	r5, [pc, #492]	@ (800610c <_dtoa_r+0x524>)
 8005f20:	b954      	cbnz	r4, 8005f38 <_dtoa_r+0x350>
 8005f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2a:	f7fa fc6b 	bl	8000804 <__aeabi_ddiv>
 8005f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f32:	e028      	b.n	8005f86 <_dtoa_r+0x39e>
 8005f34:	2602      	movs	r6, #2
 8005f36:	e7f2      	b.n	8005f1e <_dtoa_r+0x336>
 8005f38:	07e1      	lsls	r1, r4, #31
 8005f3a:	d508      	bpl.n	8005f4e <_dtoa_r+0x366>
 8005f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f44:	f7fa fb34 	bl	80005b0 <__aeabi_dmul>
 8005f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f4c:	3601      	adds	r6, #1
 8005f4e:	1064      	asrs	r4, r4, #1
 8005f50:	3508      	adds	r5, #8
 8005f52:	e7e5      	b.n	8005f20 <_dtoa_r+0x338>
 8005f54:	f000 80d2 	beq.w	80060fc <_dtoa_r+0x514>
 8005f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f5c:	427c      	negs	r4, r7
 8005f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006108 <_dtoa_r+0x520>)
 8005f60:	f004 020f 	and.w	r2, r4, #15
 8005f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa fb20 	bl	80005b0 <__aeabi_dmul>
 8005f70:	2602      	movs	r6, #2
 8005f72:	2300      	movs	r3, #0
 8005f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f78:	4d64      	ldr	r5, [pc, #400]	@ (800610c <_dtoa_r+0x524>)
 8005f7a:	1124      	asrs	r4, r4, #4
 8005f7c:	2c00      	cmp	r4, #0
 8005f7e:	f040 80b2 	bne.w	80060e6 <_dtoa_r+0x4fe>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1d3      	bne.n	8005f2e <_dtoa_r+0x346>
 8005f86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80b7 	beq.w	8006100 <_dtoa_r+0x518>
 8005f92:	2200      	movs	r2, #0
 8005f94:	4620      	mov	r0, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	4b5d      	ldr	r3, [pc, #372]	@ (8006110 <_dtoa_r+0x528>)
 8005f9a:	f7fa fd7b 	bl	8000a94 <__aeabi_dcmplt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f000 80ae 	beq.w	8006100 <_dtoa_r+0x518>
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80aa 	beq.w	8006100 <_dtoa_r+0x518>
 8005fac:	9b08      	ldr	r3, [sp, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dd37      	ble.n	8006022 <_dtoa_r+0x43a>
 8005fb2:	1e7b      	subs	r3, r7, #1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4b55      	ldr	r3, [pc, #340]	@ (8006114 <_dtoa_r+0x52c>)
 8005fbe:	f7fa faf7 	bl	80005b0 <__aeabi_dmul>
 8005fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc6:	9c08      	ldr	r4, [sp, #32]
 8005fc8:	3601      	adds	r6, #1
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa fa86 	bl	80004dc <__aeabi_i2d>
 8005fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fd4:	f7fa faec 	bl	80005b0 <__aeabi_dmul>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4b4f      	ldr	r3, [pc, #316]	@ (8006118 <_dtoa_r+0x530>)
 8005fdc:	f7fa f932 	bl	8000244 <__adddf3>
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005fe6:	2c00      	cmp	r4, #0
 8005fe8:	f040 809a 	bne.w	8006120 <_dtoa_r+0x538>
 8005fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800611c <_dtoa_r+0x534>)
 8005ff4:	f7fa f924 	bl	8000240 <__aeabi_dsub>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006000:	462a      	mov	r2, r5
 8006002:	4633      	mov	r3, r6
 8006004:	f7fa fd64 	bl	8000ad0 <__aeabi_dcmpgt>
 8006008:	2800      	cmp	r0, #0
 800600a:	f040 828e 	bne.w	800652a <_dtoa_r+0x942>
 800600e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006012:	462a      	mov	r2, r5
 8006014:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006018:	f7fa fd3c 	bl	8000a94 <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	f040 8127 	bne.w	8006270 <_dtoa_r+0x688>
 8006022:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006026:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800602a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800602c:	2b00      	cmp	r3, #0
 800602e:	f2c0 8163 	blt.w	80062f8 <_dtoa_r+0x710>
 8006032:	2f0e      	cmp	r7, #14
 8006034:	f300 8160 	bgt.w	80062f8 <_dtoa_r+0x710>
 8006038:	4b33      	ldr	r3, [pc, #204]	@ (8006108 <_dtoa_r+0x520>)
 800603a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800603e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006042:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006046:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006048:	2b00      	cmp	r3, #0
 800604a:	da03      	bge.n	8006054 <_dtoa_r+0x46c>
 800604c:	9b07      	ldr	r3, [sp, #28]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f340 8100 	ble.w	8006254 <_dtoa_r+0x66c>
 8006054:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006058:	4656      	mov	r6, sl
 800605a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800605e:	4620      	mov	r0, r4
 8006060:	4629      	mov	r1, r5
 8006062:	f7fa fbcf 	bl	8000804 <__aeabi_ddiv>
 8006066:	f7fa fd53 	bl	8000b10 <__aeabi_d2iz>
 800606a:	4680      	mov	r8, r0
 800606c:	f7fa fa36 	bl	80004dc <__aeabi_i2d>
 8006070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006074:	f7fa fa9c 	bl	80005b0 <__aeabi_dmul>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f7fa f8de 	bl	8000240 <__aeabi_dsub>
 8006084:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006088:	9d07      	ldr	r5, [sp, #28]
 800608a:	f806 4b01 	strb.w	r4, [r6], #1
 800608e:	eba6 040a 	sub.w	r4, r6, sl
 8006092:	42a5      	cmp	r5, r4
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	f040 8116 	bne.w	80062c8 <_dtoa_r+0x6e0>
 800609c:	f7fa f8d2 	bl	8000244 <__adddf3>
 80060a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a4:	4604      	mov	r4, r0
 80060a6:	460d      	mov	r5, r1
 80060a8:	f7fa fd12 	bl	8000ad0 <__aeabi_dcmpgt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f040 80f8 	bne.w	80062a2 <_dtoa_r+0x6ba>
 80060b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa fce1 	bl	8000a80 <__aeabi_dcmpeq>
 80060be:	b118      	cbz	r0, 80060c8 <_dtoa_r+0x4e0>
 80060c0:	f018 0f01 	tst.w	r8, #1
 80060c4:	f040 80ed 	bne.w	80062a2 <_dtoa_r+0x6ba>
 80060c8:	4649      	mov	r1, r9
 80060ca:	4658      	mov	r0, fp
 80060cc:	f000 fc92 	bl	80069f4 <_Bfree>
 80060d0:	2300      	movs	r3, #0
 80060d2:	7033      	strb	r3, [r6, #0]
 80060d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060d6:	3701      	adds	r7, #1
 80060d8:	601f      	str	r7, [r3, #0]
 80060da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8320 	beq.w	8006722 <_dtoa_r+0xb3a>
 80060e2:	601e      	str	r6, [r3, #0]
 80060e4:	e31d      	b.n	8006722 <_dtoa_r+0xb3a>
 80060e6:	07e2      	lsls	r2, r4, #31
 80060e8:	d505      	bpl.n	80060f6 <_dtoa_r+0x50e>
 80060ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060ee:	f7fa fa5f 	bl	80005b0 <__aeabi_dmul>
 80060f2:	2301      	movs	r3, #1
 80060f4:	3601      	adds	r6, #1
 80060f6:	1064      	asrs	r4, r4, #1
 80060f8:	3508      	adds	r5, #8
 80060fa:	e73f      	b.n	8005f7c <_dtoa_r+0x394>
 80060fc:	2602      	movs	r6, #2
 80060fe:	e742      	b.n	8005f86 <_dtoa_r+0x39e>
 8006100:	9c07      	ldr	r4, [sp, #28]
 8006102:	9704      	str	r7, [sp, #16]
 8006104:	e761      	b.n	8005fca <_dtoa_r+0x3e2>
 8006106:	bf00      	nop
 8006108:	08009ce8 	.word	0x08009ce8
 800610c:	08009cc0 	.word	0x08009cc0
 8006110:	3ff00000 	.word	0x3ff00000
 8006114:	40240000 	.word	0x40240000
 8006118:	401c0000 	.word	0x401c0000
 800611c:	40140000 	.word	0x40140000
 8006120:	4b70      	ldr	r3, [pc, #448]	@ (80062e4 <_dtoa_r+0x6fc>)
 8006122:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800612c:	4454      	add	r4, sl
 800612e:	2900      	cmp	r1, #0
 8006130:	d045      	beq.n	80061be <_dtoa_r+0x5d6>
 8006132:	2000      	movs	r0, #0
 8006134:	496c      	ldr	r1, [pc, #432]	@ (80062e8 <_dtoa_r+0x700>)
 8006136:	f7fa fb65 	bl	8000804 <__aeabi_ddiv>
 800613a:	4633      	mov	r3, r6
 800613c:	462a      	mov	r2, r5
 800613e:	f7fa f87f 	bl	8000240 <__aeabi_dsub>
 8006142:	4656      	mov	r6, sl
 8006144:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614c:	f7fa fce0 	bl	8000b10 <__aeabi_d2iz>
 8006150:	4605      	mov	r5, r0
 8006152:	f7fa f9c3 	bl	80004dc <__aeabi_i2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615e:	f7fa f86f 	bl	8000240 <__aeabi_dsub>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	3530      	adds	r5, #48	@ 0x30
 8006168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800616c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006170:	f806 5b01 	strb.w	r5, [r6], #1
 8006174:	f7fa fc8e 	bl	8000a94 <__aeabi_dcmplt>
 8006178:	2800      	cmp	r0, #0
 800617a:	d163      	bne.n	8006244 <_dtoa_r+0x65c>
 800617c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006180:	2000      	movs	r0, #0
 8006182:	495a      	ldr	r1, [pc, #360]	@ (80062ec <_dtoa_r+0x704>)
 8006184:	f7fa f85c 	bl	8000240 <__aeabi_dsub>
 8006188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800618c:	f7fa fc82 	bl	8000a94 <__aeabi_dcmplt>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 8087 	bne.w	80062a4 <_dtoa_r+0x6bc>
 8006196:	42a6      	cmp	r6, r4
 8006198:	f43f af43 	beq.w	8006022 <_dtoa_r+0x43a>
 800619c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061a0:	2200      	movs	r2, #0
 80061a2:	4b53      	ldr	r3, [pc, #332]	@ (80062f0 <_dtoa_r+0x708>)
 80061a4:	f7fa fa04 	bl	80005b0 <__aeabi_dmul>
 80061a8:	2200      	movs	r2, #0
 80061aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b2:	4b4f      	ldr	r3, [pc, #316]	@ (80062f0 <_dtoa_r+0x708>)
 80061b4:	f7fa f9fc 	bl	80005b0 <__aeabi_dmul>
 80061b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061bc:	e7c4      	b.n	8006148 <_dtoa_r+0x560>
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	f7fa f9f5 	bl	80005b0 <__aeabi_dmul>
 80061c6:	4656      	mov	r6, sl
 80061c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d2:	f7fa fc9d 	bl	8000b10 <__aeabi_d2iz>
 80061d6:	4605      	mov	r5, r0
 80061d8:	f7fa f980 	bl	80004dc <__aeabi_i2d>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e4:	f7fa f82c 	bl	8000240 <__aeabi_dsub>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	3530      	adds	r5, #48	@ 0x30
 80061ee:	f806 5b01 	strb.w	r5, [r6], #1
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	d124      	bne.n	8006248 <_dtoa_r+0x660>
 80061fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006202:	4b39      	ldr	r3, [pc, #228]	@ (80062e8 <_dtoa_r+0x700>)
 8006204:	f7fa f81e 	bl	8000244 <__adddf3>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006210:	f7fa fc5e 	bl	8000ad0 <__aeabi_dcmpgt>
 8006214:	2800      	cmp	r0, #0
 8006216:	d145      	bne.n	80062a4 <_dtoa_r+0x6bc>
 8006218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800621c:	2000      	movs	r0, #0
 800621e:	4932      	ldr	r1, [pc, #200]	@ (80062e8 <_dtoa_r+0x700>)
 8006220:	f7fa f80e 	bl	8000240 <__aeabi_dsub>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622c:	f7fa fc32 	bl	8000a94 <__aeabi_dcmplt>
 8006230:	2800      	cmp	r0, #0
 8006232:	f43f aef6 	beq.w	8006022 <_dtoa_r+0x43a>
 8006236:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006238:	1e73      	subs	r3, r6, #1
 800623a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800623c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006240:	2b30      	cmp	r3, #48	@ 0x30
 8006242:	d0f8      	beq.n	8006236 <_dtoa_r+0x64e>
 8006244:	9f04      	ldr	r7, [sp, #16]
 8006246:	e73f      	b.n	80060c8 <_dtoa_r+0x4e0>
 8006248:	4b29      	ldr	r3, [pc, #164]	@ (80062f0 <_dtoa_r+0x708>)
 800624a:	f7fa f9b1 	bl	80005b0 <__aeabi_dmul>
 800624e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006252:	e7bc      	b.n	80061ce <_dtoa_r+0x5e6>
 8006254:	d10c      	bne.n	8006270 <_dtoa_r+0x688>
 8006256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800625a:	2200      	movs	r2, #0
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <_dtoa_r+0x70c>)
 800625e:	f7fa f9a7 	bl	80005b0 <__aeabi_dmul>
 8006262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006266:	f7fa fc29 	bl	8000abc <__aeabi_dcmpge>
 800626a:	2800      	cmp	r0, #0
 800626c:	f000 815b 	beq.w	8006526 <_dtoa_r+0x93e>
 8006270:	2400      	movs	r4, #0
 8006272:	4625      	mov	r5, r4
 8006274:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006276:	4656      	mov	r6, sl
 8006278:	43db      	mvns	r3, r3
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	2700      	movs	r7, #0
 800627e:	4621      	mov	r1, r4
 8006280:	4658      	mov	r0, fp
 8006282:	f000 fbb7 	bl	80069f4 <_Bfree>
 8006286:	2d00      	cmp	r5, #0
 8006288:	d0dc      	beq.n	8006244 <_dtoa_r+0x65c>
 800628a:	b12f      	cbz	r7, 8006298 <_dtoa_r+0x6b0>
 800628c:	42af      	cmp	r7, r5
 800628e:	d003      	beq.n	8006298 <_dtoa_r+0x6b0>
 8006290:	4639      	mov	r1, r7
 8006292:	4658      	mov	r0, fp
 8006294:	f000 fbae 	bl	80069f4 <_Bfree>
 8006298:	4629      	mov	r1, r5
 800629a:	4658      	mov	r0, fp
 800629c:	f000 fbaa 	bl	80069f4 <_Bfree>
 80062a0:	e7d0      	b.n	8006244 <_dtoa_r+0x65c>
 80062a2:	9704      	str	r7, [sp, #16]
 80062a4:	4633      	mov	r3, r6
 80062a6:	461e      	mov	r6, r3
 80062a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ac:	2a39      	cmp	r2, #57	@ 0x39
 80062ae:	d107      	bne.n	80062c0 <_dtoa_r+0x6d8>
 80062b0:	459a      	cmp	sl, r3
 80062b2:	d1f8      	bne.n	80062a6 <_dtoa_r+0x6be>
 80062b4:	9a04      	ldr	r2, [sp, #16]
 80062b6:	3201      	adds	r2, #1
 80062b8:	9204      	str	r2, [sp, #16]
 80062ba:	2230      	movs	r2, #48	@ 0x30
 80062bc:	f88a 2000 	strb.w	r2, [sl]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	3201      	adds	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e7bd      	b.n	8006244 <_dtoa_r+0x65c>
 80062c8:	2200      	movs	r2, #0
 80062ca:	4b09      	ldr	r3, [pc, #36]	@ (80062f0 <_dtoa_r+0x708>)
 80062cc:	f7fa f970 	bl	80005b0 <__aeabi_dmul>
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	4604      	mov	r4, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	f7fa fbd2 	bl	8000a80 <__aeabi_dcmpeq>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f43f aebc 	beq.w	800605a <_dtoa_r+0x472>
 80062e2:	e6f1      	b.n	80060c8 <_dtoa_r+0x4e0>
 80062e4:	08009ce8 	.word	0x08009ce8
 80062e8:	3fe00000 	.word	0x3fe00000
 80062ec:	3ff00000 	.word	0x3ff00000
 80062f0:	40240000 	.word	0x40240000
 80062f4:	40140000 	.word	0x40140000
 80062f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	f000 80db 	beq.w	80064b6 <_dtoa_r+0x8ce>
 8006300:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006302:	2a01      	cmp	r2, #1
 8006304:	f300 80bf 	bgt.w	8006486 <_dtoa_r+0x89e>
 8006308:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800630a:	2a00      	cmp	r2, #0
 800630c:	f000 80b7 	beq.w	800647e <_dtoa_r+0x896>
 8006310:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006314:	4646      	mov	r6, r8
 8006316:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800631a:	2101      	movs	r1, #1
 800631c:	441a      	add	r2, r3
 800631e:	4658      	mov	r0, fp
 8006320:	4498      	add	r8, r3
 8006322:	9209      	str	r2, [sp, #36]	@ 0x24
 8006324:	f000 fc64 	bl	8006bf0 <__i2b>
 8006328:	4605      	mov	r5, r0
 800632a:	b15e      	cbz	r6, 8006344 <_dtoa_r+0x75c>
 800632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd08      	ble.n	8006344 <_dtoa_r+0x75c>
 8006332:	42b3      	cmp	r3, r6
 8006334:	bfa8      	it	ge
 8006336:	4633      	movge	r3, r6
 8006338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800633a:	eba8 0803 	sub.w	r8, r8, r3
 800633e:	1af6      	subs	r6, r6, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	9309      	str	r3, [sp, #36]	@ 0x24
 8006344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006346:	b1f3      	cbz	r3, 8006386 <_dtoa_r+0x79e>
 8006348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80b7 	beq.w	80064be <_dtoa_r+0x8d6>
 8006350:	b18c      	cbz	r4, 8006376 <_dtoa_r+0x78e>
 8006352:	4629      	mov	r1, r5
 8006354:	4622      	mov	r2, r4
 8006356:	4658      	mov	r0, fp
 8006358:	f000 fd08 	bl	8006d6c <__pow5mult>
 800635c:	464a      	mov	r2, r9
 800635e:	4601      	mov	r1, r0
 8006360:	4605      	mov	r5, r0
 8006362:	4658      	mov	r0, fp
 8006364:	f000 fc5a 	bl	8006c1c <__multiply>
 8006368:	4649      	mov	r1, r9
 800636a:	9004      	str	r0, [sp, #16]
 800636c:	4658      	mov	r0, fp
 800636e:	f000 fb41 	bl	80069f4 <_Bfree>
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	4699      	mov	r9, r3
 8006376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006378:	1b1a      	subs	r2, r3, r4
 800637a:	d004      	beq.n	8006386 <_dtoa_r+0x79e>
 800637c:	4649      	mov	r1, r9
 800637e:	4658      	mov	r0, fp
 8006380:	f000 fcf4 	bl	8006d6c <__pow5mult>
 8006384:	4681      	mov	r9, r0
 8006386:	2101      	movs	r1, #1
 8006388:	4658      	mov	r0, fp
 800638a:	f000 fc31 	bl	8006bf0 <__i2b>
 800638e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006390:	4604      	mov	r4, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 81c9 	beq.w	800672a <_dtoa_r+0xb42>
 8006398:	461a      	mov	r2, r3
 800639a:	4601      	mov	r1, r0
 800639c:	4658      	mov	r0, fp
 800639e:	f000 fce5 	bl	8006d6c <__pow5mult>
 80063a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063a4:	4604      	mov	r4, r0
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	f300 808f 	bgt.w	80064ca <_dtoa_r+0x8e2>
 80063ac:	9b02      	ldr	r3, [sp, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 8087 	bne.w	80064c2 <_dtoa_r+0x8da>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f040 8083 	bne.w	80064c6 <_dtoa_r+0x8de>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063c6:	0d1b      	lsrs	r3, r3, #20
 80063c8:	051b      	lsls	r3, r3, #20
 80063ca:	b12b      	cbz	r3, 80063d8 <_dtoa_r+0x7f0>
 80063cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ce:	f108 0801 	add.w	r8, r8, #1
 80063d2:	3301      	adds	r3, #1
 80063d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d6:	2301      	movs	r3, #1
 80063d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 81aa 	beq.w	8006736 <_dtoa_r+0xb4e>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063e8:	6918      	ldr	r0, [r3, #16]
 80063ea:	f000 fbb5 	bl	8006b58 <__hi0bits>
 80063ee:	f1c0 0020 	rsb	r0, r0, #32
 80063f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f4:	4418      	add	r0, r3
 80063f6:	f010 001f 	ands.w	r0, r0, #31
 80063fa:	d071      	beq.n	80064e0 <_dtoa_r+0x8f8>
 80063fc:	f1c0 0320 	rsb	r3, r0, #32
 8006400:	2b04      	cmp	r3, #4
 8006402:	dd65      	ble.n	80064d0 <_dtoa_r+0x8e8>
 8006404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006406:	f1c0 001c 	rsb	r0, r0, #28
 800640a:	4403      	add	r3, r0
 800640c:	4480      	add	r8, r0
 800640e:	4406      	add	r6, r0
 8006410:	9309      	str	r3, [sp, #36]	@ 0x24
 8006412:	f1b8 0f00 	cmp.w	r8, #0
 8006416:	dd05      	ble.n	8006424 <_dtoa_r+0x83c>
 8006418:	4649      	mov	r1, r9
 800641a:	4642      	mov	r2, r8
 800641c:	4658      	mov	r0, fp
 800641e:	f000 fcff 	bl	8006e20 <__lshift>
 8006422:	4681      	mov	r9, r0
 8006424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd05      	ble.n	8006436 <_dtoa_r+0x84e>
 800642a:	4621      	mov	r1, r4
 800642c:	461a      	mov	r2, r3
 800642e:	4658      	mov	r0, fp
 8006430:	f000 fcf6 	bl	8006e20 <__lshift>
 8006434:	4604      	mov	r4, r0
 8006436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d053      	beq.n	80064e4 <_dtoa_r+0x8fc>
 800643c:	4621      	mov	r1, r4
 800643e:	4648      	mov	r0, r9
 8006440:	f000 fd5a 	bl	8006ef8 <__mcmp>
 8006444:	2800      	cmp	r0, #0
 8006446:	da4d      	bge.n	80064e4 <_dtoa_r+0x8fc>
 8006448:	1e7b      	subs	r3, r7, #1
 800644a:	4649      	mov	r1, r9
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	220a      	movs	r2, #10
 8006450:	2300      	movs	r3, #0
 8006452:	4658      	mov	r0, fp
 8006454:	f000 faf0 	bl	8006a38 <__multadd>
 8006458:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800645a:	4681      	mov	r9, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 816c 	beq.w	800673a <_dtoa_r+0xb52>
 8006462:	2300      	movs	r3, #0
 8006464:	4629      	mov	r1, r5
 8006466:	220a      	movs	r2, #10
 8006468:	4658      	mov	r0, fp
 800646a:	f000 fae5 	bl	8006a38 <__multadd>
 800646e:	9b08      	ldr	r3, [sp, #32]
 8006470:	4605      	mov	r5, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	dc61      	bgt.n	800653a <_dtoa_r+0x952>
 8006476:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006478:	2b02      	cmp	r3, #2
 800647a:	dc3b      	bgt.n	80064f4 <_dtoa_r+0x90c>
 800647c:	e05d      	b.n	800653a <_dtoa_r+0x952>
 800647e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006480:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006484:	e746      	b.n	8006314 <_dtoa_r+0x72c>
 8006486:	9b07      	ldr	r3, [sp, #28]
 8006488:	1e5c      	subs	r4, r3, #1
 800648a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800648c:	42a3      	cmp	r3, r4
 800648e:	bfbf      	itttt	lt
 8006490:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006492:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006494:	1ae3      	sublt	r3, r4, r3
 8006496:	18d2      	addlt	r2, r2, r3
 8006498:	bfa8      	it	ge
 800649a:	1b1c      	subge	r4, r3, r4
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	bfbe      	ittt	lt
 80064a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80064a4:	2400      	movlt	r4, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bfb5      	itete	lt
 80064aa:	eba8 0603 	sublt.w	r6, r8, r3
 80064ae:	4646      	movge	r6, r8
 80064b0:	2300      	movlt	r3, #0
 80064b2:	9b07      	ldrge	r3, [sp, #28]
 80064b4:	e730      	b.n	8006318 <_dtoa_r+0x730>
 80064b6:	4646      	mov	r6, r8
 80064b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064bc:	e735      	b.n	800632a <_dtoa_r+0x742>
 80064be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064c0:	e75c      	b.n	800637c <_dtoa_r+0x794>
 80064c2:	2300      	movs	r3, #0
 80064c4:	e788      	b.n	80063d8 <_dtoa_r+0x7f0>
 80064c6:	9b02      	ldr	r3, [sp, #8]
 80064c8:	e786      	b.n	80063d8 <_dtoa_r+0x7f0>
 80064ca:	2300      	movs	r3, #0
 80064cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80064ce:	e788      	b.n	80063e2 <_dtoa_r+0x7fa>
 80064d0:	d09f      	beq.n	8006412 <_dtoa_r+0x82a>
 80064d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064d4:	331c      	adds	r3, #28
 80064d6:	441a      	add	r2, r3
 80064d8:	4498      	add	r8, r3
 80064da:	441e      	add	r6, r3
 80064dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80064de:	e798      	b.n	8006412 <_dtoa_r+0x82a>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e7f6      	b.n	80064d2 <_dtoa_r+0x8ea>
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	9704      	str	r7, [sp, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dc20      	bgt.n	800652e <_dtoa_r+0x946>
 80064ec:	9308      	str	r3, [sp, #32]
 80064ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	dd1e      	ble.n	8006532 <_dtoa_r+0x94a>
 80064f4:	9b08      	ldr	r3, [sp, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f47f aebc 	bne.w	8006274 <_dtoa_r+0x68c>
 80064fc:	4621      	mov	r1, r4
 80064fe:	2205      	movs	r2, #5
 8006500:	4658      	mov	r0, fp
 8006502:	f000 fa99 	bl	8006a38 <__multadd>
 8006506:	4601      	mov	r1, r0
 8006508:	4604      	mov	r4, r0
 800650a:	4648      	mov	r0, r9
 800650c:	f000 fcf4 	bl	8006ef8 <__mcmp>
 8006510:	2800      	cmp	r0, #0
 8006512:	f77f aeaf 	ble.w	8006274 <_dtoa_r+0x68c>
 8006516:	2331      	movs	r3, #49	@ 0x31
 8006518:	4656      	mov	r6, sl
 800651a:	f806 3b01 	strb.w	r3, [r6], #1
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	3301      	adds	r3, #1
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	e6aa      	b.n	800627c <_dtoa_r+0x694>
 8006526:	9c07      	ldr	r4, [sp, #28]
 8006528:	9704      	str	r7, [sp, #16]
 800652a:	4625      	mov	r5, r4
 800652c:	e7f3      	b.n	8006516 <_dtoa_r+0x92e>
 800652e:	9b07      	ldr	r3, [sp, #28]
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8104 	beq.w	8006742 <_dtoa_r+0xb5a>
 800653a:	2e00      	cmp	r6, #0
 800653c:	dd05      	ble.n	800654a <_dtoa_r+0x962>
 800653e:	4629      	mov	r1, r5
 8006540:	4632      	mov	r2, r6
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fc6c 	bl	8006e20 <__lshift>
 8006548:	4605      	mov	r5, r0
 800654a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05a      	beq.n	8006606 <_dtoa_r+0xa1e>
 8006550:	4658      	mov	r0, fp
 8006552:	6869      	ldr	r1, [r5, #4]
 8006554:	f000 fa0e 	bl	8006974 <_Balloc>
 8006558:	4606      	mov	r6, r0
 800655a:	b928      	cbnz	r0, 8006568 <_dtoa_r+0x980>
 800655c:	4602      	mov	r2, r0
 800655e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006562:	4b83      	ldr	r3, [pc, #524]	@ (8006770 <_dtoa_r+0xb88>)
 8006564:	f7ff bb54 	b.w	8005c10 <_dtoa_r+0x28>
 8006568:	692a      	ldr	r2, [r5, #16]
 800656a:	f105 010c 	add.w	r1, r5, #12
 800656e:	3202      	adds	r2, #2
 8006570:	0092      	lsls	r2, r2, #2
 8006572:	300c      	adds	r0, #12
 8006574:	f002 fae6 	bl	8008b44 <memcpy>
 8006578:	2201      	movs	r2, #1
 800657a:	4631      	mov	r1, r6
 800657c:	4658      	mov	r0, fp
 800657e:	f000 fc4f 	bl	8006e20 <__lshift>
 8006582:	462f      	mov	r7, r5
 8006584:	4605      	mov	r5, r0
 8006586:	f10a 0301 	add.w	r3, sl, #1
 800658a:	9307      	str	r3, [sp, #28]
 800658c:	9b08      	ldr	r3, [sp, #32]
 800658e:	4453      	add	r3, sl
 8006590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006592:	9b02      	ldr	r3, [sp, #8]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	930a      	str	r3, [sp, #40]	@ 0x28
 800659a:	9b07      	ldr	r3, [sp, #28]
 800659c:	4621      	mov	r1, r4
 800659e:	3b01      	subs	r3, #1
 80065a0:	4648      	mov	r0, r9
 80065a2:	9302      	str	r3, [sp, #8]
 80065a4:	f7ff fa96 	bl	8005ad4 <quorem>
 80065a8:	4639      	mov	r1, r7
 80065aa:	9008      	str	r0, [sp, #32]
 80065ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065b0:	4648      	mov	r0, r9
 80065b2:	f000 fca1 	bl	8006ef8 <__mcmp>
 80065b6:	462a      	mov	r2, r5
 80065b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80065ba:	4621      	mov	r1, r4
 80065bc:	4658      	mov	r0, fp
 80065be:	f000 fcb7 	bl	8006f30 <__mdiff>
 80065c2:	68c2      	ldr	r2, [r0, #12]
 80065c4:	4606      	mov	r6, r0
 80065c6:	bb02      	cbnz	r2, 800660a <_dtoa_r+0xa22>
 80065c8:	4601      	mov	r1, r0
 80065ca:	4648      	mov	r0, r9
 80065cc:	f000 fc94 	bl	8006ef8 <__mcmp>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4631      	mov	r1, r6
 80065d4:	4658      	mov	r0, fp
 80065d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80065d8:	f000 fa0c 	bl	80069f4 <_Bfree>
 80065dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065e0:	9e07      	ldr	r6, [sp, #28]
 80065e2:	ea43 0102 	orr.w	r1, r3, r2
 80065e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e8:	4319      	orrs	r1, r3
 80065ea:	d110      	bne.n	800660e <_dtoa_r+0xa26>
 80065ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065f0:	d029      	beq.n	8006646 <_dtoa_r+0xa5e>
 80065f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dd02      	ble.n	80065fe <_dtoa_r+0xa16>
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	f883 8000 	strb.w	r8, [r3]
 8006604:	e63b      	b.n	800627e <_dtoa_r+0x696>
 8006606:	4628      	mov	r0, r5
 8006608:	e7bb      	b.n	8006582 <_dtoa_r+0x99a>
 800660a:	2201      	movs	r2, #1
 800660c:	e7e1      	b.n	80065d2 <_dtoa_r+0x9ea>
 800660e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	db04      	blt.n	800661e <_dtoa_r+0xa36>
 8006614:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006616:	430b      	orrs	r3, r1
 8006618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800661a:	430b      	orrs	r3, r1
 800661c:	d120      	bne.n	8006660 <_dtoa_r+0xa78>
 800661e:	2a00      	cmp	r2, #0
 8006620:	dded      	ble.n	80065fe <_dtoa_r+0xa16>
 8006622:	4649      	mov	r1, r9
 8006624:	2201      	movs	r2, #1
 8006626:	4658      	mov	r0, fp
 8006628:	f000 fbfa 	bl	8006e20 <__lshift>
 800662c:	4621      	mov	r1, r4
 800662e:	4681      	mov	r9, r0
 8006630:	f000 fc62 	bl	8006ef8 <__mcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	dc03      	bgt.n	8006640 <_dtoa_r+0xa58>
 8006638:	d1e1      	bne.n	80065fe <_dtoa_r+0xa16>
 800663a:	f018 0f01 	tst.w	r8, #1
 800663e:	d0de      	beq.n	80065fe <_dtoa_r+0xa16>
 8006640:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006644:	d1d8      	bne.n	80065f8 <_dtoa_r+0xa10>
 8006646:	2339      	movs	r3, #57	@ 0x39
 8006648:	9a02      	ldr	r2, [sp, #8]
 800664a:	7013      	strb	r3, [r2, #0]
 800664c:	4633      	mov	r3, r6
 800664e:	461e      	mov	r6, r3
 8006650:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006654:	3b01      	subs	r3, #1
 8006656:	2a39      	cmp	r2, #57	@ 0x39
 8006658:	d052      	beq.n	8006700 <_dtoa_r+0xb18>
 800665a:	3201      	adds	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	e60e      	b.n	800627e <_dtoa_r+0x696>
 8006660:	2a00      	cmp	r2, #0
 8006662:	dd07      	ble.n	8006674 <_dtoa_r+0xa8c>
 8006664:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006668:	d0ed      	beq.n	8006646 <_dtoa_r+0xa5e>
 800666a:	9a02      	ldr	r2, [sp, #8]
 800666c:	f108 0301 	add.w	r3, r8, #1
 8006670:	7013      	strb	r3, [r2, #0]
 8006672:	e604      	b.n	800627e <_dtoa_r+0x696>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	9a07      	ldr	r2, [sp, #28]
 8006678:	f803 8c01 	strb.w	r8, [r3, #-1]
 800667c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800667e:	4293      	cmp	r3, r2
 8006680:	d028      	beq.n	80066d4 <_dtoa_r+0xaec>
 8006682:	4649      	mov	r1, r9
 8006684:	2300      	movs	r3, #0
 8006686:	220a      	movs	r2, #10
 8006688:	4658      	mov	r0, fp
 800668a:	f000 f9d5 	bl	8006a38 <__multadd>
 800668e:	42af      	cmp	r7, r5
 8006690:	4681      	mov	r9, r0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	f04f 020a 	mov.w	r2, #10
 800669a:	4639      	mov	r1, r7
 800669c:	4658      	mov	r0, fp
 800669e:	d107      	bne.n	80066b0 <_dtoa_r+0xac8>
 80066a0:	f000 f9ca 	bl	8006a38 <__multadd>
 80066a4:	4607      	mov	r7, r0
 80066a6:	4605      	mov	r5, r0
 80066a8:	9b07      	ldr	r3, [sp, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	9307      	str	r3, [sp, #28]
 80066ae:	e774      	b.n	800659a <_dtoa_r+0x9b2>
 80066b0:	f000 f9c2 	bl	8006a38 <__multadd>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4607      	mov	r7, r0
 80066b8:	2300      	movs	r3, #0
 80066ba:	220a      	movs	r2, #10
 80066bc:	4658      	mov	r0, fp
 80066be:	f000 f9bb 	bl	8006a38 <__multadd>
 80066c2:	4605      	mov	r5, r0
 80066c4:	e7f0      	b.n	80066a8 <_dtoa_r+0xac0>
 80066c6:	9b08      	ldr	r3, [sp, #32]
 80066c8:	2700      	movs	r7, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfcc      	ite	gt
 80066ce:	461e      	movgt	r6, r3
 80066d0:	2601      	movle	r6, #1
 80066d2:	4456      	add	r6, sl
 80066d4:	4649      	mov	r1, r9
 80066d6:	2201      	movs	r2, #1
 80066d8:	4658      	mov	r0, fp
 80066da:	f000 fba1 	bl	8006e20 <__lshift>
 80066de:	4621      	mov	r1, r4
 80066e0:	4681      	mov	r9, r0
 80066e2:	f000 fc09 	bl	8006ef8 <__mcmp>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	dcb0      	bgt.n	800664c <_dtoa_r+0xa64>
 80066ea:	d102      	bne.n	80066f2 <_dtoa_r+0xb0a>
 80066ec:	f018 0f01 	tst.w	r8, #1
 80066f0:	d1ac      	bne.n	800664c <_dtoa_r+0xa64>
 80066f2:	4633      	mov	r3, r6
 80066f4:	461e      	mov	r6, r3
 80066f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066fa:	2a30      	cmp	r2, #48	@ 0x30
 80066fc:	d0fa      	beq.n	80066f4 <_dtoa_r+0xb0c>
 80066fe:	e5be      	b.n	800627e <_dtoa_r+0x696>
 8006700:	459a      	cmp	sl, r3
 8006702:	d1a4      	bne.n	800664e <_dtoa_r+0xa66>
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	3301      	adds	r3, #1
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	2331      	movs	r3, #49	@ 0x31
 800670c:	f88a 3000 	strb.w	r3, [sl]
 8006710:	e5b5      	b.n	800627e <_dtoa_r+0x696>
 8006712:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006714:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006774 <_dtoa_r+0xb8c>
 8006718:	b11b      	cbz	r3, 8006722 <_dtoa_r+0xb3a>
 800671a:	f10a 0308 	add.w	r3, sl, #8
 800671e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4650      	mov	r0, sl
 8006724:	b017      	add	sp, #92	@ 0x5c
 8006726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800672c:	2b01      	cmp	r3, #1
 800672e:	f77f ae3d 	ble.w	80063ac <_dtoa_r+0x7c4>
 8006732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006734:	930a      	str	r3, [sp, #40]	@ 0x28
 8006736:	2001      	movs	r0, #1
 8006738:	e65b      	b.n	80063f2 <_dtoa_r+0x80a>
 800673a:	9b08      	ldr	r3, [sp, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f77f aed6 	ble.w	80064ee <_dtoa_r+0x906>
 8006742:	4656      	mov	r6, sl
 8006744:	4621      	mov	r1, r4
 8006746:	4648      	mov	r0, r9
 8006748:	f7ff f9c4 	bl	8005ad4 <quorem>
 800674c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006750:	9b08      	ldr	r3, [sp, #32]
 8006752:	f806 8b01 	strb.w	r8, [r6], #1
 8006756:	eba6 020a 	sub.w	r2, r6, sl
 800675a:	4293      	cmp	r3, r2
 800675c:	ddb3      	ble.n	80066c6 <_dtoa_r+0xade>
 800675e:	4649      	mov	r1, r9
 8006760:	2300      	movs	r3, #0
 8006762:	220a      	movs	r2, #10
 8006764:	4658      	mov	r0, fp
 8006766:	f000 f967 	bl	8006a38 <__multadd>
 800676a:	4681      	mov	r9, r0
 800676c:	e7ea      	b.n	8006744 <_dtoa_r+0xb5c>
 800676e:	bf00      	nop
 8006770:	08009c47 	.word	0x08009c47
 8006774:	08009bcb 	.word	0x08009bcb

08006778 <_free_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4605      	mov	r5, r0
 800677c:	2900      	cmp	r1, #0
 800677e:	d040      	beq.n	8006802 <_free_r+0x8a>
 8006780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006784:	1f0c      	subs	r4, r1, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	bfb8      	it	lt
 800678a:	18e4      	addlt	r4, r4, r3
 800678c:	f000 f8e6 	bl	800695c <__malloc_lock>
 8006790:	4a1c      	ldr	r2, [pc, #112]	@ (8006804 <_free_r+0x8c>)
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	b933      	cbnz	r3, 80067a4 <_free_r+0x2c>
 8006796:	6063      	str	r3, [r4, #4]
 8006798:	6014      	str	r4, [r2, #0]
 800679a:	4628      	mov	r0, r5
 800679c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067a0:	f000 b8e2 	b.w	8006968 <__malloc_unlock>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d908      	bls.n	80067ba <_free_r+0x42>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	1821      	adds	r1, r4, r0
 80067ac:	428b      	cmp	r3, r1
 80067ae:	bf01      	itttt	eq
 80067b0:	6819      	ldreq	r1, [r3, #0]
 80067b2:	685b      	ldreq	r3, [r3, #4]
 80067b4:	1809      	addeq	r1, r1, r0
 80067b6:	6021      	streq	r1, [r4, #0]
 80067b8:	e7ed      	b.n	8006796 <_free_r+0x1e>
 80067ba:	461a      	mov	r2, r3
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b10b      	cbz	r3, 80067c4 <_free_r+0x4c>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d9fa      	bls.n	80067ba <_free_r+0x42>
 80067c4:	6811      	ldr	r1, [r2, #0]
 80067c6:	1850      	adds	r0, r2, r1
 80067c8:	42a0      	cmp	r0, r4
 80067ca:	d10b      	bne.n	80067e4 <_free_r+0x6c>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	4401      	add	r1, r0
 80067d0:	1850      	adds	r0, r2, r1
 80067d2:	4283      	cmp	r3, r0
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	d1e0      	bne.n	800679a <_free_r+0x22>
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4408      	add	r0, r1
 80067de:	6010      	str	r0, [r2, #0]
 80067e0:	6053      	str	r3, [r2, #4]
 80067e2:	e7da      	b.n	800679a <_free_r+0x22>
 80067e4:	d902      	bls.n	80067ec <_free_r+0x74>
 80067e6:	230c      	movs	r3, #12
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	e7d6      	b.n	800679a <_free_r+0x22>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	1821      	adds	r1, r4, r0
 80067f0:	428b      	cmp	r3, r1
 80067f2:	bf01      	itttt	eq
 80067f4:	6819      	ldreq	r1, [r3, #0]
 80067f6:	685b      	ldreq	r3, [r3, #4]
 80067f8:	1809      	addeq	r1, r1, r0
 80067fa:	6021      	streq	r1, [r4, #0]
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6054      	str	r4, [r2, #4]
 8006800:	e7cb      	b.n	800679a <_free_r+0x22>
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	2000046c 	.word	0x2000046c

08006808 <malloc>:
 8006808:	4b02      	ldr	r3, [pc, #8]	@ (8006814 <malloc+0xc>)
 800680a:	4601      	mov	r1, r0
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f000 b825 	b.w	800685c <_malloc_r>
 8006812:	bf00      	nop
 8006814:	20000018 	.word	0x20000018

08006818 <sbrk_aligned>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4e0f      	ldr	r6, [pc, #60]	@ (8006858 <sbrk_aligned+0x40>)
 800681c:	460c      	mov	r4, r1
 800681e:	6831      	ldr	r1, [r6, #0]
 8006820:	4605      	mov	r5, r0
 8006822:	b911      	cbnz	r1, 800682a <sbrk_aligned+0x12>
 8006824:	f002 f97e 	bl	8008b24 <_sbrk_r>
 8006828:	6030      	str	r0, [r6, #0]
 800682a:	4621      	mov	r1, r4
 800682c:	4628      	mov	r0, r5
 800682e:	f002 f979 	bl	8008b24 <_sbrk_r>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d103      	bne.n	800683e <sbrk_aligned+0x26>
 8006836:	f04f 34ff 	mov.w	r4, #4294967295
 800683a:	4620      	mov	r0, r4
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	1cc4      	adds	r4, r0, #3
 8006840:	f024 0403 	bic.w	r4, r4, #3
 8006844:	42a0      	cmp	r0, r4
 8006846:	d0f8      	beq.n	800683a <sbrk_aligned+0x22>
 8006848:	1a21      	subs	r1, r4, r0
 800684a:	4628      	mov	r0, r5
 800684c:	f002 f96a 	bl	8008b24 <_sbrk_r>
 8006850:	3001      	adds	r0, #1
 8006852:	d1f2      	bne.n	800683a <sbrk_aligned+0x22>
 8006854:	e7ef      	b.n	8006836 <sbrk_aligned+0x1e>
 8006856:	bf00      	nop
 8006858:	20000468 	.word	0x20000468

0800685c <_malloc_r>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	1ccd      	adds	r5, r1, #3
 8006862:	f025 0503 	bic.w	r5, r5, #3
 8006866:	3508      	adds	r5, #8
 8006868:	2d0c      	cmp	r5, #12
 800686a:	bf38      	it	cc
 800686c:	250c      	movcc	r5, #12
 800686e:	2d00      	cmp	r5, #0
 8006870:	4606      	mov	r6, r0
 8006872:	db01      	blt.n	8006878 <_malloc_r+0x1c>
 8006874:	42a9      	cmp	r1, r5
 8006876:	d904      	bls.n	8006882 <_malloc_r+0x26>
 8006878:	230c      	movs	r3, #12
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	2000      	movs	r0, #0
 800687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006958 <_malloc_r+0xfc>
 8006886:	f000 f869 	bl	800695c <__malloc_lock>
 800688a:	f8d8 3000 	ldr.w	r3, [r8]
 800688e:	461c      	mov	r4, r3
 8006890:	bb44      	cbnz	r4, 80068e4 <_malloc_r+0x88>
 8006892:	4629      	mov	r1, r5
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff ffbf 	bl	8006818 <sbrk_aligned>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	4604      	mov	r4, r0
 800689e:	d158      	bne.n	8006952 <_malloc_r+0xf6>
 80068a0:	f8d8 4000 	ldr.w	r4, [r8]
 80068a4:	4627      	mov	r7, r4
 80068a6:	2f00      	cmp	r7, #0
 80068a8:	d143      	bne.n	8006932 <_malloc_r+0xd6>
 80068aa:	2c00      	cmp	r4, #0
 80068ac:	d04b      	beq.n	8006946 <_malloc_r+0xea>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	eb04 0903 	add.w	r9, r4, r3
 80068b8:	f002 f934 	bl	8008b24 <_sbrk_r>
 80068bc:	4581      	cmp	r9, r0
 80068be:	d142      	bne.n	8006946 <_malloc_r+0xea>
 80068c0:	6821      	ldr	r1, [r4, #0]
 80068c2:	4630      	mov	r0, r6
 80068c4:	1a6d      	subs	r5, r5, r1
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7ff ffa6 	bl	8006818 <sbrk_aligned>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d03a      	beq.n	8006946 <_malloc_r+0xea>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	442b      	add	r3, r5
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	f8d8 3000 	ldr.w	r3, [r8]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	bb62      	cbnz	r2, 8006938 <_malloc_r+0xdc>
 80068de:	f8c8 7000 	str.w	r7, [r8]
 80068e2:	e00f      	b.n	8006904 <_malloc_r+0xa8>
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	1b52      	subs	r2, r2, r5
 80068e8:	d420      	bmi.n	800692c <_malloc_r+0xd0>
 80068ea:	2a0b      	cmp	r2, #11
 80068ec:	d917      	bls.n	800691e <_malloc_r+0xc2>
 80068ee:	1961      	adds	r1, r4, r5
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	6025      	str	r5, [r4, #0]
 80068f4:	bf18      	it	ne
 80068f6:	6059      	strne	r1, [r3, #4]
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	bf08      	it	eq
 80068fc:	f8c8 1000 	streq.w	r1, [r8]
 8006900:	5162      	str	r2, [r4, r5]
 8006902:	604b      	str	r3, [r1, #4]
 8006904:	4630      	mov	r0, r6
 8006906:	f000 f82f 	bl	8006968 <__malloc_unlock>
 800690a:	f104 000b 	add.w	r0, r4, #11
 800690e:	1d23      	adds	r3, r4, #4
 8006910:	f020 0007 	bic.w	r0, r0, #7
 8006914:	1ac2      	subs	r2, r0, r3
 8006916:	bf1c      	itt	ne
 8006918:	1a1b      	subne	r3, r3, r0
 800691a:	50a3      	strne	r3, [r4, r2]
 800691c:	e7af      	b.n	800687e <_malloc_r+0x22>
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	42a3      	cmp	r3, r4
 8006922:	bf0c      	ite	eq
 8006924:	f8c8 2000 	streq.w	r2, [r8]
 8006928:	605a      	strne	r2, [r3, #4]
 800692a:	e7eb      	b.n	8006904 <_malloc_r+0xa8>
 800692c:	4623      	mov	r3, r4
 800692e:	6864      	ldr	r4, [r4, #4]
 8006930:	e7ae      	b.n	8006890 <_malloc_r+0x34>
 8006932:	463c      	mov	r4, r7
 8006934:	687f      	ldr	r7, [r7, #4]
 8006936:	e7b6      	b.n	80068a6 <_malloc_r+0x4a>
 8006938:	461a      	mov	r2, r3
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	42a3      	cmp	r3, r4
 800693e:	d1fb      	bne.n	8006938 <_malloc_r+0xdc>
 8006940:	2300      	movs	r3, #0
 8006942:	6053      	str	r3, [r2, #4]
 8006944:	e7de      	b.n	8006904 <_malloc_r+0xa8>
 8006946:	230c      	movs	r3, #12
 8006948:	4630      	mov	r0, r6
 800694a:	6033      	str	r3, [r6, #0]
 800694c:	f000 f80c 	bl	8006968 <__malloc_unlock>
 8006950:	e794      	b.n	800687c <_malloc_r+0x20>
 8006952:	6005      	str	r5, [r0, #0]
 8006954:	e7d6      	b.n	8006904 <_malloc_r+0xa8>
 8006956:	bf00      	nop
 8006958:	2000046c 	.word	0x2000046c

0800695c <__malloc_lock>:
 800695c:	4801      	ldr	r0, [pc, #4]	@ (8006964 <__malloc_lock+0x8>)
 800695e:	f7ff b8a4 	b.w	8005aaa <__retarget_lock_acquire_recursive>
 8006962:	bf00      	nop
 8006964:	20000464 	.word	0x20000464

08006968 <__malloc_unlock>:
 8006968:	4801      	ldr	r0, [pc, #4]	@ (8006970 <__malloc_unlock+0x8>)
 800696a:	f7ff b89f 	b.w	8005aac <__retarget_lock_release_recursive>
 800696e:	bf00      	nop
 8006970:	20000464 	.word	0x20000464

08006974 <_Balloc>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	69c6      	ldr	r6, [r0, #28]
 8006978:	4604      	mov	r4, r0
 800697a:	460d      	mov	r5, r1
 800697c:	b976      	cbnz	r6, 800699c <_Balloc+0x28>
 800697e:	2010      	movs	r0, #16
 8006980:	f7ff ff42 	bl	8006808 <malloc>
 8006984:	4602      	mov	r2, r0
 8006986:	61e0      	str	r0, [r4, #28]
 8006988:	b920      	cbnz	r0, 8006994 <_Balloc+0x20>
 800698a:	216b      	movs	r1, #107	@ 0x6b
 800698c:	4b17      	ldr	r3, [pc, #92]	@ (80069ec <_Balloc+0x78>)
 800698e:	4818      	ldr	r0, [pc, #96]	@ (80069f0 <_Balloc+0x7c>)
 8006990:	f002 f8ec 	bl	8008b6c <__assert_func>
 8006994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006998:	6006      	str	r6, [r0, #0]
 800699a:	60c6      	str	r6, [r0, #12]
 800699c:	69e6      	ldr	r6, [r4, #28]
 800699e:	68f3      	ldr	r3, [r6, #12]
 80069a0:	b183      	cbz	r3, 80069c4 <_Balloc+0x50>
 80069a2:	69e3      	ldr	r3, [r4, #28]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069aa:	b9b8      	cbnz	r0, 80069dc <_Balloc+0x68>
 80069ac:	2101      	movs	r1, #1
 80069ae:	fa01 f605 	lsl.w	r6, r1, r5
 80069b2:	1d72      	adds	r2, r6, #5
 80069b4:	4620      	mov	r0, r4
 80069b6:	0092      	lsls	r2, r2, #2
 80069b8:	f002 f8f6 	bl	8008ba8 <_calloc_r>
 80069bc:	b160      	cbz	r0, 80069d8 <_Balloc+0x64>
 80069be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069c2:	e00e      	b.n	80069e2 <_Balloc+0x6e>
 80069c4:	2221      	movs	r2, #33	@ 0x21
 80069c6:	2104      	movs	r1, #4
 80069c8:	4620      	mov	r0, r4
 80069ca:	f002 f8ed 	bl	8008ba8 <_calloc_r>
 80069ce:	69e3      	ldr	r3, [r4, #28]
 80069d0:	60f0      	str	r0, [r6, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e4      	bne.n	80069a2 <_Balloc+0x2e>
 80069d8:	2000      	movs	r0, #0
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	6802      	ldr	r2, [r0, #0]
 80069de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069e2:	2300      	movs	r3, #0
 80069e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069e8:	e7f7      	b.n	80069da <_Balloc+0x66>
 80069ea:	bf00      	nop
 80069ec:	08009bd8 	.word	0x08009bd8
 80069f0:	08009c58 	.word	0x08009c58

080069f4 <_Bfree>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	69c6      	ldr	r6, [r0, #28]
 80069f8:	4605      	mov	r5, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b976      	cbnz	r6, 8006a1c <_Bfree+0x28>
 80069fe:	2010      	movs	r0, #16
 8006a00:	f7ff ff02 	bl	8006808 <malloc>
 8006a04:	4602      	mov	r2, r0
 8006a06:	61e8      	str	r0, [r5, #28]
 8006a08:	b920      	cbnz	r0, 8006a14 <_Bfree+0x20>
 8006a0a:	218f      	movs	r1, #143	@ 0x8f
 8006a0c:	4b08      	ldr	r3, [pc, #32]	@ (8006a30 <_Bfree+0x3c>)
 8006a0e:	4809      	ldr	r0, [pc, #36]	@ (8006a34 <_Bfree+0x40>)
 8006a10:	f002 f8ac 	bl	8008b6c <__assert_func>
 8006a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a18:	6006      	str	r6, [r0, #0]
 8006a1a:	60c6      	str	r6, [r0, #12]
 8006a1c:	b13c      	cbz	r4, 8006a2e <_Bfree+0x3a>
 8006a1e:	69eb      	ldr	r3, [r5, #28]
 8006a20:	6862      	ldr	r2, [r4, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a28:	6021      	str	r1, [r4, #0]
 8006a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	08009bd8 	.word	0x08009bd8
 8006a34:	08009c58 	.word	0x08009c58

08006a38 <__multadd>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	461e      	mov	r6, r3
 8006a42:	2000      	movs	r0, #0
 8006a44:	690d      	ldr	r5, [r1, #16]
 8006a46:	f101 0c14 	add.w	ip, r1, #20
 8006a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a4e:	3001      	adds	r0, #1
 8006a50:	b299      	uxth	r1, r3
 8006a52:	fb02 6101 	mla	r1, r2, r1, r6
 8006a56:	0c1e      	lsrs	r6, r3, #16
 8006a58:	0c0b      	lsrs	r3, r1, #16
 8006a5a:	fb02 3306 	mla	r3, r2, r6, r3
 8006a5e:	b289      	uxth	r1, r1
 8006a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a64:	4285      	cmp	r5, r0
 8006a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a6e:	dcec      	bgt.n	8006a4a <__multadd+0x12>
 8006a70:	b30e      	cbz	r6, 8006ab6 <__multadd+0x7e>
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	42ab      	cmp	r3, r5
 8006a76:	dc19      	bgt.n	8006aac <__multadd+0x74>
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	3101      	adds	r1, #1
 8006a7e:	f7ff ff79 	bl	8006974 <_Balloc>
 8006a82:	4680      	mov	r8, r0
 8006a84:	b928      	cbnz	r0, 8006a92 <__multadd+0x5a>
 8006a86:	4602      	mov	r2, r0
 8006a88:	21ba      	movs	r1, #186	@ 0xba
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006abc <__multadd+0x84>)
 8006a8c:	480c      	ldr	r0, [pc, #48]	@ (8006ac0 <__multadd+0x88>)
 8006a8e:	f002 f86d 	bl	8008b6c <__assert_func>
 8006a92:	6922      	ldr	r2, [r4, #16]
 8006a94:	f104 010c 	add.w	r1, r4, #12
 8006a98:	3202      	adds	r2, #2
 8006a9a:	0092      	lsls	r2, r2, #2
 8006a9c:	300c      	adds	r0, #12
 8006a9e:	f002 f851 	bl	8008b44 <memcpy>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	f7ff ffa5 	bl	80069f4 <_Bfree>
 8006aaa:	4644      	mov	r4, r8
 8006aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	615e      	str	r6, [r3, #20]
 8006ab4:	6125      	str	r5, [r4, #16]
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006abc:	08009c47 	.word	0x08009c47
 8006ac0:	08009c58 	.word	0x08009c58

08006ac4 <__s2b>:
 8006ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	4615      	mov	r5, r2
 8006aca:	2209      	movs	r2, #9
 8006acc:	461f      	mov	r7, r3
 8006ace:	3308      	adds	r3, #8
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2100      	movs	r1, #0
 8006adc:	429a      	cmp	r2, r3
 8006ade:	db09      	blt.n	8006af4 <__s2b+0x30>
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7ff ff47 	bl	8006974 <_Balloc>
 8006ae6:	b940      	cbnz	r0, 8006afa <__s2b+0x36>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	21d3      	movs	r1, #211	@ 0xd3
 8006aec:	4b18      	ldr	r3, [pc, #96]	@ (8006b50 <__s2b+0x8c>)
 8006aee:	4819      	ldr	r0, [pc, #100]	@ (8006b54 <__s2b+0x90>)
 8006af0:	f002 f83c 	bl	8008b6c <__assert_func>
 8006af4:	0052      	lsls	r2, r2, #1
 8006af6:	3101      	adds	r1, #1
 8006af8:	e7f0      	b.n	8006adc <__s2b+0x18>
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	2d09      	cmp	r5, #9
 8006afe:	6143      	str	r3, [r0, #20]
 8006b00:	f04f 0301 	mov.w	r3, #1
 8006b04:	6103      	str	r3, [r0, #16]
 8006b06:	dd16      	ble.n	8006b36 <__s2b+0x72>
 8006b08:	f104 0909 	add.w	r9, r4, #9
 8006b0c:	46c8      	mov	r8, r9
 8006b0e:	442c      	add	r4, r5
 8006b10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b14:	4601      	mov	r1, r0
 8006b16:	220a      	movs	r2, #10
 8006b18:	4630      	mov	r0, r6
 8006b1a:	3b30      	subs	r3, #48	@ 0x30
 8006b1c:	f7ff ff8c 	bl	8006a38 <__multadd>
 8006b20:	45a0      	cmp	r8, r4
 8006b22:	d1f5      	bne.n	8006b10 <__s2b+0x4c>
 8006b24:	f1a5 0408 	sub.w	r4, r5, #8
 8006b28:	444c      	add	r4, r9
 8006b2a:	1b2d      	subs	r5, r5, r4
 8006b2c:	1963      	adds	r3, r4, r5
 8006b2e:	42bb      	cmp	r3, r7
 8006b30:	db04      	blt.n	8006b3c <__s2b+0x78>
 8006b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b36:	2509      	movs	r5, #9
 8006b38:	340a      	adds	r4, #10
 8006b3a:	e7f6      	b.n	8006b2a <__s2b+0x66>
 8006b3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b40:	4601      	mov	r1, r0
 8006b42:	220a      	movs	r2, #10
 8006b44:	4630      	mov	r0, r6
 8006b46:	3b30      	subs	r3, #48	@ 0x30
 8006b48:	f7ff ff76 	bl	8006a38 <__multadd>
 8006b4c:	e7ee      	b.n	8006b2c <__s2b+0x68>
 8006b4e:	bf00      	nop
 8006b50:	08009c47 	.word	0x08009c47
 8006b54:	08009c58 	.word	0x08009c58

08006b58 <__hi0bits>:
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b5e:	bf3a      	itte	cc
 8006b60:	0403      	lslcc	r3, r0, #16
 8006b62:	2010      	movcc	r0, #16
 8006b64:	2000      	movcs	r0, #0
 8006b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b6a:	bf3c      	itt	cc
 8006b6c:	021b      	lslcc	r3, r3, #8
 8006b6e:	3008      	addcc	r0, #8
 8006b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b74:	bf3c      	itt	cc
 8006b76:	011b      	lslcc	r3, r3, #4
 8006b78:	3004      	addcc	r0, #4
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b7e:	bf3c      	itt	cc
 8006b80:	009b      	lslcc	r3, r3, #2
 8006b82:	3002      	addcc	r0, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	db05      	blt.n	8006b94 <__hi0bits+0x3c>
 8006b88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b8c:	f100 0001 	add.w	r0, r0, #1
 8006b90:	bf08      	it	eq
 8006b92:	2020      	moveq	r0, #32
 8006b94:	4770      	bx	lr

08006b96 <__lo0bits>:
 8006b96:	6803      	ldr	r3, [r0, #0]
 8006b98:	4602      	mov	r2, r0
 8006b9a:	f013 0007 	ands.w	r0, r3, #7
 8006b9e:	d00b      	beq.n	8006bb8 <__lo0bits+0x22>
 8006ba0:	07d9      	lsls	r1, r3, #31
 8006ba2:	d421      	bmi.n	8006be8 <__lo0bits+0x52>
 8006ba4:	0798      	lsls	r0, r3, #30
 8006ba6:	bf49      	itett	mi
 8006ba8:	085b      	lsrmi	r3, r3, #1
 8006baa:	089b      	lsrpl	r3, r3, #2
 8006bac:	2001      	movmi	r0, #1
 8006bae:	6013      	strmi	r3, [r2, #0]
 8006bb0:	bf5c      	itt	pl
 8006bb2:	2002      	movpl	r0, #2
 8006bb4:	6013      	strpl	r3, [r2, #0]
 8006bb6:	4770      	bx	lr
 8006bb8:	b299      	uxth	r1, r3
 8006bba:	b909      	cbnz	r1, 8006bc0 <__lo0bits+0x2a>
 8006bbc:	2010      	movs	r0, #16
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	b2d9      	uxtb	r1, r3
 8006bc2:	b909      	cbnz	r1, 8006bc8 <__lo0bits+0x32>
 8006bc4:	3008      	adds	r0, #8
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	0719      	lsls	r1, r3, #28
 8006bca:	bf04      	itt	eq
 8006bcc:	091b      	lsreq	r3, r3, #4
 8006bce:	3004      	addeq	r0, #4
 8006bd0:	0799      	lsls	r1, r3, #30
 8006bd2:	bf04      	itt	eq
 8006bd4:	089b      	lsreq	r3, r3, #2
 8006bd6:	3002      	addeq	r0, #2
 8006bd8:	07d9      	lsls	r1, r3, #31
 8006bda:	d403      	bmi.n	8006be4 <__lo0bits+0x4e>
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f100 0001 	add.w	r0, r0, #1
 8006be2:	d003      	beq.n	8006bec <__lo0bits+0x56>
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4770      	bx	lr
 8006be8:	2000      	movs	r0, #0
 8006bea:	4770      	bx	lr
 8006bec:	2020      	movs	r0, #32
 8006bee:	4770      	bx	lr

08006bf0 <__i2b>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	f7ff febd 	bl	8006974 <_Balloc>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	b928      	cbnz	r0, 8006c0a <__i2b+0x1a>
 8006bfe:	f240 1145 	movw	r1, #325	@ 0x145
 8006c02:	4b04      	ldr	r3, [pc, #16]	@ (8006c14 <__i2b+0x24>)
 8006c04:	4804      	ldr	r0, [pc, #16]	@ (8006c18 <__i2b+0x28>)
 8006c06:	f001 ffb1 	bl	8008b6c <__assert_func>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	6144      	str	r4, [r0, #20]
 8006c0e:	6103      	str	r3, [r0, #16]
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	bf00      	nop
 8006c14:	08009c47 	.word	0x08009c47
 8006c18:	08009c58 	.word	0x08009c58

08006c1c <__multiply>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	4614      	mov	r4, r2
 8006c22:	690a      	ldr	r2, [r1, #16]
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	460f      	mov	r7, r1
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	bfa2      	ittt	ge
 8006c2c:	4623      	movge	r3, r4
 8006c2e:	460c      	movge	r4, r1
 8006c30:	461f      	movge	r7, r3
 8006c32:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c36:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	eb0a 0609 	add.w	r6, sl, r9
 8006c42:	42b3      	cmp	r3, r6
 8006c44:	b085      	sub	sp, #20
 8006c46:	bfb8      	it	lt
 8006c48:	3101      	addlt	r1, #1
 8006c4a:	f7ff fe93 	bl	8006974 <_Balloc>
 8006c4e:	b930      	cbnz	r0, 8006c5e <__multiply+0x42>
 8006c50:	4602      	mov	r2, r0
 8006c52:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c56:	4b43      	ldr	r3, [pc, #268]	@ (8006d64 <__multiply+0x148>)
 8006c58:	4843      	ldr	r0, [pc, #268]	@ (8006d68 <__multiply+0x14c>)
 8006c5a:	f001 ff87 	bl	8008b6c <__assert_func>
 8006c5e:	f100 0514 	add.w	r5, r0, #20
 8006c62:	462b      	mov	r3, r5
 8006c64:	2200      	movs	r2, #0
 8006c66:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c6a:	4543      	cmp	r3, r8
 8006c6c:	d321      	bcc.n	8006cb2 <__multiply+0x96>
 8006c6e:	f107 0114 	add.w	r1, r7, #20
 8006c72:	f104 0214 	add.w	r2, r4, #20
 8006c76:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c7a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	1b13      	subs	r3, r2, r4
 8006c82:	3b15      	subs	r3, #21
 8006c84:	f023 0303 	bic.w	r3, r3, #3
 8006c88:	3304      	adds	r3, #4
 8006c8a:	f104 0715 	add.w	r7, r4, #21
 8006c8e:	42ba      	cmp	r2, r7
 8006c90:	bf38      	it	cc
 8006c92:	2304      	movcc	r3, #4
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	9b02      	ldr	r3, [sp, #8]
 8006c98:	9103      	str	r1, [sp, #12]
 8006c9a:	428b      	cmp	r3, r1
 8006c9c:	d80c      	bhi.n	8006cb8 <__multiply+0x9c>
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	dd03      	ble.n	8006caa <__multiply+0x8e>
 8006ca2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d05a      	beq.n	8006d60 <__multiply+0x144>
 8006caa:	6106      	str	r6, [r0, #16]
 8006cac:	b005      	add	sp, #20
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	f843 2b04 	str.w	r2, [r3], #4
 8006cb6:	e7d8      	b.n	8006c6a <__multiply+0x4e>
 8006cb8:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cbc:	f1ba 0f00 	cmp.w	sl, #0
 8006cc0:	d023      	beq.n	8006d0a <__multiply+0xee>
 8006cc2:	46a9      	mov	r9, r5
 8006cc4:	f04f 0c00 	mov.w	ip, #0
 8006cc8:	f104 0e14 	add.w	lr, r4, #20
 8006ccc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cd0:	f8d9 3000 	ldr.w	r3, [r9]
 8006cd4:	fa1f fb87 	uxth.w	fp, r7
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cde:	4463      	add	r3, ip
 8006ce0:	f8d9 c000 	ldr.w	ip, [r9]
 8006ce4:	0c3f      	lsrs	r7, r7, #16
 8006ce6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cea:	fb0a c707 	mla	r7, sl, r7, ip
 8006cee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cf8:	4572      	cmp	r2, lr
 8006cfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cfe:	f849 3b04 	str.w	r3, [r9], #4
 8006d02:	d8e3      	bhi.n	8006ccc <__multiply+0xb0>
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	f845 c003 	str.w	ip, [r5, r3]
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	3104      	adds	r1, #4
 8006d0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d12:	f1b9 0f00 	cmp.w	r9, #0
 8006d16:	d021      	beq.n	8006d5c <__multiply+0x140>
 8006d18:	46ae      	mov	lr, r5
 8006d1a:	f04f 0a00 	mov.w	sl, #0
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	f104 0c14 	add.w	ip, r4, #20
 8006d24:	f8bc b000 	ldrh.w	fp, [ip]
 8006d28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	fb09 770b 	mla	r7, r9, fp, r7
 8006d32:	4457      	add	r7, sl
 8006d34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d38:	f84e 3b04 	str.w	r3, [lr], #4
 8006d3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d44:	f8be 3000 	ldrh.w	r3, [lr]
 8006d48:	4562      	cmp	r2, ip
 8006d4a:	fb09 330a 	mla	r3, r9, sl, r3
 8006d4e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d56:	d8e5      	bhi.n	8006d24 <__multiply+0x108>
 8006d58:	9f01      	ldr	r7, [sp, #4]
 8006d5a:	51eb      	str	r3, [r5, r7]
 8006d5c:	3504      	adds	r5, #4
 8006d5e:	e79a      	b.n	8006c96 <__multiply+0x7a>
 8006d60:	3e01      	subs	r6, #1
 8006d62:	e79c      	b.n	8006c9e <__multiply+0x82>
 8006d64:	08009c47 	.word	0x08009c47
 8006d68:	08009c58 	.word	0x08009c58

08006d6c <__pow5mult>:
 8006d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4615      	mov	r5, r2
 8006d72:	f012 0203 	ands.w	r2, r2, #3
 8006d76:	4607      	mov	r7, r0
 8006d78:	460e      	mov	r6, r1
 8006d7a:	d007      	beq.n	8006d8c <__pow5mult+0x20>
 8006d7c:	4c25      	ldr	r4, [pc, #148]	@ (8006e14 <__pow5mult+0xa8>)
 8006d7e:	3a01      	subs	r2, #1
 8006d80:	2300      	movs	r3, #0
 8006d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d86:	f7ff fe57 	bl	8006a38 <__multadd>
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	10ad      	asrs	r5, r5, #2
 8006d8e:	d03d      	beq.n	8006e0c <__pow5mult+0xa0>
 8006d90:	69fc      	ldr	r4, [r7, #28]
 8006d92:	b97c      	cbnz	r4, 8006db4 <__pow5mult+0x48>
 8006d94:	2010      	movs	r0, #16
 8006d96:	f7ff fd37 	bl	8006808 <malloc>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	61f8      	str	r0, [r7, #28]
 8006d9e:	b928      	cbnz	r0, 8006dac <__pow5mult+0x40>
 8006da0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006da4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <__pow5mult+0xac>)
 8006da6:	481d      	ldr	r0, [pc, #116]	@ (8006e1c <__pow5mult+0xb0>)
 8006da8:	f001 fee0 	bl	8008b6c <__assert_func>
 8006dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006db0:	6004      	str	r4, [r0, #0]
 8006db2:	60c4      	str	r4, [r0, #12]
 8006db4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006db8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dbc:	b94c      	cbnz	r4, 8006dd2 <__pow5mult+0x66>
 8006dbe:	f240 2171 	movw	r1, #625	@ 0x271
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f7ff ff14 	bl	8006bf0 <__i2b>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	f04f 0900 	mov.w	r9, #0
 8006dd6:	07eb      	lsls	r3, r5, #31
 8006dd8:	d50a      	bpl.n	8006df0 <__pow5mult+0x84>
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff ff1c 	bl	8006c1c <__multiply>
 8006de4:	4680      	mov	r8, r0
 8006de6:	4631      	mov	r1, r6
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7ff fe03 	bl	80069f4 <_Bfree>
 8006dee:	4646      	mov	r6, r8
 8006df0:	106d      	asrs	r5, r5, #1
 8006df2:	d00b      	beq.n	8006e0c <__pow5mult+0xa0>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	b938      	cbnz	r0, 8006e08 <__pow5mult+0x9c>
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff ff0d 	bl	8006c1c <__multiply>
 8006e02:	6020      	str	r0, [r4, #0]
 8006e04:	f8c0 9000 	str.w	r9, [r0]
 8006e08:	4604      	mov	r4, r0
 8006e0a:	e7e4      	b.n	8006dd6 <__pow5mult+0x6a>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e12:	bf00      	nop
 8006e14:	08009cb4 	.word	0x08009cb4
 8006e18:	08009bd8 	.word	0x08009bd8
 8006e1c:	08009c58 	.word	0x08009c58

08006e20 <__lshift>:
 8006e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e24:	460c      	mov	r4, r1
 8006e26:	4607      	mov	r7, r0
 8006e28:	4691      	mov	r9, r2
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	6849      	ldr	r1, [r1, #4]
 8006e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e38:	f108 0601 	add.w	r6, r8, #1
 8006e3c:	42b3      	cmp	r3, r6
 8006e3e:	db0b      	blt.n	8006e58 <__lshift+0x38>
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7ff fd97 	bl	8006974 <_Balloc>
 8006e46:	4605      	mov	r5, r0
 8006e48:	b948      	cbnz	r0, 8006e5e <__lshift+0x3e>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e50:	4b27      	ldr	r3, [pc, #156]	@ (8006ef0 <__lshift+0xd0>)
 8006e52:	4828      	ldr	r0, [pc, #160]	@ (8006ef4 <__lshift+0xd4>)
 8006e54:	f001 fe8a 	bl	8008b6c <__assert_func>
 8006e58:	3101      	adds	r1, #1
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	e7ee      	b.n	8006e3c <__lshift+0x1c>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f100 0114 	add.w	r1, r0, #20
 8006e64:	f100 0210 	add.w	r2, r0, #16
 8006e68:	4618      	mov	r0, r3
 8006e6a:	4553      	cmp	r3, sl
 8006e6c:	db33      	blt.n	8006ed6 <__lshift+0xb6>
 8006e6e:	6920      	ldr	r0, [r4, #16]
 8006e70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e74:	f104 0314 	add.w	r3, r4, #20
 8006e78:	f019 091f 	ands.w	r9, r9, #31
 8006e7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e84:	d02b      	beq.n	8006ede <__lshift+0xbe>
 8006e86:	468a      	mov	sl, r1
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	fa00 f009 	lsl.w	r0, r0, r9
 8006e94:	4310      	orrs	r0, r2
 8006e96:	f84a 0b04 	str.w	r0, [sl], #4
 8006e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9e:	459c      	cmp	ip, r3
 8006ea0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ea4:	d8f3      	bhi.n	8006e8e <__lshift+0x6e>
 8006ea6:	ebac 0304 	sub.w	r3, ip, r4
 8006eaa:	3b15      	subs	r3, #21
 8006eac:	f023 0303 	bic.w	r3, r3, #3
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	f104 0015 	add.w	r0, r4, #21
 8006eb6:	4584      	cmp	ip, r0
 8006eb8:	bf38      	it	cc
 8006eba:	2304      	movcc	r3, #4
 8006ebc:	50ca      	str	r2, [r1, r3]
 8006ebe:	b10a      	cbz	r2, 8006ec4 <__lshift+0xa4>
 8006ec0:	f108 0602 	add.w	r6, r8, #2
 8006ec4:	3e01      	subs	r6, #1
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	4621      	mov	r1, r4
 8006eca:	612e      	str	r6, [r5, #16]
 8006ecc:	f7ff fd92 	bl	80069f4 <_Bfree>
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eda:	3301      	adds	r3, #1
 8006edc:	e7c5      	b.n	8006e6a <__lshift+0x4a>
 8006ede:	3904      	subs	r1, #4
 8006ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ee4:	459c      	cmp	ip, r3
 8006ee6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eea:	d8f9      	bhi.n	8006ee0 <__lshift+0xc0>
 8006eec:	e7ea      	b.n	8006ec4 <__lshift+0xa4>
 8006eee:	bf00      	nop
 8006ef0:	08009c47 	.word	0x08009c47
 8006ef4:	08009c58 	.word	0x08009c58

08006ef8 <__mcmp>:
 8006ef8:	4603      	mov	r3, r0
 8006efa:	690a      	ldr	r2, [r1, #16]
 8006efc:	6900      	ldr	r0, [r0, #16]
 8006efe:	b530      	push	{r4, r5, lr}
 8006f00:	1a80      	subs	r0, r0, r2
 8006f02:	d10e      	bne.n	8006f22 <__mcmp+0x2a>
 8006f04:	3314      	adds	r3, #20
 8006f06:	3114      	adds	r1, #20
 8006f08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f18:	4295      	cmp	r5, r2
 8006f1a:	d003      	beq.n	8006f24 <__mcmp+0x2c>
 8006f1c:	d205      	bcs.n	8006f2a <__mcmp+0x32>
 8006f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f22:	bd30      	pop	{r4, r5, pc}
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d3f3      	bcc.n	8006f10 <__mcmp+0x18>
 8006f28:	e7fb      	b.n	8006f22 <__mcmp+0x2a>
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	e7f9      	b.n	8006f22 <__mcmp+0x2a>
	...

08006f30 <__mdiff>:
 8006f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	4689      	mov	r9, r1
 8006f36:	4606      	mov	r6, r0
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4648      	mov	r0, r9
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	f7ff ffdb 	bl	8006ef8 <__mcmp>
 8006f42:	1e05      	subs	r5, r0, #0
 8006f44:	d112      	bne.n	8006f6c <__mdiff+0x3c>
 8006f46:	4629      	mov	r1, r5
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7ff fd13 	bl	8006974 <_Balloc>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	b928      	cbnz	r0, 8006f5e <__mdiff+0x2e>
 8006f52:	f240 2137 	movw	r1, #567	@ 0x237
 8006f56:	4b3e      	ldr	r3, [pc, #248]	@ (8007050 <__mdiff+0x120>)
 8006f58:	483e      	ldr	r0, [pc, #248]	@ (8007054 <__mdiff+0x124>)
 8006f5a:	f001 fe07 	bl	8008b6c <__assert_func>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f64:	4610      	mov	r0, r2
 8006f66:	b003      	add	sp, #12
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	bfbc      	itt	lt
 8006f6e:	464b      	movlt	r3, r9
 8006f70:	46a1      	movlt	r9, r4
 8006f72:	4630      	mov	r0, r6
 8006f74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f78:	bfba      	itte	lt
 8006f7a:	461c      	movlt	r4, r3
 8006f7c:	2501      	movlt	r5, #1
 8006f7e:	2500      	movge	r5, #0
 8006f80:	f7ff fcf8 	bl	8006974 <_Balloc>
 8006f84:	4602      	mov	r2, r0
 8006f86:	b918      	cbnz	r0, 8006f90 <__mdiff+0x60>
 8006f88:	f240 2145 	movw	r1, #581	@ 0x245
 8006f8c:	4b30      	ldr	r3, [pc, #192]	@ (8007050 <__mdiff+0x120>)
 8006f8e:	e7e3      	b.n	8006f58 <__mdiff+0x28>
 8006f90:	f100 0b14 	add.w	fp, r0, #20
 8006f94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f98:	f109 0310 	add.w	r3, r9, #16
 8006f9c:	60c5      	str	r5, [r0, #12]
 8006f9e:	f04f 0c00 	mov.w	ip, #0
 8006fa2:	f109 0514 	add.w	r5, r9, #20
 8006fa6:	46d9      	mov	r9, fp
 8006fa8:	6926      	ldr	r6, [r4, #16]
 8006faa:	f104 0e14 	add.w	lr, r4, #20
 8006fae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fb2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	9b01      	ldr	r3, [sp, #4]
 8006fba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fc2:	b281      	uxth	r1, r0
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	fa1f f38a 	uxth.w	r3, sl
 8006fca:	1a5b      	subs	r3, r3, r1
 8006fcc:	0c00      	lsrs	r0, r0, #16
 8006fce:	4463      	add	r3, ip
 8006fd0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fd4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fde:	4576      	cmp	r6, lr
 8006fe0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fe4:	f849 3b04 	str.w	r3, [r9], #4
 8006fe8:	d8e6      	bhi.n	8006fb8 <__mdiff+0x88>
 8006fea:	1b33      	subs	r3, r6, r4
 8006fec:	3b15      	subs	r3, #21
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	3415      	adds	r4, #21
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	bf38      	it	cc
 8006ffa:	2304      	movcc	r3, #4
 8006ffc:	441d      	add	r5, r3
 8006ffe:	445b      	add	r3, fp
 8007000:	461e      	mov	r6, r3
 8007002:	462c      	mov	r4, r5
 8007004:	4544      	cmp	r4, r8
 8007006:	d30e      	bcc.n	8007026 <__mdiff+0xf6>
 8007008:	f108 0103 	add.w	r1, r8, #3
 800700c:	1b49      	subs	r1, r1, r5
 800700e:	f021 0103 	bic.w	r1, r1, #3
 8007012:	3d03      	subs	r5, #3
 8007014:	45a8      	cmp	r8, r5
 8007016:	bf38      	it	cc
 8007018:	2100      	movcc	r1, #0
 800701a:	440b      	add	r3, r1
 800701c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007020:	b199      	cbz	r1, 800704a <__mdiff+0x11a>
 8007022:	6117      	str	r7, [r2, #16]
 8007024:	e79e      	b.n	8006f64 <__mdiff+0x34>
 8007026:	46e6      	mov	lr, ip
 8007028:	f854 1b04 	ldr.w	r1, [r4], #4
 800702c:	fa1f fc81 	uxth.w	ip, r1
 8007030:	44f4      	add	ip, lr
 8007032:	0c08      	lsrs	r0, r1, #16
 8007034:	4471      	add	r1, lr
 8007036:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800703a:	b289      	uxth	r1, r1
 800703c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007040:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007044:	f846 1b04 	str.w	r1, [r6], #4
 8007048:	e7dc      	b.n	8007004 <__mdiff+0xd4>
 800704a:	3f01      	subs	r7, #1
 800704c:	e7e6      	b.n	800701c <__mdiff+0xec>
 800704e:	bf00      	nop
 8007050:	08009c47 	.word	0x08009c47
 8007054:	08009c58 	.word	0x08009c58

08007058 <__ulp>:
 8007058:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <__ulp+0x3c>)
 800705a:	400b      	ands	r3, r1
 800705c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc08      	bgt.n	8007076 <__ulp+0x1e>
 8007064:	425b      	negs	r3, r3
 8007066:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800706a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800706e:	da04      	bge.n	800707a <__ulp+0x22>
 8007070:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007074:	4113      	asrs	r3, r2
 8007076:	2200      	movs	r2, #0
 8007078:	e008      	b.n	800708c <__ulp+0x34>
 800707a:	f1a2 0314 	sub.w	r3, r2, #20
 800707e:	2b1e      	cmp	r3, #30
 8007080:	bfd6      	itet	le
 8007082:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007086:	2201      	movgt	r2, #1
 8007088:	40da      	lsrle	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	7ff00000 	.word	0x7ff00000

08007098 <__b2d>:
 8007098:	6902      	ldr	r2, [r0, #16]
 800709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709c:	f100 0614 	add.w	r6, r0, #20
 80070a0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80070a4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80070a8:	4f1e      	ldr	r7, [pc, #120]	@ (8007124 <__b2d+0x8c>)
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff fd54 	bl	8006b58 <__hi0bits>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f1c0 0020 	rsb	r0, r0, #32
 80070b6:	2b0a      	cmp	r3, #10
 80070b8:	f1a2 0504 	sub.w	r5, r2, #4
 80070bc:	6008      	str	r0, [r1, #0]
 80070be:	dc12      	bgt.n	80070e6 <__b2d+0x4e>
 80070c0:	42ae      	cmp	r6, r5
 80070c2:	bf2c      	ite	cs
 80070c4:	2200      	movcs	r2, #0
 80070c6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070ca:	f1c3 0c0b 	rsb	ip, r3, #11
 80070ce:	3315      	adds	r3, #21
 80070d0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80070d4:	fa04 f303 	lsl.w	r3, r4, r3
 80070d8:	fa22 f20c 	lsr.w	r2, r2, ip
 80070dc:	ea4e 0107 	orr.w	r1, lr, r7
 80070e0:	431a      	orrs	r2, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e6:	42ae      	cmp	r6, r5
 80070e8:	bf36      	itet	cc
 80070ea:	f1a2 0508 	subcc.w	r5, r2, #8
 80070ee:	2200      	movcs	r2, #0
 80070f0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070f4:	3b0b      	subs	r3, #11
 80070f6:	d012      	beq.n	800711e <__b2d+0x86>
 80070f8:	f1c3 0720 	rsb	r7, r3, #32
 80070fc:	fa22 f107 	lsr.w	r1, r2, r7
 8007100:	409c      	lsls	r4, r3
 8007102:	430c      	orrs	r4, r1
 8007104:	42b5      	cmp	r5, r6
 8007106:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800710a:	bf94      	ite	ls
 800710c:	2400      	movls	r4, #0
 800710e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007112:	409a      	lsls	r2, r3
 8007114:	40fc      	lsrs	r4, r7
 8007116:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800711a:	4322      	orrs	r2, r4
 800711c:	e7e1      	b.n	80070e2 <__b2d+0x4a>
 800711e:	ea44 0107 	orr.w	r1, r4, r7
 8007122:	e7de      	b.n	80070e2 <__b2d+0x4a>
 8007124:	3ff00000 	.word	0x3ff00000

08007128 <__d2b>:
 8007128:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800712c:	2101      	movs	r1, #1
 800712e:	4690      	mov	r8, r2
 8007130:	4699      	mov	r9, r3
 8007132:	9e08      	ldr	r6, [sp, #32]
 8007134:	f7ff fc1e 	bl	8006974 <_Balloc>
 8007138:	4604      	mov	r4, r0
 800713a:	b930      	cbnz	r0, 800714a <__d2b+0x22>
 800713c:	4602      	mov	r2, r0
 800713e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007142:	4b23      	ldr	r3, [pc, #140]	@ (80071d0 <__d2b+0xa8>)
 8007144:	4823      	ldr	r0, [pc, #140]	@ (80071d4 <__d2b+0xac>)
 8007146:	f001 fd11 	bl	8008b6c <__assert_func>
 800714a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800714e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007152:	b10d      	cbz	r5, 8007158 <__d2b+0x30>
 8007154:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	f1b8 0300 	subs.w	r3, r8, #0
 800715e:	d024      	beq.n	80071aa <__d2b+0x82>
 8007160:	4668      	mov	r0, sp
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	f7ff fd17 	bl	8006b96 <__lo0bits>
 8007168:	e9dd 1200 	ldrd	r1, r2, [sp]
 800716c:	b1d8      	cbz	r0, 80071a6 <__d2b+0x7e>
 800716e:	f1c0 0320 	rsb	r3, r0, #32
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	430b      	orrs	r3, r1
 8007178:	40c2      	lsrs	r2, r0
 800717a:	6163      	str	r3, [r4, #20]
 800717c:	9201      	str	r2, [sp, #4]
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf0c      	ite	eq
 8007184:	2201      	moveq	r2, #1
 8007186:	2202      	movne	r2, #2
 8007188:	61a3      	str	r3, [r4, #24]
 800718a:	6122      	str	r2, [r4, #16]
 800718c:	b1ad      	cbz	r5, 80071ba <__d2b+0x92>
 800718e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007192:	4405      	add	r5, r0
 8007194:	6035      	str	r5, [r6, #0]
 8007196:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	6018      	str	r0, [r3, #0]
 800719e:	4620      	mov	r0, r4
 80071a0:	b002      	add	sp, #8
 80071a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80071a6:	6161      	str	r1, [r4, #20]
 80071a8:	e7e9      	b.n	800717e <__d2b+0x56>
 80071aa:	a801      	add	r0, sp, #4
 80071ac:	f7ff fcf3 	bl	8006b96 <__lo0bits>
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	6163      	str	r3, [r4, #20]
 80071b6:	3020      	adds	r0, #32
 80071b8:	e7e7      	b.n	800718a <__d2b+0x62>
 80071ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071c2:	6030      	str	r0, [r6, #0]
 80071c4:	6918      	ldr	r0, [r3, #16]
 80071c6:	f7ff fcc7 	bl	8006b58 <__hi0bits>
 80071ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071ce:	e7e4      	b.n	800719a <__d2b+0x72>
 80071d0:	08009c47 	.word	0x08009c47
 80071d4:	08009c58 	.word	0x08009c58

080071d8 <__ratio>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	b085      	sub	sp, #20
 80071de:	e9cd 1000 	strd	r1, r0, [sp]
 80071e2:	a902      	add	r1, sp, #8
 80071e4:	f7ff ff58 	bl	8007098 <__b2d>
 80071e8:	468b      	mov	fp, r1
 80071ea:	4606      	mov	r6, r0
 80071ec:	460f      	mov	r7, r1
 80071ee:	9800      	ldr	r0, [sp, #0]
 80071f0:	a903      	add	r1, sp, #12
 80071f2:	f7ff ff51 	bl	8007098 <__b2d>
 80071f6:	460d      	mov	r5, r1
 80071f8:	9b01      	ldr	r3, [sp, #4]
 80071fa:	4689      	mov	r9, r1
 80071fc:	6919      	ldr	r1, [r3, #16]
 80071fe:	9b00      	ldr	r3, [sp, #0]
 8007200:	4604      	mov	r4, r0
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4630      	mov	r0, r6
 8007206:	1ac9      	subs	r1, r1, r3
 8007208:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007212:	2b00      	cmp	r3, #0
 8007214:	bfcd      	iteet	gt
 8007216:	463a      	movgt	r2, r7
 8007218:	462a      	movle	r2, r5
 800721a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800721e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007222:	bfd8      	it	le
 8007224:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007228:	464b      	mov	r3, r9
 800722a:	4622      	mov	r2, r4
 800722c:	4659      	mov	r1, fp
 800722e:	f7f9 fae9 	bl	8000804 <__aeabi_ddiv>
 8007232:	b005      	add	sp, #20
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007238 <__copybits>:
 8007238:	3901      	subs	r1, #1
 800723a:	b570      	push	{r4, r5, r6, lr}
 800723c:	1149      	asrs	r1, r1, #5
 800723e:	6914      	ldr	r4, [r2, #16]
 8007240:	3101      	adds	r1, #1
 8007242:	f102 0314 	add.w	r3, r2, #20
 8007246:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800724a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800724e:	1f05      	subs	r5, r0, #4
 8007250:	42a3      	cmp	r3, r4
 8007252:	d30c      	bcc.n	800726e <__copybits+0x36>
 8007254:	1aa3      	subs	r3, r4, r2
 8007256:	3b11      	subs	r3, #17
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	3211      	adds	r2, #17
 800725e:	42a2      	cmp	r2, r4
 8007260:	bf88      	it	hi
 8007262:	2300      	movhi	r3, #0
 8007264:	4418      	add	r0, r3
 8007266:	2300      	movs	r3, #0
 8007268:	4288      	cmp	r0, r1
 800726a:	d305      	bcc.n	8007278 <__copybits+0x40>
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007272:	f845 6f04 	str.w	r6, [r5, #4]!
 8007276:	e7eb      	b.n	8007250 <__copybits+0x18>
 8007278:	f840 3b04 	str.w	r3, [r0], #4
 800727c:	e7f4      	b.n	8007268 <__copybits+0x30>

0800727e <__any_on>:
 800727e:	f100 0214 	add.w	r2, r0, #20
 8007282:	6900      	ldr	r0, [r0, #16]
 8007284:	114b      	asrs	r3, r1, #5
 8007286:	4298      	cmp	r0, r3
 8007288:	b510      	push	{r4, lr}
 800728a:	db11      	blt.n	80072b0 <__any_on+0x32>
 800728c:	dd0a      	ble.n	80072a4 <__any_on+0x26>
 800728e:	f011 011f 	ands.w	r1, r1, #31
 8007292:	d007      	beq.n	80072a4 <__any_on+0x26>
 8007294:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007298:	fa24 f001 	lsr.w	r0, r4, r1
 800729c:	fa00 f101 	lsl.w	r1, r0, r1
 80072a0:	428c      	cmp	r4, r1
 80072a2:	d10b      	bne.n	80072bc <__any_on+0x3e>
 80072a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d803      	bhi.n	80072b4 <__any_on+0x36>
 80072ac:	2000      	movs	r0, #0
 80072ae:	bd10      	pop	{r4, pc}
 80072b0:	4603      	mov	r3, r0
 80072b2:	e7f7      	b.n	80072a4 <__any_on+0x26>
 80072b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d0f5      	beq.n	80072a8 <__any_on+0x2a>
 80072bc:	2001      	movs	r0, #1
 80072be:	e7f6      	b.n	80072ae <__any_on+0x30>

080072c0 <sulp>:
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	460f      	mov	r7, r1
 80072c6:	4690      	mov	r8, r2
 80072c8:	f7ff fec6 	bl	8007058 <__ulp>
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f1b8 0f00 	cmp.w	r8, #0
 80072d4:	d011      	beq.n	80072fa <sulp+0x3a>
 80072d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80072da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dd0b      	ble.n	80072fa <sulp+0x3a>
 80072e2:	2400      	movs	r4, #0
 80072e4:	051b      	lsls	r3, r3, #20
 80072e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80072ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	f7f9 f95d 	bl	80005b0 <__aeabi_dmul>
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007302:	0000      	movs	r0, r0
 8007304:	0000      	movs	r0, r0
	...

08007308 <_strtod_l>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b09f      	sub	sp, #124	@ 0x7c
 800730e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007310:	2200      	movs	r2, #0
 8007312:	460c      	mov	r4, r1
 8007314:	921a      	str	r2, [sp, #104]	@ 0x68
 8007316:	f04f 0a00 	mov.w	sl, #0
 800731a:	f04f 0b00 	mov.w	fp, #0
 800731e:	460a      	mov	r2, r1
 8007320:	9005      	str	r0, [sp, #20]
 8007322:	9219      	str	r2, [sp, #100]	@ 0x64
 8007324:	7811      	ldrb	r1, [r2, #0]
 8007326:	292b      	cmp	r1, #43	@ 0x2b
 8007328:	d048      	beq.n	80073bc <_strtod_l+0xb4>
 800732a:	d836      	bhi.n	800739a <_strtod_l+0x92>
 800732c:	290d      	cmp	r1, #13
 800732e:	d830      	bhi.n	8007392 <_strtod_l+0x8a>
 8007330:	2908      	cmp	r1, #8
 8007332:	d830      	bhi.n	8007396 <_strtod_l+0x8e>
 8007334:	2900      	cmp	r1, #0
 8007336:	d039      	beq.n	80073ac <_strtod_l+0xa4>
 8007338:	2200      	movs	r2, #0
 800733a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800733c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800733e:	782a      	ldrb	r2, [r5, #0]
 8007340:	2a30      	cmp	r2, #48	@ 0x30
 8007342:	f040 80b1 	bne.w	80074a8 <_strtod_l+0x1a0>
 8007346:	786a      	ldrb	r2, [r5, #1]
 8007348:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800734c:	2a58      	cmp	r2, #88	@ 0x58
 800734e:	d16c      	bne.n	800742a <_strtod_l+0x122>
 8007350:	9302      	str	r3, [sp, #8]
 8007352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007354:	4a8e      	ldr	r2, [pc, #568]	@ (8007590 <_strtod_l+0x288>)
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	ab1a      	add	r3, sp, #104	@ 0x68
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	9805      	ldr	r0, [sp, #20]
 800735e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007360:	a919      	add	r1, sp, #100	@ 0x64
 8007362:	f001 fc9d 	bl	8008ca0 <__gethex>
 8007366:	f010 060f 	ands.w	r6, r0, #15
 800736a:	4604      	mov	r4, r0
 800736c:	d005      	beq.n	800737a <_strtod_l+0x72>
 800736e:	2e06      	cmp	r6, #6
 8007370:	d126      	bne.n	80073c0 <_strtod_l+0xb8>
 8007372:	2300      	movs	r3, #0
 8007374:	3501      	adds	r5, #1
 8007376:	9519      	str	r5, [sp, #100]	@ 0x64
 8007378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800737a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8584 	bne.w	8007e8a <_strtod_l+0xb82>
 8007382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007384:	b1bb      	cbz	r3, 80073b6 <_strtod_l+0xae>
 8007386:	4650      	mov	r0, sl
 8007388:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800738c:	b01f      	add	sp, #124	@ 0x7c
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	2920      	cmp	r1, #32
 8007394:	d1d0      	bne.n	8007338 <_strtod_l+0x30>
 8007396:	3201      	adds	r2, #1
 8007398:	e7c3      	b.n	8007322 <_strtod_l+0x1a>
 800739a:	292d      	cmp	r1, #45	@ 0x2d
 800739c:	d1cc      	bne.n	8007338 <_strtod_l+0x30>
 800739e:	2101      	movs	r1, #1
 80073a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073a2:	1c51      	adds	r1, r2, #1
 80073a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80073a6:	7852      	ldrb	r2, [r2, #1]
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d1c7      	bne.n	800733c <_strtod_l+0x34>
 80073ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 8568 	bne.w	8007e86 <_strtod_l+0xb7e>
 80073b6:	4650      	mov	r0, sl
 80073b8:	4659      	mov	r1, fp
 80073ba:	e7e7      	b.n	800738c <_strtod_l+0x84>
 80073bc:	2100      	movs	r1, #0
 80073be:	e7ef      	b.n	80073a0 <_strtod_l+0x98>
 80073c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073c2:	b13a      	cbz	r2, 80073d4 <_strtod_l+0xcc>
 80073c4:	2135      	movs	r1, #53	@ 0x35
 80073c6:	a81c      	add	r0, sp, #112	@ 0x70
 80073c8:	f7ff ff36 	bl	8007238 <__copybits>
 80073cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073ce:	9805      	ldr	r0, [sp, #20]
 80073d0:	f7ff fb10 	bl	80069f4 <_Bfree>
 80073d4:	3e01      	subs	r6, #1
 80073d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073d8:	2e04      	cmp	r6, #4
 80073da:	d806      	bhi.n	80073ea <_strtod_l+0xe2>
 80073dc:	e8df f006 	tbb	[pc, r6]
 80073e0:	201d0314 	.word	0x201d0314
 80073e4:	14          	.byte	0x14
 80073e5:	00          	.byte	0x00
 80073e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80073ea:	05e1      	lsls	r1, r4, #23
 80073ec:	bf48      	it	mi
 80073ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80073f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073f6:	0d1b      	lsrs	r3, r3, #20
 80073f8:	051b      	lsls	r3, r3, #20
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1bd      	bne.n	800737a <_strtod_l+0x72>
 80073fe:	f7fe fb29 	bl	8005a54 <__errno>
 8007402:	2322      	movs	r3, #34	@ 0x22
 8007404:	6003      	str	r3, [r0, #0]
 8007406:	e7b8      	b.n	800737a <_strtod_l+0x72>
 8007408:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800740c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007410:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007414:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007418:	e7e7      	b.n	80073ea <_strtod_l+0xe2>
 800741a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007594 <_strtod_l+0x28c>
 800741e:	e7e4      	b.n	80073ea <_strtod_l+0xe2>
 8007420:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007424:	f04f 3aff 	mov.w	sl, #4294967295
 8007428:	e7df      	b.n	80073ea <_strtod_l+0xe2>
 800742a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b30      	cmp	r3, #48	@ 0x30
 8007434:	d0f9      	beq.n	800742a <_strtod_l+0x122>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d09f      	beq.n	800737a <_strtod_l+0x72>
 800743a:	2301      	movs	r3, #1
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007440:	220a      	movs	r2, #10
 8007442:	930c      	str	r3, [sp, #48]	@ 0x30
 8007444:	2300      	movs	r3, #0
 8007446:	461f      	mov	r7, r3
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	930a      	str	r3, [sp, #40]	@ 0x28
 800744c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800744e:	7805      	ldrb	r5, [r0, #0]
 8007450:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	2909      	cmp	r1, #9
 8007458:	d928      	bls.n	80074ac <_strtod_l+0x1a4>
 800745a:	2201      	movs	r2, #1
 800745c:	494e      	ldr	r1, [pc, #312]	@ (8007598 <_strtod_l+0x290>)
 800745e:	f001 fb4e 	bl	8008afe <strncmp>
 8007462:	2800      	cmp	r0, #0
 8007464:	d032      	beq.n	80074cc <_strtod_l+0x1c4>
 8007466:	2000      	movs	r0, #0
 8007468:	462a      	mov	r2, r5
 800746a:	4681      	mov	r9, r0
 800746c:	463d      	mov	r5, r7
 800746e:	4603      	mov	r3, r0
 8007470:	2a65      	cmp	r2, #101	@ 0x65
 8007472:	d001      	beq.n	8007478 <_strtod_l+0x170>
 8007474:	2a45      	cmp	r2, #69	@ 0x45
 8007476:	d114      	bne.n	80074a2 <_strtod_l+0x19a>
 8007478:	b91d      	cbnz	r5, 8007482 <_strtod_l+0x17a>
 800747a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800747c:	4302      	orrs	r2, r0
 800747e:	d095      	beq.n	80073ac <_strtod_l+0xa4>
 8007480:	2500      	movs	r5, #0
 8007482:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007484:	1c62      	adds	r2, r4, #1
 8007486:	9219      	str	r2, [sp, #100]	@ 0x64
 8007488:	7862      	ldrb	r2, [r4, #1]
 800748a:	2a2b      	cmp	r2, #43	@ 0x2b
 800748c:	d077      	beq.n	800757e <_strtod_l+0x276>
 800748e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007490:	d07b      	beq.n	800758a <_strtod_l+0x282>
 8007492:	f04f 0c00 	mov.w	ip, #0
 8007496:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800749a:	2909      	cmp	r1, #9
 800749c:	f240 8082 	bls.w	80075a4 <_strtod_l+0x29c>
 80074a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	e0a2      	b.n	80075ee <_strtod_l+0x2e6>
 80074a8:	2300      	movs	r3, #0
 80074aa:	e7c7      	b.n	800743c <_strtod_l+0x134>
 80074ac:	2f08      	cmp	r7, #8
 80074ae:	bfd5      	itete	le
 80074b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80074b2:	9908      	ldrgt	r1, [sp, #32]
 80074b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80074b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074bc:	f100 0001 	add.w	r0, r0, #1
 80074c0:	bfd4      	ite	le
 80074c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80074c4:	9308      	strgt	r3, [sp, #32]
 80074c6:	3701      	adds	r7, #1
 80074c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80074ca:	e7bf      	b.n	800744c <_strtod_l+0x144>
 80074cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80074d2:	785a      	ldrb	r2, [r3, #1]
 80074d4:	b37f      	cbz	r7, 8007536 <_strtod_l+0x22e>
 80074d6:	4681      	mov	r9, r0
 80074d8:	463d      	mov	r5, r7
 80074da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d912      	bls.n	8007508 <_strtod_l+0x200>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7c4      	b.n	8007470 <_strtod_l+0x168>
 80074e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074e8:	3001      	adds	r0, #1
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80074ee:	785a      	ldrb	r2, [r3, #1]
 80074f0:	2a30      	cmp	r2, #48	@ 0x30
 80074f2:	d0f8      	beq.n	80074e6 <_strtod_l+0x1de>
 80074f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	f200 84cb 	bhi.w	8007e94 <_strtod_l+0xb8c>
 80074fe:	4681      	mov	r9, r0
 8007500:	2000      	movs	r0, #0
 8007502:	4605      	mov	r5, r0
 8007504:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007506:	930c      	str	r3, [sp, #48]	@ 0x30
 8007508:	3a30      	subs	r2, #48	@ 0x30
 800750a:	f100 0301 	add.w	r3, r0, #1
 800750e:	d02a      	beq.n	8007566 <_strtod_l+0x25e>
 8007510:	4499      	add	r9, r3
 8007512:	210a      	movs	r1, #10
 8007514:	462b      	mov	r3, r5
 8007516:	eb00 0c05 	add.w	ip, r0, r5
 800751a:	4563      	cmp	r3, ip
 800751c:	d10d      	bne.n	800753a <_strtod_l+0x232>
 800751e:	1c69      	adds	r1, r5, #1
 8007520:	4401      	add	r1, r0
 8007522:	4428      	add	r0, r5
 8007524:	2808      	cmp	r0, #8
 8007526:	dc16      	bgt.n	8007556 <_strtod_l+0x24e>
 8007528:	230a      	movs	r3, #10
 800752a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800752c:	fb03 2300 	mla	r3, r3, r0, r2
 8007530:	930a      	str	r3, [sp, #40]	@ 0x28
 8007532:	2300      	movs	r3, #0
 8007534:	e018      	b.n	8007568 <_strtod_l+0x260>
 8007536:	4638      	mov	r0, r7
 8007538:	e7da      	b.n	80074f0 <_strtod_l+0x1e8>
 800753a:	2b08      	cmp	r3, #8
 800753c:	f103 0301 	add.w	r3, r3, #1
 8007540:	dc03      	bgt.n	800754a <_strtod_l+0x242>
 8007542:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007544:	434e      	muls	r6, r1
 8007546:	960a      	str	r6, [sp, #40]	@ 0x28
 8007548:	e7e7      	b.n	800751a <_strtod_l+0x212>
 800754a:	2b10      	cmp	r3, #16
 800754c:	bfde      	ittt	le
 800754e:	9e08      	ldrle	r6, [sp, #32]
 8007550:	434e      	mulle	r6, r1
 8007552:	9608      	strle	r6, [sp, #32]
 8007554:	e7e1      	b.n	800751a <_strtod_l+0x212>
 8007556:	280f      	cmp	r0, #15
 8007558:	dceb      	bgt.n	8007532 <_strtod_l+0x22a>
 800755a:	230a      	movs	r3, #10
 800755c:	9808      	ldr	r0, [sp, #32]
 800755e:	fb03 2300 	mla	r3, r3, r0, r2
 8007562:	9308      	str	r3, [sp, #32]
 8007564:	e7e5      	b.n	8007532 <_strtod_l+0x22a>
 8007566:	4629      	mov	r1, r5
 8007568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800756a:	460d      	mov	r5, r1
 800756c:	1c50      	adds	r0, r2, #1
 800756e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007570:	7852      	ldrb	r2, [r2, #1]
 8007572:	4618      	mov	r0, r3
 8007574:	e7b1      	b.n	80074da <_strtod_l+0x1d2>
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	2301      	movs	r3, #1
 800757c:	e77d      	b.n	800747a <_strtod_l+0x172>
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	1ca2      	adds	r2, r4, #2
 8007584:	9219      	str	r2, [sp, #100]	@ 0x64
 8007586:	78a2      	ldrb	r2, [r4, #2]
 8007588:	e785      	b.n	8007496 <_strtod_l+0x18e>
 800758a:	f04f 0c01 	mov.w	ip, #1
 800758e:	e7f8      	b.n	8007582 <_strtod_l+0x27a>
 8007590:	08009dc8 	.word	0x08009dc8
 8007594:	7ff00000 	.word	0x7ff00000
 8007598:	08009db0 	.word	0x08009db0
 800759c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800759e:	1c51      	adds	r1, r2, #1
 80075a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80075a2:	7852      	ldrb	r2, [r2, #1]
 80075a4:	2a30      	cmp	r2, #48	@ 0x30
 80075a6:	d0f9      	beq.n	800759c <_strtod_l+0x294>
 80075a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80075ac:	2908      	cmp	r1, #8
 80075ae:	f63f af78 	bhi.w	80074a2 <_strtod_l+0x19a>
 80075b2:	f04f 080a 	mov.w	r8, #10
 80075b6:	3a30      	subs	r2, #48	@ 0x30
 80075b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075c0:	1c56      	adds	r6, r2, #1
 80075c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80075c4:	7852      	ldrb	r2, [r2, #1]
 80075c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80075ca:	f1be 0f09 	cmp.w	lr, #9
 80075ce:	d939      	bls.n	8007644 <_strtod_l+0x33c>
 80075d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80075d6:	1a76      	subs	r6, r6, r1
 80075d8:	2e08      	cmp	r6, #8
 80075da:	dc03      	bgt.n	80075e4 <_strtod_l+0x2dc>
 80075dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80075de:	4588      	cmp	r8, r1
 80075e0:	bfa8      	it	ge
 80075e2:	4688      	movge	r8, r1
 80075e4:	f1bc 0f00 	cmp.w	ip, #0
 80075e8:	d001      	beq.n	80075ee <_strtod_l+0x2e6>
 80075ea:	f1c8 0800 	rsb	r8, r8, #0
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	d14e      	bne.n	8007690 <_strtod_l+0x388>
 80075f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f4:	4308      	orrs	r0, r1
 80075f6:	f47f aec0 	bne.w	800737a <_strtod_l+0x72>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f47f aed6 	bne.w	80073ac <_strtod_l+0xa4>
 8007600:	2a69      	cmp	r2, #105	@ 0x69
 8007602:	d028      	beq.n	8007656 <_strtod_l+0x34e>
 8007604:	dc25      	bgt.n	8007652 <_strtod_l+0x34a>
 8007606:	2a49      	cmp	r2, #73	@ 0x49
 8007608:	d025      	beq.n	8007656 <_strtod_l+0x34e>
 800760a:	2a4e      	cmp	r2, #78	@ 0x4e
 800760c:	f47f aece 	bne.w	80073ac <_strtod_l+0xa4>
 8007610:	499a      	ldr	r1, [pc, #616]	@ (800787c <_strtod_l+0x574>)
 8007612:	a819      	add	r0, sp, #100	@ 0x64
 8007614:	f001 fd66 	bl	80090e4 <__match>
 8007618:	2800      	cmp	r0, #0
 800761a:	f43f aec7 	beq.w	80073ac <_strtod_l+0xa4>
 800761e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b28      	cmp	r3, #40	@ 0x28
 8007624:	d12e      	bne.n	8007684 <_strtod_l+0x37c>
 8007626:	4996      	ldr	r1, [pc, #600]	@ (8007880 <_strtod_l+0x578>)
 8007628:	aa1c      	add	r2, sp, #112	@ 0x70
 800762a:	a819      	add	r0, sp, #100	@ 0x64
 800762c:	f001 fd6e 	bl	800910c <__hexnan>
 8007630:	2805      	cmp	r0, #5
 8007632:	d127      	bne.n	8007684 <_strtod_l+0x37c>
 8007634:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007636:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800763a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800763e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007642:	e69a      	b.n	800737a <_strtod_l+0x72>
 8007644:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007646:	fb08 2101 	mla	r1, r8, r1, r2
 800764a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800764e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007650:	e7b5      	b.n	80075be <_strtod_l+0x2b6>
 8007652:	2a6e      	cmp	r2, #110	@ 0x6e
 8007654:	e7da      	b.n	800760c <_strtod_l+0x304>
 8007656:	498b      	ldr	r1, [pc, #556]	@ (8007884 <_strtod_l+0x57c>)
 8007658:	a819      	add	r0, sp, #100	@ 0x64
 800765a:	f001 fd43 	bl	80090e4 <__match>
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f aea4 	beq.w	80073ac <_strtod_l+0xa4>
 8007664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007666:	4988      	ldr	r1, [pc, #544]	@ (8007888 <_strtod_l+0x580>)
 8007668:	3b01      	subs	r3, #1
 800766a:	a819      	add	r0, sp, #100	@ 0x64
 800766c:	9319      	str	r3, [sp, #100]	@ 0x64
 800766e:	f001 fd39 	bl	80090e4 <__match>
 8007672:	b910      	cbnz	r0, 800767a <_strtod_l+0x372>
 8007674:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007676:	3301      	adds	r3, #1
 8007678:	9319      	str	r3, [sp, #100]	@ 0x64
 800767a:	f04f 0a00 	mov.w	sl, #0
 800767e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800788c <_strtod_l+0x584>
 8007682:	e67a      	b.n	800737a <_strtod_l+0x72>
 8007684:	4882      	ldr	r0, [pc, #520]	@ (8007890 <_strtod_l+0x588>)
 8007686:	f001 fa6b 	bl	8008b60 <nan>
 800768a:	4682      	mov	sl, r0
 800768c:	468b      	mov	fp, r1
 800768e:	e674      	b.n	800737a <_strtod_l+0x72>
 8007690:	eba8 0309 	sub.w	r3, r8, r9
 8007694:	2f00      	cmp	r7, #0
 8007696:	bf08      	it	eq
 8007698:	462f      	moveq	r7, r5
 800769a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800769c:	2d10      	cmp	r5, #16
 800769e:	462c      	mov	r4, r5
 80076a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a2:	bfa8      	it	ge
 80076a4:	2410      	movge	r4, #16
 80076a6:	f7f8 ff09 	bl	80004bc <__aeabi_ui2d>
 80076aa:	2d09      	cmp	r5, #9
 80076ac:	4682      	mov	sl, r0
 80076ae:	468b      	mov	fp, r1
 80076b0:	dc11      	bgt.n	80076d6 <_strtod_l+0x3ce>
 80076b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f43f ae60 	beq.w	800737a <_strtod_l+0x72>
 80076ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076bc:	dd76      	ble.n	80077ac <_strtod_l+0x4a4>
 80076be:	2b16      	cmp	r3, #22
 80076c0:	dc5d      	bgt.n	800777e <_strtod_l+0x476>
 80076c2:	4974      	ldr	r1, [pc, #464]	@ (8007894 <_strtod_l+0x58c>)
 80076c4:	4652      	mov	r2, sl
 80076c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076ca:	465b      	mov	r3, fp
 80076cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d0:	f7f8 ff6e 	bl	80005b0 <__aeabi_dmul>
 80076d4:	e7d9      	b.n	800768a <_strtod_l+0x382>
 80076d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007894 <_strtod_l+0x58c>)
 80076d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80076e0:	f7f8 ff66 	bl	80005b0 <__aeabi_dmul>
 80076e4:	4682      	mov	sl, r0
 80076e6:	9808      	ldr	r0, [sp, #32]
 80076e8:	468b      	mov	fp, r1
 80076ea:	f7f8 fee7 	bl	80004bc <__aeabi_ui2d>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4650      	mov	r0, sl
 80076f4:	4659      	mov	r1, fp
 80076f6:	f7f8 fda5 	bl	8000244 <__adddf3>
 80076fa:	2d0f      	cmp	r5, #15
 80076fc:	4682      	mov	sl, r0
 80076fe:	468b      	mov	fp, r1
 8007700:	ddd7      	ble.n	80076b2 <_strtod_l+0x3aa>
 8007702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007704:	1b2c      	subs	r4, r5, r4
 8007706:	441c      	add	r4, r3
 8007708:	2c00      	cmp	r4, #0
 800770a:	f340 8096 	ble.w	800783a <_strtod_l+0x532>
 800770e:	f014 030f 	ands.w	r3, r4, #15
 8007712:	d00a      	beq.n	800772a <_strtod_l+0x422>
 8007714:	495f      	ldr	r1, [pc, #380]	@ (8007894 <_strtod_l+0x58c>)
 8007716:	4652      	mov	r2, sl
 8007718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800771c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007720:	465b      	mov	r3, fp
 8007722:	f7f8 ff45 	bl	80005b0 <__aeabi_dmul>
 8007726:	4682      	mov	sl, r0
 8007728:	468b      	mov	fp, r1
 800772a:	f034 040f 	bics.w	r4, r4, #15
 800772e:	d073      	beq.n	8007818 <_strtod_l+0x510>
 8007730:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007734:	dd48      	ble.n	80077c8 <_strtod_l+0x4c0>
 8007736:	2400      	movs	r4, #0
 8007738:	46a0      	mov	r8, r4
 800773a:	46a1      	mov	r9, r4
 800773c:	940a      	str	r4, [sp, #40]	@ 0x28
 800773e:	2322      	movs	r3, #34	@ 0x22
 8007740:	f04f 0a00 	mov.w	sl, #0
 8007744:	9a05      	ldr	r2, [sp, #20]
 8007746:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800788c <_strtod_l+0x584>
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	f43f ae13 	beq.w	800737a <_strtod_l+0x72>
 8007754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007756:	9805      	ldr	r0, [sp, #20]
 8007758:	f7ff f94c 	bl	80069f4 <_Bfree>
 800775c:	4649      	mov	r1, r9
 800775e:	9805      	ldr	r0, [sp, #20]
 8007760:	f7ff f948 	bl	80069f4 <_Bfree>
 8007764:	4641      	mov	r1, r8
 8007766:	9805      	ldr	r0, [sp, #20]
 8007768:	f7ff f944 	bl	80069f4 <_Bfree>
 800776c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800776e:	9805      	ldr	r0, [sp, #20]
 8007770:	f7ff f940 	bl	80069f4 <_Bfree>
 8007774:	4621      	mov	r1, r4
 8007776:	9805      	ldr	r0, [sp, #20]
 8007778:	f7ff f93c 	bl	80069f4 <_Bfree>
 800777c:	e5fd      	b.n	800737a <_strtod_l+0x72>
 800777e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007780:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007784:	4293      	cmp	r3, r2
 8007786:	dbbc      	blt.n	8007702 <_strtod_l+0x3fa>
 8007788:	4c42      	ldr	r4, [pc, #264]	@ (8007894 <_strtod_l+0x58c>)
 800778a:	f1c5 050f 	rsb	r5, r5, #15
 800778e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007792:	4652      	mov	r2, sl
 8007794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007798:	465b      	mov	r3, fp
 800779a:	f7f8 ff09 	bl	80005b0 <__aeabi_dmul>
 800779e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a0:	1b5d      	subs	r5, r3, r5
 80077a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077aa:	e791      	b.n	80076d0 <_strtod_l+0x3c8>
 80077ac:	3316      	adds	r3, #22
 80077ae:	dba8      	blt.n	8007702 <_strtod_l+0x3fa>
 80077b0:	4b38      	ldr	r3, [pc, #224]	@ (8007894 <_strtod_l+0x58c>)
 80077b2:	eba9 0808 	sub.w	r8, r9, r8
 80077b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80077ba:	4650      	mov	r0, sl
 80077bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80077c0:	4659      	mov	r1, fp
 80077c2:	f7f9 f81f 	bl	8000804 <__aeabi_ddiv>
 80077c6:	e760      	b.n	800768a <_strtod_l+0x382>
 80077c8:	4b33      	ldr	r3, [pc, #204]	@ (8007898 <_strtod_l+0x590>)
 80077ca:	4650      	mov	r0, sl
 80077cc:	9308      	str	r3, [sp, #32]
 80077ce:	2300      	movs	r3, #0
 80077d0:	4659      	mov	r1, fp
 80077d2:	461e      	mov	r6, r3
 80077d4:	1124      	asrs	r4, r4, #4
 80077d6:	2c01      	cmp	r4, #1
 80077d8:	dc21      	bgt.n	800781e <_strtod_l+0x516>
 80077da:	b10b      	cbz	r3, 80077e0 <_strtod_l+0x4d8>
 80077dc:	4682      	mov	sl, r0
 80077de:	468b      	mov	fp, r1
 80077e0:	492d      	ldr	r1, [pc, #180]	@ (8007898 <_strtod_l+0x590>)
 80077e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80077e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80077ea:	4652      	mov	r2, sl
 80077ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f0:	465b      	mov	r3, fp
 80077f2:	f7f8 fedd 	bl	80005b0 <__aeabi_dmul>
 80077f6:	4b25      	ldr	r3, [pc, #148]	@ (800788c <_strtod_l+0x584>)
 80077f8:	460a      	mov	r2, r1
 80077fa:	400b      	ands	r3, r1
 80077fc:	4927      	ldr	r1, [pc, #156]	@ (800789c <_strtod_l+0x594>)
 80077fe:	4682      	mov	sl, r0
 8007800:	428b      	cmp	r3, r1
 8007802:	d898      	bhi.n	8007736 <_strtod_l+0x42e>
 8007804:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007808:	428b      	cmp	r3, r1
 800780a:	bf86      	itte	hi
 800780c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007810:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80078a0 <_strtod_l+0x598>
 8007814:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007818:	2300      	movs	r3, #0
 800781a:	9308      	str	r3, [sp, #32]
 800781c:	e07a      	b.n	8007914 <_strtod_l+0x60c>
 800781e:	07e2      	lsls	r2, r4, #31
 8007820:	d505      	bpl.n	800782e <_strtod_l+0x526>
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fec2 	bl	80005b0 <__aeabi_dmul>
 800782c:	2301      	movs	r3, #1
 800782e:	9a08      	ldr	r2, [sp, #32]
 8007830:	3601      	adds	r6, #1
 8007832:	3208      	adds	r2, #8
 8007834:	1064      	asrs	r4, r4, #1
 8007836:	9208      	str	r2, [sp, #32]
 8007838:	e7cd      	b.n	80077d6 <_strtod_l+0x4ce>
 800783a:	d0ed      	beq.n	8007818 <_strtod_l+0x510>
 800783c:	4264      	negs	r4, r4
 800783e:	f014 020f 	ands.w	r2, r4, #15
 8007842:	d00a      	beq.n	800785a <_strtod_l+0x552>
 8007844:	4b13      	ldr	r3, [pc, #76]	@ (8007894 <_strtod_l+0x58c>)
 8007846:	4650      	mov	r0, sl
 8007848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800784c:	4659      	mov	r1, fp
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 ffd7 	bl	8000804 <__aeabi_ddiv>
 8007856:	4682      	mov	sl, r0
 8007858:	468b      	mov	fp, r1
 800785a:	1124      	asrs	r4, r4, #4
 800785c:	d0dc      	beq.n	8007818 <_strtod_l+0x510>
 800785e:	2c1f      	cmp	r4, #31
 8007860:	dd20      	ble.n	80078a4 <_strtod_l+0x59c>
 8007862:	2400      	movs	r4, #0
 8007864:	46a0      	mov	r8, r4
 8007866:	46a1      	mov	r9, r4
 8007868:	940a      	str	r4, [sp, #40]	@ 0x28
 800786a:	2322      	movs	r3, #34	@ 0x22
 800786c:	9a05      	ldr	r2, [sp, #20]
 800786e:	f04f 0a00 	mov.w	sl, #0
 8007872:	f04f 0b00 	mov.w	fp, #0
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	e768      	b.n	800774c <_strtod_l+0x444>
 800787a:	bf00      	nop
 800787c:	08009ba1 	.word	0x08009ba1
 8007880:	08009db4 	.word	0x08009db4
 8007884:	08009b99 	.word	0x08009b99
 8007888:	08009bce 	.word	0x08009bce
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	08009f78 	.word	0x08009f78
 8007894:	08009ce8 	.word	0x08009ce8
 8007898:	08009cc0 	.word	0x08009cc0
 800789c:	7ca00000 	.word	0x7ca00000
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	f014 0310 	ands.w	r3, r4, #16
 80078a8:	bf18      	it	ne
 80078aa:	236a      	movne	r3, #106	@ 0x6a
 80078ac:	4650      	mov	r0, sl
 80078ae:	9308      	str	r3, [sp, #32]
 80078b0:	4659      	mov	r1, fp
 80078b2:	2300      	movs	r3, #0
 80078b4:	4ea9      	ldr	r6, [pc, #676]	@ (8007b5c <_strtod_l+0x854>)
 80078b6:	07e2      	lsls	r2, r4, #31
 80078b8:	d504      	bpl.n	80078c4 <_strtod_l+0x5bc>
 80078ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078be:	f7f8 fe77 	bl	80005b0 <__aeabi_dmul>
 80078c2:	2301      	movs	r3, #1
 80078c4:	1064      	asrs	r4, r4, #1
 80078c6:	f106 0608 	add.w	r6, r6, #8
 80078ca:	d1f4      	bne.n	80078b6 <_strtod_l+0x5ae>
 80078cc:	b10b      	cbz	r3, 80078d2 <_strtod_l+0x5ca>
 80078ce:	4682      	mov	sl, r0
 80078d0:	468b      	mov	fp, r1
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	b1b3      	cbz	r3, 8007904 <_strtod_l+0x5fc>
 80078d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80078da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80078de:	2b00      	cmp	r3, #0
 80078e0:	4659      	mov	r1, fp
 80078e2:	dd0f      	ble.n	8007904 <_strtod_l+0x5fc>
 80078e4:	2b1f      	cmp	r3, #31
 80078e6:	dd57      	ble.n	8007998 <_strtod_l+0x690>
 80078e8:	2b34      	cmp	r3, #52	@ 0x34
 80078ea:	bfd8      	it	le
 80078ec:	f04f 33ff 	movle.w	r3, #4294967295
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	bfcf      	iteee	gt
 80078f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80078fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80078fe:	4093      	lslle	r3, r2
 8007900:	ea03 0b01 	andle.w	fp, r3, r1
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	4650      	mov	r0, sl
 800790a:	4659      	mov	r1, fp
 800790c:	f7f9 f8b8 	bl	8000a80 <__aeabi_dcmpeq>
 8007910:	2800      	cmp	r0, #0
 8007912:	d1a6      	bne.n	8007862 <_strtod_l+0x55a>
 8007914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007916:	463a      	mov	r2, r7
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800791c:	462b      	mov	r3, r5
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	f7ff f8d0 	bl	8006ac4 <__s2b>
 8007924:	900a      	str	r0, [sp, #40]	@ 0x28
 8007926:	2800      	cmp	r0, #0
 8007928:	f43f af05 	beq.w	8007736 <_strtod_l+0x42e>
 800792c:	2400      	movs	r4, #0
 800792e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007930:	eba9 0308 	sub.w	r3, r9, r8
 8007934:	2a00      	cmp	r2, #0
 8007936:	bfa8      	it	ge
 8007938:	2300      	movge	r3, #0
 800793a:	46a0      	mov	r8, r4
 800793c:	9312      	str	r3, [sp, #72]	@ 0x48
 800793e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007942:	9316      	str	r3, [sp, #88]	@ 0x58
 8007944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007946:	9805      	ldr	r0, [sp, #20]
 8007948:	6859      	ldr	r1, [r3, #4]
 800794a:	f7ff f813 	bl	8006974 <_Balloc>
 800794e:	4681      	mov	r9, r0
 8007950:	2800      	cmp	r0, #0
 8007952:	f43f aef4 	beq.w	800773e <_strtod_l+0x436>
 8007956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007958:	300c      	adds	r0, #12
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	f103 010c 	add.w	r1, r3, #12
 8007960:	3202      	adds	r2, #2
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	f001 f8ee 	bl	8008b44 <memcpy>
 8007968:	ab1c      	add	r3, sp, #112	@ 0x70
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4652      	mov	r2, sl
 8007972:	465b      	mov	r3, fp
 8007974:	9805      	ldr	r0, [sp, #20]
 8007976:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800797a:	f7ff fbd5 	bl	8007128 <__d2b>
 800797e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007980:	2800      	cmp	r0, #0
 8007982:	f43f aedc 	beq.w	800773e <_strtod_l+0x436>
 8007986:	2101      	movs	r1, #1
 8007988:	9805      	ldr	r0, [sp, #20]
 800798a:	f7ff f931 	bl	8006bf0 <__i2b>
 800798e:	4680      	mov	r8, r0
 8007990:	b948      	cbnz	r0, 80079a6 <_strtod_l+0x69e>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	e6d2      	b.n	800773e <_strtod_l+0x436>
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	ea03 0a0a 	and.w	sl, r3, sl
 80079a4:	e7ae      	b.n	8007904 <_strtod_l+0x5fc>
 80079a6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80079a8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	bfab      	itete	ge
 80079ae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80079b0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80079b2:	18ef      	addge	r7, r5, r3
 80079b4:	1b5e      	sublt	r6, r3, r5
 80079b6:	9b08      	ldr	r3, [sp, #32]
 80079b8:	bfa8      	it	ge
 80079ba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80079bc:	eba5 0503 	sub.w	r5, r5, r3
 80079c0:	4415      	add	r5, r2
 80079c2:	4b67      	ldr	r3, [pc, #412]	@ (8007b60 <_strtod_l+0x858>)
 80079c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80079c8:	bfb8      	it	lt
 80079ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80079cc:	429d      	cmp	r5, r3
 80079ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80079d2:	da50      	bge.n	8007a76 <_strtod_l+0x76e>
 80079d4:	1b5b      	subs	r3, r3, r5
 80079d6:	2b1f      	cmp	r3, #31
 80079d8:	f04f 0101 	mov.w	r1, #1
 80079dc:	eba2 0203 	sub.w	r2, r2, r3
 80079e0:	dc3d      	bgt.n	8007a5e <_strtod_l+0x756>
 80079e2:	fa01 f303 	lsl.w	r3, r1, r3
 80079e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079e8:	2300      	movs	r3, #0
 80079ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80079ec:	18bd      	adds	r5, r7, r2
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	42af      	cmp	r7, r5
 80079f2:	4416      	add	r6, r2
 80079f4:	441e      	add	r6, r3
 80079f6:	463b      	mov	r3, r7
 80079f8:	bfa8      	it	ge
 80079fa:	462b      	movge	r3, r5
 80079fc:	42b3      	cmp	r3, r6
 80079fe:	bfa8      	it	ge
 8007a00:	4633      	movge	r3, r6
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfc2      	ittt	gt
 8007a06:	1aed      	subgt	r5, r5, r3
 8007a08:	1af6      	subgt	r6, r6, r3
 8007a0a:	1aff      	subgt	r7, r7, r3
 8007a0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd16      	ble.n	8007a40 <_strtod_l+0x738>
 8007a12:	4641      	mov	r1, r8
 8007a14:	461a      	mov	r2, r3
 8007a16:	9805      	ldr	r0, [sp, #20]
 8007a18:	f7ff f9a8 	bl	8006d6c <__pow5mult>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0b7      	beq.n	8007992 <_strtod_l+0x68a>
 8007a22:	4601      	mov	r1, r0
 8007a24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a26:	9805      	ldr	r0, [sp, #20]
 8007a28:	f7ff f8f8 	bl	8006c1c <__multiply>
 8007a2c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f ae85 	beq.w	800773e <_strtod_l+0x436>
 8007a34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a36:	9805      	ldr	r0, [sp, #20]
 8007a38:	f7fe ffdc 	bl	80069f4 <_Bfree>
 8007a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	dc1d      	bgt.n	8007a80 <_strtod_l+0x778>
 8007a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd23      	ble.n	8007a92 <_strtod_l+0x78a>
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a4e:	9805      	ldr	r0, [sp, #20]
 8007a50:	f7ff f98c 	bl	8006d6c <__pow5mult>
 8007a54:	4681      	mov	r9, r0
 8007a56:	b9e0      	cbnz	r0, 8007a92 <_strtod_l+0x78a>
 8007a58:	f04f 0900 	mov.w	r9, #0
 8007a5c:	e66f      	b.n	800773e <_strtod_l+0x436>
 8007a5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007a62:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007a66:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007a6a:	35e2      	adds	r5, #226	@ 0xe2
 8007a6c:	fa01 f305 	lsl.w	r3, r1, r5
 8007a70:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a72:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a74:	e7ba      	b.n	80079ec <_strtod_l+0x6e4>
 8007a76:	2300      	movs	r3, #0
 8007a78:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a7e:	e7b5      	b.n	80079ec <_strtod_l+0x6e4>
 8007a80:	462a      	mov	r2, r5
 8007a82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	f7ff f9cb 	bl	8006e20 <__lshift>
 8007a8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d1d9      	bne.n	8007a44 <_strtod_l+0x73c>
 8007a90:	e655      	b.n	800773e <_strtod_l+0x436>
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	dd07      	ble.n	8007aa6 <_strtod_l+0x79e>
 8007a96:	4649      	mov	r1, r9
 8007a98:	4632      	mov	r2, r6
 8007a9a:	9805      	ldr	r0, [sp, #20]
 8007a9c:	f7ff f9c0 	bl	8006e20 <__lshift>
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d0d8      	beq.n	8007a58 <_strtod_l+0x750>
 8007aa6:	2f00      	cmp	r7, #0
 8007aa8:	dd08      	ble.n	8007abc <_strtod_l+0x7b4>
 8007aaa:	4641      	mov	r1, r8
 8007aac:	463a      	mov	r2, r7
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	f7ff f9b6 	bl	8006e20 <__lshift>
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f ae41 	beq.w	800773e <_strtod_l+0x436>
 8007abc:	464a      	mov	r2, r9
 8007abe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ac0:	9805      	ldr	r0, [sp, #20]
 8007ac2:	f7ff fa35 	bl	8006f30 <__mdiff>
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f43f ae38 	beq.w	800773e <_strtod_l+0x436>
 8007ace:	68c3      	ldr	r3, [r0, #12]
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60c3      	str	r3, [r0, #12]
 8007ad8:	f7ff fa0e 	bl	8006ef8 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	da45      	bge.n	8007b6c <_strtod_l+0x864>
 8007ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ae6:	d16b      	bne.n	8007bc0 <_strtod_l+0x8b8>
 8007ae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d167      	bne.n	8007bc0 <_strtod_l+0x8b8>
 8007af0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007af4:	0d1b      	lsrs	r3, r3, #20
 8007af6:	051b      	lsls	r3, r3, #20
 8007af8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007afc:	d960      	bls.n	8007bc0 <_strtod_l+0x8b8>
 8007afe:	6963      	ldr	r3, [r4, #20]
 8007b00:	b913      	cbnz	r3, 8007b08 <_strtod_l+0x800>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	dd5b      	ble.n	8007bc0 <_strtod_l+0x8b8>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	9805      	ldr	r0, [sp, #20]
 8007b0e:	f7ff f987 	bl	8006e20 <__lshift>
 8007b12:	4641      	mov	r1, r8
 8007b14:	4604      	mov	r4, r0
 8007b16:	f7ff f9ef 	bl	8006ef8 <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	dd50      	ble.n	8007bc0 <_strtod_l+0x8b8>
 8007b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b22:	9a08      	ldr	r2, [sp, #32]
 8007b24:	0d1b      	lsrs	r3, r3, #20
 8007b26:	051b      	lsls	r3, r3, #20
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	d06a      	beq.n	8007c02 <_strtod_l+0x8fa>
 8007b2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b30:	d867      	bhi.n	8007c02 <_strtod_l+0x8fa>
 8007b32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b36:	f67f ae98 	bls.w	800786a <_strtod_l+0x562>
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	4b09      	ldr	r3, [pc, #36]	@ (8007b64 <_strtod_l+0x85c>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	f7f8 fd35 	bl	80005b0 <__aeabi_dmul>
 8007b46:	4b08      	ldr	r3, [pc, #32]	@ (8007b68 <_strtod_l+0x860>)
 8007b48:	4682      	mov	sl, r0
 8007b4a:	400b      	ands	r3, r1
 8007b4c:	468b      	mov	fp, r1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f47f ae00 	bne.w	8007754 <_strtod_l+0x44c>
 8007b54:	2322      	movs	r3, #34	@ 0x22
 8007b56:	9a05      	ldr	r2, [sp, #20]
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e5fb      	b.n	8007754 <_strtod_l+0x44c>
 8007b5c:	08009de0 	.word	0x08009de0
 8007b60:	fffffc02 	.word	0xfffffc02
 8007b64:	39500000 	.word	0x39500000
 8007b68:	7ff00000 	.word	0x7ff00000
 8007b6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b70:	d165      	bne.n	8007c3e <_strtod_l+0x936>
 8007b72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b78:	b35a      	cbz	r2, 8007bd2 <_strtod_l+0x8ca>
 8007b7a:	4a99      	ldr	r2, [pc, #612]	@ (8007de0 <_strtod_l+0xad8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d12b      	bne.n	8007bd8 <_strtod_l+0x8d0>
 8007b80:	9b08      	ldr	r3, [sp, #32]
 8007b82:	4651      	mov	r1, sl
 8007b84:	b303      	cbz	r3, 8007bc8 <_strtod_l+0x8c0>
 8007b86:	465a      	mov	r2, fp
 8007b88:	4b96      	ldr	r3, [pc, #600]	@ (8007de4 <_strtod_l+0xadc>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295
 8007b94:	d81b      	bhi.n	8007bce <_strtod_l+0x8c6>
 8007b96:	0d1b      	lsrs	r3, r3, #20
 8007b98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	d119      	bne.n	8007bd8 <_strtod_l+0x8d0>
 8007ba4:	4b90      	ldr	r3, [pc, #576]	@ (8007de8 <_strtod_l+0xae0>)
 8007ba6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d102      	bne.n	8007bb2 <_strtod_l+0x8aa>
 8007bac:	3101      	adds	r1, #1
 8007bae:	f43f adc6 	beq.w	800773e <_strtod_l+0x436>
 8007bb2:	f04f 0a00 	mov.w	sl, #0
 8007bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8007de4 <_strtod_l+0xadc>)
 8007bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bba:	401a      	ands	r2, r3
 8007bbc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1b9      	bne.n	8007b3a <_strtod_l+0x832>
 8007bc6:	e5c5      	b.n	8007754 <_strtod_l+0x44c>
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bcc:	e7e8      	b.n	8007ba0 <_strtod_l+0x898>
 8007bce:	4613      	mov	r3, r2
 8007bd0:	e7e6      	b.n	8007ba0 <_strtod_l+0x898>
 8007bd2:	ea53 030a 	orrs.w	r3, r3, sl
 8007bd6:	d0a2      	beq.n	8007b1e <_strtod_l+0x816>
 8007bd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bda:	b1db      	cbz	r3, 8007c14 <_strtod_l+0x90c>
 8007bdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bde:	4213      	tst	r3, r2
 8007be0:	d0ee      	beq.n	8007bc0 <_strtod_l+0x8b8>
 8007be2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007be4:	4650      	mov	r0, sl
 8007be6:	4659      	mov	r1, fp
 8007be8:	9a08      	ldr	r2, [sp, #32]
 8007bea:	b1bb      	cbz	r3, 8007c1c <_strtod_l+0x914>
 8007bec:	f7ff fb68 	bl	80072c0 <sulp>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bf8:	f7f8 fb24 	bl	8000244 <__adddf3>
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	468b      	mov	fp, r1
 8007c00:	e7de      	b.n	8007bc0 <_strtod_l+0x8b8>
 8007c02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c0a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c12:	e7d5      	b.n	8007bc0 <_strtod_l+0x8b8>
 8007c14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c16:	ea13 0f0a 	tst.w	r3, sl
 8007c1a:	e7e1      	b.n	8007be0 <_strtod_l+0x8d8>
 8007c1c:	f7ff fb50 	bl	80072c0 <sulp>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c28:	f7f8 fb0a 	bl	8000240 <__aeabi_dsub>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4682      	mov	sl, r0
 8007c32:	468b      	mov	fp, r1
 8007c34:	f7f8 ff24 	bl	8000a80 <__aeabi_dcmpeq>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d0c1      	beq.n	8007bc0 <_strtod_l+0x8b8>
 8007c3c:	e615      	b.n	800786a <_strtod_l+0x562>
 8007c3e:	4641      	mov	r1, r8
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7ff fac9 	bl	80071d8 <__ratio>
 8007c46:	2200      	movs	r2, #0
 8007c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	460f      	mov	r7, r1
 8007c50:	f7f8 ff2a 	bl	8000aa8 <__aeabi_dcmple>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d06d      	beq.n	8007d34 <_strtod_l+0xa2c>
 8007c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d178      	bne.n	8007d50 <_strtod_l+0xa48>
 8007c5e:	f1ba 0f00 	cmp.w	sl, #0
 8007c62:	d156      	bne.n	8007d12 <_strtod_l+0xa0a>
 8007c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d158      	bne.n	8007d20 <_strtod_l+0xa18>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	4b5d      	ldr	r3, [pc, #372]	@ (8007dec <_strtod_l+0xae4>)
 8007c76:	f7f8 ff0d 	bl	8000a94 <__aeabi_dcmplt>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d157      	bne.n	8007d2e <_strtod_l+0xa26>
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	2200      	movs	r2, #0
 8007c84:	4b5a      	ldr	r3, [pc, #360]	@ (8007df0 <_strtod_l+0xae8>)
 8007c86:	f7f8 fc93 	bl	80005b0 <__aeabi_dmul>
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460f      	mov	r7, r1
 8007c8e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007c92:	9606      	str	r6, [sp, #24]
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c9a:	4d52      	ldr	r5, [pc, #328]	@ (8007de4 <_strtod_l+0xadc>)
 8007c9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca2:	401d      	ands	r5, r3
 8007ca4:	4b53      	ldr	r3, [pc, #332]	@ (8007df4 <_strtod_l+0xaec>)
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	f040 80aa 	bne.w	8007e00 <_strtod_l+0xaf8>
 8007cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cae:	4650      	mov	r0, sl
 8007cb0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	f7ff f9cf 	bl	8007058 <__ulp>
 8007cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cbe:	f7f8 fc77 	bl	80005b0 <__aeabi_dmul>
 8007cc2:	4652      	mov	r2, sl
 8007cc4:	465b      	mov	r3, fp
 8007cc6:	f7f8 fabd 	bl	8000244 <__adddf3>
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4945      	ldr	r1, [pc, #276]	@ (8007de4 <_strtod_l+0xadc>)
 8007cce:	4a4a      	ldr	r2, [pc, #296]	@ (8007df8 <_strtod_l+0xaf0>)
 8007cd0:	4019      	ands	r1, r3
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	d942      	bls.n	8007d5e <_strtod_l+0xa56>
 8007cd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cda:	4b43      	ldr	r3, [pc, #268]	@ (8007de8 <_strtod_l+0xae0>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d103      	bne.n	8007ce8 <_strtod_l+0x9e0>
 8007ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f43f ad2b 	beq.w	800773e <_strtod_l+0x436>
 8007ce8:	f04f 3aff 	mov.w	sl, #4294967295
 8007cec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007de8 <_strtod_l+0xae0>
 8007cf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cf2:	9805      	ldr	r0, [sp, #20]
 8007cf4:	f7fe fe7e 	bl	80069f4 <_Bfree>
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	9805      	ldr	r0, [sp, #20]
 8007cfc:	f7fe fe7a 	bl	80069f4 <_Bfree>
 8007d00:	4641      	mov	r1, r8
 8007d02:	9805      	ldr	r0, [sp, #20]
 8007d04:	f7fe fe76 	bl	80069f4 <_Bfree>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	9805      	ldr	r0, [sp, #20]
 8007d0c:	f7fe fe72 	bl	80069f4 <_Bfree>
 8007d10:	e618      	b.n	8007944 <_strtod_l+0x63c>
 8007d12:	f1ba 0f01 	cmp.w	sl, #1
 8007d16:	d103      	bne.n	8007d20 <_strtod_l+0xa18>
 8007d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f43f ada5 	beq.w	800786a <_strtod_l+0x562>
 8007d20:	2200      	movs	r2, #0
 8007d22:	4b36      	ldr	r3, [pc, #216]	@ (8007dfc <_strtod_l+0xaf4>)
 8007d24:	2600      	movs	r6, #0
 8007d26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d2a:	4f30      	ldr	r7, [pc, #192]	@ (8007dec <_strtod_l+0xae4>)
 8007d2c:	e7b3      	b.n	8007c96 <_strtod_l+0x98e>
 8007d2e:	2600      	movs	r6, #0
 8007d30:	4f2f      	ldr	r7, [pc, #188]	@ (8007df0 <_strtod_l+0xae8>)
 8007d32:	e7ac      	b.n	8007c8e <_strtod_l+0x986>
 8007d34:	4630      	mov	r0, r6
 8007d36:	4639      	mov	r1, r7
 8007d38:	4b2d      	ldr	r3, [pc, #180]	@ (8007df0 <_strtod_l+0xae8>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f7f8 fc38 	bl	80005b0 <__aeabi_dmul>
 8007d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0a1      	beq.n	8007c8e <_strtod_l+0x986>
 8007d4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d4e:	e7a2      	b.n	8007c96 <_strtod_l+0x98e>
 8007d50:	2200      	movs	r2, #0
 8007d52:	4b26      	ldr	r3, [pc, #152]	@ (8007dec <_strtod_l+0xae4>)
 8007d54:	4616      	mov	r6, r2
 8007d56:	461f      	mov	r7, r3
 8007d58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d5c:	e79b      	b.n	8007c96 <_strtod_l+0x98e>
 8007d5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1c1      	bne.n	8007cf0 <_strtod_l+0x9e8>
 8007d6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d70:	0d1b      	lsrs	r3, r3, #20
 8007d72:	051b      	lsls	r3, r3, #20
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d1bb      	bne.n	8007cf0 <_strtod_l+0x9e8>
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 ff78 	bl	8000c70 <__aeabi_d2lz>
 8007d80:	f7f8 fbe8 	bl	8000554 <__aeabi_l2d>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fa58 	bl	8000240 <__aeabi_dsub>
 8007d90:	460b      	mov	r3, r1
 8007d92:	4602      	mov	r2, r0
 8007d94:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007d98:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d9e:	ea46 060a 	orr.w	r6, r6, sl
 8007da2:	431e      	orrs	r6, r3
 8007da4:	d069      	beq.n	8007e7a <_strtod_l+0xb72>
 8007da6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007dd0 <_strtod_l+0xac8>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 fe72 	bl	8000a94 <__aeabi_dcmplt>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f47f accf 	bne.w	8007754 <_strtod_l+0x44c>
 8007db6:	a308      	add	r3, pc, #32	@ (adr r3, 8007dd8 <_strtod_l+0xad0>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dc0:	f7f8 fe86 	bl	8000ad0 <__aeabi_dcmpgt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d093      	beq.n	8007cf0 <_strtod_l+0x9e8>
 8007dc8:	e4c4      	b.n	8007754 <_strtod_l+0x44c>
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w
 8007dd0:	94a03595 	.word	0x94a03595
 8007dd4:	3fdfffff 	.word	0x3fdfffff
 8007dd8:	35afe535 	.word	0x35afe535
 8007ddc:	3fe00000 	.word	0x3fe00000
 8007de0:	000fffff 	.word	0x000fffff
 8007de4:	7ff00000 	.word	0x7ff00000
 8007de8:	7fefffff 	.word	0x7fefffff
 8007dec:	3ff00000 	.word	0x3ff00000
 8007df0:	3fe00000 	.word	0x3fe00000
 8007df4:	7fe00000 	.word	0x7fe00000
 8007df8:	7c9fffff 	.word	0x7c9fffff
 8007dfc:	bff00000 	.word	0xbff00000
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	b323      	cbz	r3, 8007e4e <_strtod_l+0xb46>
 8007e04:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e08:	d821      	bhi.n	8007e4e <_strtod_l+0xb46>
 8007e0a:	a327      	add	r3, pc, #156	@ (adr r3, 8007ea8 <_strtod_l+0xba0>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fe48 	bl	8000aa8 <__aeabi_dcmple>
 8007e18:	b1a0      	cbz	r0, 8007e44 <_strtod_l+0xb3c>
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7f8 fe9f 	bl	8000b60 <__aeabi_d2uiz>
 8007e22:	2801      	cmp	r0, #1
 8007e24:	bf38      	it	cc
 8007e26:	2001      	movcc	r0, #1
 8007e28:	f7f8 fb48 	bl	80004bc <__aeabi_ui2d>
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	b9fb      	cbnz	r3, 8007e74 <_strtod_l+0xb6c>
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e38:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e46:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e4a:	1b5b      	subs	r3, r3, r5
 8007e4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e56:	f7ff f8ff 	bl	8007058 <__ulp>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fba5 	bl	80005b0 <__aeabi_dmul>
 8007e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e6a:	f7f8 f9eb 	bl	8000244 <__adddf3>
 8007e6e:	4682      	mov	sl, r0
 8007e70:	468b      	mov	fp, r1
 8007e72:	e776      	b.n	8007d62 <_strtod_l+0xa5a>
 8007e74:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007e78:	e7e0      	b.n	8007e3c <_strtod_l+0xb34>
 8007e7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007eb0 <_strtod_l+0xba8>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 fe08 	bl	8000a94 <__aeabi_dcmplt>
 8007e84:	e79e      	b.n	8007dc4 <_strtod_l+0xabc>
 8007e86:	2300      	movs	r3, #0
 8007e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	f7ff ba77 	b.w	8007382 <_strtod_l+0x7a>
 8007e94:	2a65      	cmp	r2, #101	@ 0x65
 8007e96:	f43f ab6e 	beq.w	8007576 <_strtod_l+0x26e>
 8007e9a:	2a45      	cmp	r2, #69	@ 0x45
 8007e9c:	f43f ab6b 	beq.w	8007576 <_strtod_l+0x26e>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f7ff bba6 	b.w	80075f2 <_strtod_l+0x2ea>
 8007ea6:	bf00      	nop
 8007ea8:	ffc00000 	.word	0xffc00000
 8007eac:	41dfffff 	.word	0x41dfffff
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fcfffff 	.word	0x3fcfffff

08007eb8 <_strtod_r>:
 8007eb8:	4b01      	ldr	r3, [pc, #4]	@ (8007ec0 <_strtod_r+0x8>)
 8007eba:	f7ff ba25 	b.w	8007308 <_strtod_l>
 8007ebe:	bf00      	nop
 8007ec0:	20000068 	.word	0x20000068

08007ec4 <_strtol_l.constprop.0>:
 8007ec4:	2b24      	cmp	r3, #36	@ 0x24
 8007ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eca:	4686      	mov	lr, r0
 8007ecc:	4690      	mov	r8, r2
 8007ece:	d801      	bhi.n	8007ed4 <_strtol_l.constprop.0+0x10>
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d106      	bne.n	8007ee2 <_strtol_l.constprop.0+0x1e>
 8007ed4:	f7fd fdbe 	bl	8005a54 <__errno>
 8007ed8:	2316      	movs	r3, #22
 8007eda:	6003      	str	r3, [r0, #0]
 8007edc:	2000      	movs	r0, #0
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee2:	460d      	mov	r5, r1
 8007ee4:	4833      	ldr	r0, [pc, #204]	@ (8007fb4 <_strtol_l.constprop.0+0xf0>)
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eec:	5d06      	ldrb	r6, [r0, r4]
 8007eee:	f016 0608 	ands.w	r6, r6, #8
 8007ef2:	d1f8      	bne.n	8007ee6 <_strtol_l.constprop.0+0x22>
 8007ef4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ef6:	d12d      	bne.n	8007f54 <_strtol_l.constprop.0+0x90>
 8007ef8:	2601      	movs	r6, #1
 8007efa:	782c      	ldrb	r4, [r5, #0]
 8007efc:	1c95      	adds	r5, r2, #2
 8007efe:	f033 0210 	bics.w	r2, r3, #16
 8007f02:	d109      	bne.n	8007f18 <_strtol_l.constprop.0+0x54>
 8007f04:	2c30      	cmp	r4, #48	@ 0x30
 8007f06:	d12a      	bne.n	8007f5e <_strtol_l.constprop.0+0x9a>
 8007f08:	782a      	ldrb	r2, [r5, #0]
 8007f0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f0e:	2a58      	cmp	r2, #88	@ 0x58
 8007f10:	d125      	bne.n	8007f5e <_strtol_l.constprop.0+0x9a>
 8007f12:	2310      	movs	r3, #16
 8007f14:	786c      	ldrb	r4, [r5, #1]
 8007f16:	3502      	adds	r5, #2
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f22:	fbbc f9f3 	udiv	r9, ip, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f30:	2f09      	cmp	r7, #9
 8007f32:	d81b      	bhi.n	8007f6c <_strtol_l.constprop.0+0xa8>
 8007f34:	463c      	mov	r4, r7
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	dd27      	ble.n	8007f8a <_strtol_l.constprop.0+0xc6>
 8007f3a:	1c57      	adds	r7, r2, #1
 8007f3c:	d007      	beq.n	8007f4e <_strtol_l.constprop.0+0x8a>
 8007f3e:	4581      	cmp	r9, r0
 8007f40:	d320      	bcc.n	8007f84 <_strtol_l.constprop.0+0xc0>
 8007f42:	d101      	bne.n	8007f48 <_strtol_l.constprop.0+0x84>
 8007f44:	45a2      	cmp	sl, r4
 8007f46:	db1d      	blt.n	8007f84 <_strtol_l.constprop.0+0xc0>
 8007f48:	2201      	movs	r2, #1
 8007f4a:	fb00 4003 	mla	r0, r0, r3, r4
 8007f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f52:	e7eb      	b.n	8007f2c <_strtol_l.constprop.0+0x68>
 8007f54:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f56:	bf04      	itt	eq
 8007f58:	782c      	ldrbeq	r4, [r5, #0]
 8007f5a:	1c95      	addeq	r5, r2, #2
 8007f5c:	e7cf      	b.n	8007efe <_strtol_l.constprop.0+0x3a>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1da      	bne.n	8007f18 <_strtol_l.constprop.0+0x54>
 8007f62:	2c30      	cmp	r4, #48	@ 0x30
 8007f64:	bf0c      	ite	eq
 8007f66:	2308      	moveq	r3, #8
 8007f68:	230a      	movne	r3, #10
 8007f6a:	e7d5      	b.n	8007f18 <_strtol_l.constprop.0+0x54>
 8007f6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f70:	2f19      	cmp	r7, #25
 8007f72:	d801      	bhi.n	8007f78 <_strtol_l.constprop.0+0xb4>
 8007f74:	3c37      	subs	r4, #55	@ 0x37
 8007f76:	e7de      	b.n	8007f36 <_strtol_l.constprop.0+0x72>
 8007f78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f7c:	2f19      	cmp	r7, #25
 8007f7e:	d804      	bhi.n	8007f8a <_strtol_l.constprop.0+0xc6>
 8007f80:	3c57      	subs	r4, #87	@ 0x57
 8007f82:	e7d8      	b.n	8007f36 <_strtol_l.constprop.0+0x72>
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295
 8007f88:	e7e1      	b.n	8007f4e <_strtol_l.constprop.0+0x8a>
 8007f8a:	1c53      	adds	r3, r2, #1
 8007f8c:	d108      	bne.n	8007fa0 <_strtol_l.constprop.0+0xdc>
 8007f8e:	2322      	movs	r3, #34	@ 0x22
 8007f90:	4660      	mov	r0, ip
 8007f92:	f8ce 3000 	str.w	r3, [lr]
 8007f96:	f1b8 0f00 	cmp.w	r8, #0
 8007f9a:	d0a0      	beq.n	8007ede <_strtol_l.constprop.0+0x1a>
 8007f9c:	1e69      	subs	r1, r5, #1
 8007f9e:	e006      	b.n	8007fae <_strtol_l.constprop.0+0xea>
 8007fa0:	b106      	cbz	r6, 8007fa4 <_strtol_l.constprop.0+0xe0>
 8007fa2:	4240      	negs	r0, r0
 8007fa4:	f1b8 0f00 	cmp.w	r8, #0
 8007fa8:	d099      	beq.n	8007ede <_strtol_l.constprop.0+0x1a>
 8007faa:	2a00      	cmp	r2, #0
 8007fac:	d1f6      	bne.n	8007f9c <_strtol_l.constprop.0+0xd8>
 8007fae:	f8c8 1000 	str.w	r1, [r8]
 8007fb2:	e794      	b.n	8007ede <_strtol_l.constprop.0+0x1a>
 8007fb4:	08009e09 	.word	0x08009e09

08007fb8 <_strtol_r>:
 8007fb8:	f7ff bf84 	b.w	8007ec4 <_strtol_l.constprop.0>

08007fbc <__ssputs_r>:
 8007fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	461f      	mov	r7, r3
 8007fc2:	688e      	ldr	r6, [r1, #8]
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	42be      	cmp	r6, r7
 8007fc8:	460c      	mov	r4, r1
 8007fca:	4690      	mov	r8, r2
 8007fcc:	680b      	ldr	r3, [r1, #0]
 8007fce:	d82d      	bhi.n	800802c <__ssputs_r+0x70>
 8007fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fd8:	d026      	beq.n	8008028 <__ssputs_r+0x6c>
 8007fda:	6965      	ldr	r5, [r4, #20]
 8007fdc:	6909      	ldr	r1, [r1, #16]
 8007fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe2:	eba3 0901 	sub.w	r9, r3, r1
 8007fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fea:	1c7b      	adds	r3, r7, #1
 8007fec:	444b      	add	r3, r9
 8007fee:	106d      	asrs	r5, r5, #1
 8007ff0:	429d      	cmp	r5, r3
 8007ff2:	bf38      	it	cc
 8007ff4:	461d      	movcc	r5, r3
 8007ff6:	0553      	lsls	r3, r2, #21
 8007ff8:	d527      	bpl.n	800804a <__ssputs_r+0x8e>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7fe fc2e 	bl	800685c <_malloc_r>
 8008000:	4606      	mov	r6, r0
 8008002:	b360      	cbz	r0, 800805e <__ssputs_r+0xa2>
 8008004:	464a      	mov	r2, r9
 8008006:	6921      	ldr	r1, [r4, #16]
 8008008:	f000 fd9c 	bl	8008b44 <memcpy>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	6126      	str	r6, [r4, #16]
 800801a:	444e      	add	r6, r9
 800801c:	6026      	str	r6, [r4, #0]
 800801e:	463e      	mov	r6, r7
 8008020:	6165      	str	r5, [r4, #20]
 8008022:	eba5 0509 	sub.w	r5, r5, r9
 8008026:	60a5      	str	r5, [r4, #8]
 8008028:	42be      	cmp	r6, r7
 800802a:	d900      	bls.n	800802e <__ssputs_r+0x72>
 800802c:	463e      	mov	r6, r7
 800802e:	4632      	mov	r2, r6
 8008030:	4641      	mov	r1, r8
 8008032:	6820      	ldr	r0, [r4, #0]
 8008034:	f000 fd49 	bl	8008aca <memmove>
 8008038:	2000      	movs	r0, #0
 800803a:	68a3      	ldr	r3, [r4, #8]
 800803c:	1b9b      	subs	r3, r3, r6
 800803e:	60a3      	str	r3, [r4, #8]
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	4433      	add	r3, r6
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	462a      	mov	r2, r5
 800804c:	f001 f90b 	bl	8009266 <_realloc_r>
 8008050:	4606      	mov	r6, r0
 8008052:	2800      	cmp	r0, #0
 8008054:	d1e0      	bne.n	8008018 <__ssputs_r+0x5c>
 8008056:	4650      	mov	r0, sl
 8008058:	6921      	ldr	r1, [r4, #16]
 800805a:	f7fe fb8d 	bl	8006778 <_free_r>
 800805e:	230c      	movs	r3, #12
 8008060:	f8ca 3000 	str.w	r3, [sl]
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f04f 30ff 	mov.w	r0, #4294967295
 800806a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	e7e9      	b.n	8008046 <__ssputs_r+0x8a>
	...

08008074 <_svfiprintf_r>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	4698      	mov	r8, r3
 800807a:	898b      	ldrh	r3, [r1, #12]
 800807c:	4607      	mov	r7, r0
 800807e:	061b      	lsls	r3, r3, #24
 8008080:	460d      	mov	r5, r1
 8008082:	4614      	mov	r4, r2
 8008084:	b09d      	sub	sp, #116	@ 0x74
 8008086:	d510      	bpl.n	80080aa <_svfiprintf_r+0x36>
 8008088:	690b      	ldr	r3, [r1, #16]
 800808a:	b973      	cbnz	r3, 80080aa <_svfiprintf_r+0x36>
 800808c:	2140      	movs	r1, #64	@ 0x40
 800808e:	f7fe fbe5 	bl	800685c <_malloc_r>
 8008092:	6028      	str	r0, [r5, #0]
 8008094:	6128      	str	r0, [r5, #16]
 8008096:	b930      	cbnz	r0, 80080a6 <_svfiprintf_r+0x32>
 8008098:	230c      	movs	r3, #12
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	b01d      	add	sp, #116	@ 0x74
 80080a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a6:	2340      	movs	r3, #64	@ 0x40
 80080a8:	616b      	str	r3, [r5, #20]
 80080aa:	2300      	movs	r3, #0
 80080ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ae:	2320      	movs	r3, #32
 80080b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080b4:	2330      	movs	r3, #48	@ 0x30
 80080b6:	f04f 0901 	mov.w	r9, #1
 80080ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80080be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008258 <_svfiprintf_r+0x1e4>
 80080c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080c6:	4623      	mov	r3, r4
 80080c8:	469a      	mov	sl, r3
 80080ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ce:	b10a      	cbz	r2, 80080d4 <_svfiprintf_r+0x60>
 80080d0:	2a25      	cmp	r2, #37	@ 0x25
 80080d2:	d1f9      	bne.n	80080c8 <_svfiprintf_r+0x54>
 80080d4:	ebba 0b04 	subs.w	fp, sl, r4
 80080d8:	d00b      	beq.n	80080f2 <_svfiprintf_r+0x7e>
 80080da:	465b      	mov	r3, fp
 80080dc:	4622      	mov	r2, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7ff ff6b 	bl	8007fbc <__ssputs_r>
 80080e6:	3001      	adds	r0, #1
 80080e8:	f000 80a7 	beq.w	800823a <_svfiprintf_r+0x1c6>
 80080ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ee:	445a      	add	r2, fp
 80080f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080f2:	f89a 3000 	ldrb.w	r3, [sl]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 809f 	beq.w	800823a <_svfiprintf_r+0x1c6>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008106:	f10a 0a01 	add.w	sl, sl, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008112:	931a      	str	r3, [sp, #104]	@ 0x68
 8008114:	4654      	mov	r4, sl
 8008116:	2205      	movs	r2, #5
 8008118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811c:	484e      	ldr	r0, [pc, #312]	@ (8008258 <_svfiprintf_r+0x1e4>)
 800811e:	f7fd fcc6 	bl	8005aae <memchr>
 8008122:	9a04      	ldr	r2, [sp, #16]
 8008124:	b9d8      	cbnz	r0, 800815e <_svfiprintf_r+0xea>
 8008126:	06d0      	lsls	r0, r2, #27
 8008128:	bf44      	itt	mi
 800812a:	2320      	movmi	r3, #32
 800812c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008130:	0711      	lsls	r1, r2, #28
 8008132:	bf44      	itt	mi
 8008134:	232b      	movmi	r3, #43	@ 0x2b
 8008136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813a:	f89a 3000 	ldrb.w	r3, [sl]
 800813e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008140:	d015      	beq.n	800816e <_svfiprintf_r+0xfa>
 8008142:	4654      	mov	r4, sl
 8008144:	2000      	movs	r0, #0
 8008146:	f04f 0c0a 	mov.w	ip, #10
 800814a:	9a07      	ldr	r2, [sp, #28]
 800814c:	4621      	mov	r1, r4
 800814e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008152:	3b30      	subs	r3, #48	@ 0x30
 8008154:	2b09      	cmp	r3, #9
 8008156:	d94b      	bls.n	80081f0 <_svfiprintf_r+0x17c>
 8008158:	b1b0      	cbz	r0, 8008188 <_svfiprintf_r+0x114>
 800815a:	9207      	str	r2, [sp, #28]
 800815c:	e014      	b.n	8008188 <_svfiprintf_r+0x114>
 800815e:	eba0 0308 	sub.w	r3, r0, r8
 8008162:	fa09 f303 	lsl.w	r3, r9, r3
 8008166:	4313      	orrs	r3, r2
 8008168:	46a2      	mov	sl, r4
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	e7d2      	b.n	8008114 <_svfiprintf_r+0xa0>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	1d19      	adds	r1, r3, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	9103      	str	r1, [sp, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfbb      	ittet	lt
 800817a:	425b      	neglt	r3, r3
 800817c:	f042 0202 	orrlt.w	r2, r2, #2
 8008180:	9307      	strge	r3, [sp, #28]
 8008182:	9307      	strlt	r3, [sp, #28]
 8008184:	bfb8      	it	lt
 8008186:	9204      	strlt	r2, [sp, #16]
 8008188:	7823      	ldrb	r3, [r4, #0]
 800818a:	2b2e      	cmp	r3, #46	@ 0x2e
 800818c:	d10a      	bne.n	80081a4 <_svfiprintf_r+0x130>
 800818e:	7863      	ldrb	r3, [r4, #1]
 8008190:	2b2a      	cmp	r3, #42	@ 0x2a
 8008192:	d132      	bne.n	80081fa <_svfiprintf_r+0x186>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	3402      	adds	r4, #2
 8008198:	1d1a      	adds	r2, r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	9203      	str	r2, [sp, #12]
 800819e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800825c <_svfiprintf_r+0x1e8>
 80081a8:	2203      	movs	r2, #3
 80081aa:	4650      	mov	r0, sl
 80081ac:	7821      	ldrb	r1, [r4, #0]
 80081ae:	f7fd fc7e 	bl	8005aae <memchr>
 80081b2:	b138      	cbz	r0, 80081c4 <_svfiprintf_r+0x150>
 80081b4:	2240      	movs	r2, #64	@ 0x40
 80081b6:	9b04      	ldr	r3, [sp, #16]
 80081b8:	eba0 000a 	sub.w	r0, r0, sl
 80081bc:	4082      	lsls	r2, r0
 80081be:	4313      	orrs	r3, r2
 80081c0:	3401      	adds	r4, #1
 80081c2:	9304      	str	r3, [sp, #16]
 80081c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c8:	2206      	movs	r2, #6
 80081ca:	4825      	ldr	r0, [pc, #148]	@ (8008260 <_svfiprintf_r+0x1ec>)
 80081cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081d0:	f7fd fc6d 	bl	8005aae <memchr>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d036      	beq.n	8008246 <_svfiprintf_r+0x1d2>
 80081d8:	4b22      	ldr	r3, [pc, #136]	@ (8008264 <_svfiprintf_r+0x1f0>)
 80081da:	bb1b      	cbnz	r3, 8008224 <_svfiprintf_r+0x1b0>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	3307      	adds	r3, #7
 80081e0:	f023 0307 	bic.w	r3, r3, #7
 80081e4:	3308      	adds	r3, #8
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ea:	4433      	add	r3, r6
 80081ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ee:	e76a      	b.n	80080c6 <_svfiprintf_r+0x52>
 80081f0:	460c      	mov	r4, r1
 80081f2:	2001      	movs	r0, #1
 80081f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f8:	e7a8      	b.n	800814c <_svfiprintf_r+0xd8>
 80081fa:	2300      	movs	r3, #0
 80081fc:	f04f 0c0a 	mov.w	ip, #10
 8008200:	4619      	mov	r1, r3
 8008202:	3401      	adds	r4, #1
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	4620      	mov	r0, r4
 8008208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820c:	3a30      	subs	r2, #48	@ 0x30
 800820e:	2a09      	cmp	r2, #9
 8008210:	d903      	bls.n	800821a <_svfiprintf_r+0x1a6>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0c6      	beq.n	80081a4 <_svfiprintf_r+0x130>
 8008216:	9105      	str	r1, [sp, #20]
 8008218:	e7c4      	b.n	80081a4 <_svfiprintf_r+0x130>
 800821a:	4604      	mov	r4, r0
 800821c:	2301      	movs	r3, #1
 800821e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008222:	e7f0      	b.n	8008206 <_svfiprintf_r+0x192>
 8008224:	ab03      	add	r3, sp, #12
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	462a      	mov	r2, r5
 800822a:	4638      	mov	r0, r7
 800822c:	4b0e      	ldr	r3, [pc, #56]	@ (8008268 <_svfiprintf_r+0x1f4>)
 800822e:	a904      	add	r1, sp, #16
 8008230:	f7fc fc9e 	bl	8004b70 <_printf_float>
 8008234:	1c42      	adds	r2, r0, #1
 8008236:	4606      	mov	r6, r0
 8008238:	d1d6      	bne.n	80081e8 <_svfiprintf_r+0x174>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	065b      	lsls	r3, r3, #25
 800823e:	f53f af2d 	bmi.w	800809c <_svfiprintf_r+0x28>
 8008242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008244:	e72c      	b.n	80080a0 <_svfiprintf_r+0x2c>
 8008246:	ab03      	add	r3, sp, #12
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	462a      	mov	r2, r5
 800824c:	4638      	mov	r0, r7
 800824e:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <_svfiprintf_r+0x1f4>)
 8008250:	a904      	add	r1, sp, #16
 8008252:	f7fc ff2b 	bl	80050ac <_printf_i>
 8008256:	e7ed      	b.n	8008234 <_svfiprintf_r+0x1c0>
 8008258:	08009f09 	.word	0x08009f09
 800825c:	08009f0f 	.word	0x08009f0f
 8008260:	08009f13 	.word	0x08009f13
 8008264:	08004b71 	.word	0x08004b71
 8008268:	08007fbd 	.word	0x08007fbd

0800826c <_sungetc_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	1c4b      	adds	r3, r1, #1
 8008270:	4614      	mov	r4, r2
 8008272:	d103      	bne.n	800827c <_sungetc_r+0x10>
 8008274:	f04f 35ff 	mov.w	r5, #4294967295
 8008278:	4628      	mov	r0, r5
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	8993      	ldrh	r3, [r2, #12]
 800827e:	b2cd      	uxtb	r5, r1
 8008280:	f023 0320 	bic.w	r3, r3, #32
 8008284:	8193      	strh	r3, [r2, #12]
 8008286:	6853      	ldr	r3, [r2, #4]
 8008288:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800828a:	b18a      	cbz	r2, 80082b0 <_sungetc_r+0x44>
 800828c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800828e:	429a      	cmp	r2, r3
 8008290:	dd08      	ble.n	80082a4 <_sungetc_r+0x38>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	6022      	str	r2, [r4, #0]
 8008298:	f803 5c01 	strb.w	r5, [r3, #-1]
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	3301      	adds	r3, #1
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	e7e9      	b.n	8008278 <_sungetc_r+0xc>
 80082a4:	4621      	mov	r1, r4
 80082a6:	f000 fbd8 	bl	8008a5a <__submore>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d0f1      	beq.n	8008292 <_sungetc_r+0x26>
 80082ae:	e7e1      	b.n	8008274 <_sungetc_r+0x8>
 80082b0:	6921      	ldr	r1, [r4, #16]
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	b141      	cbz	r1, 80082c8 <_sungetc_r+0x5c>
 80082b6:	4291      	cmp	r1, r2
 80082b8:	d206      	bcs.n	80082c8 <_sungetc_r+0x5c>
 80082ba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80082be:	42a9      	cmp	r1, r5
 80082c0:	d102      	bne.n	80082c8 <_sungetc_r+0x5c>
 80082c2:	3a01      	subs	r2, #1
 80082c4:	6022      	str	r2, [r4, #0]
 80082c6:	e7ea      	b.n	800829e <_sungetc_r+0x32>
 80082c8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80082cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80082d2:	2303      	movs	r3, #3
 80082d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80082d6:	4623      	mov	r3, r4
 80082d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	2301      	movs	r3, #1
 80082e0:	e7de      	b.n	80082a0 <_sungetc_r+0x34>

080082e2 <__ssrefill_r>:
 80082e2:	b510      	push	{r4, lr}
 80082e4:	460c      	mov	r4, r1
 80082e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80082e8:	b169      	cbz	r1, 8008306 <__ssrefill_r+0x24>
 80082ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ee:	4299      	cmp	r1, r3
 80082f0:	d001      	beq.n	80082f6 <__ssrefill_r+0x14>
 80082f2:	f7fe fa41 	bl	8006778 <_free_r>
 80082f6:	2000      	movs	r0, #0
 80082f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	b113      	cbz	r3, 8008306 <__ssrefill_r+0x24>
 8008300:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd10      	pop	{r4, pc}
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	2300      	movs	r3, #0
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f043 0320 	orr.w	r3, r3, #32
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	e7f3      	b.n	8008304 <__ssrefill_r+0x22>

0800831c <__ssvfiscanf_r>:
 800831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	460c      	mov	r4, r1
 8008322:	2100      	movs	r1, #0
 8008324:	4606      	mov	r6, r0
 8008326:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800832a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800832e:	49aa      	ldr	r1, [pc, #680]	@ (80085d8 <__ssvfiscanf_r+0x2bc>)
 8008330:	f10d 0804 	add.w	r8, sp, #4
 8008334:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008336:	49a9      	ldr	r1, [pc, #676]	@ (80085dc <__ssvfiscanf_r+0x2c0>)
 8008338:	4fa9      	ldr	r7, [pc, #676]	@ (80085e0 <__ssvfiscanf_r+0x2c4>)
 800833a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800833e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	7813      	ldrb	r3, [r2, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8159 	beq.w	80085fc <__ssvfiscanf_r+0x2e0>
 800834a:	5cf9      	ldrb	r1, [r7, r3]
 800834c:	1c55      	adds	r5, r2, #1
 800834e:	f011 0108 	ands.w	r1, r1, #8
 8008352:	d019      	beq.n	8008388 <__ssvfiscanf_r+0x6c>
 8008354:	6863      	ldr	r3, [r4, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	dd0f      	ble.n	800837a <__ssvfiscanf_r+0x5e>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	781a      	ldrb	r2, [r3, #0]
 800835e:	5cba      	ldrb	r2, [r7, r2]
 8008360:	0712      	lsls	r2, r2, #28
 8008362:	d401      	bmi.n	8008368 <__ssvfiscanf_r+0x4c>
 8008364:	462a      	mov	r2, r5
 8008366:	e7ec      	b.n	8008342 <__ssvfiscanf_r+0x26>
 8008368:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800836a:	3301      	adds	r3, #1
 800836c:	3201      	adds	r2, #1
 800836e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008370:	6862      	ldr	r2, [r4, #4]
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	3a01      	subs	r2, #1
 8008376:	6062      	str	r2, [r4, #4]
 8008378:	e7ec      	b.n	8008354 <__ssvfiscanf_r+0x38>
 800837a:	4621      	mov	r1, r4
 800837c:	4630      	mov	r0, r6
 800837e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008380:	4798      	blx	r3
 8008382:	2800      	cmp	r0, #0
 8008384:	d0e9      	beq.n	800835a <__ssvfiscanf_r+0x3e>
 8008386:	e7ed      	b.n	8008364 <__ssvfiscanf_r+0x48>
 8008388:	2b25      	cmp	r3, #37	@ 0x25
 800838a:	d012      	beq.n	80083b2 <__ssvfiscanf_r+0x96>
 800838c:	4699      	mov	r9, r3
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f340 8094 	ble.w	80084be <__ssvfiscanf_r+0x1a2>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	7813      	ldrb	r3, [r2, #0]
 800839a:	454b      	cmp	r3, r9
 800839c:	f040 812e 	bne.w	80085fc <__ssvfiscanf_r+0x2e0>
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	3201      	adds	r2, #1
 80083a4:	3b01      	subs	r3, #1
 80083a6:	6063      	str	r3, [r4, #4]
 80083a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	3301      	adds	r3, #1
 80083ae:	9345      	str	r3, [sp, #276]	@ 0x114
 80083b0:	e7d8      	b.n	8008364 <__ssvfiscanf_r+0x48>
 80083b2:	9141      	str	r1, [sp, #260]	@ 0x104
 80083b4:	9143      	str	r1, [sp, #268]	@ 0x10c
 80083b6:	7853      	ldrb	r3, [r2, #1]
 80083b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ba:	bf04      	itt	eq
 80083bc:	2310      	moveq	r3, #16
 80083be:	1c95      	addeq	r5, r2, #2
 80083c0:	f04f 020a 	mov.w	r2, #10
 80083c4:	bf08      	it	eq
 80083c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80083c8:	46a9      	mov	r9, r5
 80083ca:	f819 1b01 	ldrb.w	r1, [r9], #1
 80083ce:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d91e      	bls.n	8008414 <__ssvfiscanf_r+0xf8>
 80083d6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80085e4 <__ssvfiscanf_r+0x2c8>
 80083da:	2203      	movs	r2, #3
 80083dc:	4650      	mov	r0, sl
 80083de:	f7fd fb66 	bl	8005aae <memchr>
 80083e2:	b138      	cbz	r0, 80083f4 <__ssvfiscanf_r+0xd8>
 80083e4:	2301      	movs	r3, #1
 80083e6:	464d      	mov	r5, r9
 80083e8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80083ea:	eba0 000a 	sub.w	r0, r0, sl
 80083ee:	4083      	lsls	r3, r0
 80083f0:	4313      	orrs	r3, r2
 80083f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80083f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083f8:	2b78      	cmp	r3, #120	@ 0x78
 80083fa:	d806      	bhi.n	800840a <__ssvfiscanf_r+0xee>
 80083fc:	2b57      	cmp	r3, #87	@ 0x57
 80083fe:	d810      	bhi.n	8008422 <__ssvfiscanf_r+0x106>
 8008400:	2b25      	cmp	r3, #37	@ 0x25
 8008402:	d0c3      	beq.n	800838c <__ssvfiscanf_r+0x70>
 8008404:	d856      	bhi.n	80084b4 <__ssvfiscanf_r+0x198>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d064      	beq.n	80084d4 <__ssvfiscanf_r+0x1b8>
 800840a:	2303      	movs	r3, #3
 800840c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800840e:	230a      	movs	r3, #10
 8008410:	9342      	str	r3, [sp, #264]	@ 0x108
 8008412:	e077      	b.n	8008504 <__ssvfiscanf_r+0x1e8>
 8008414:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008416:	464d      	mov	r5, r9
 8008418:	fb02 1103 	mla	r1, r2, r3, r1
 800841c:	3930      	subs	r1, #48	@ 0x30
 800841e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008420:	e7d2      	b.n	80083c8 <__ssvfiscanf_r+0xac>
 8008422:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008426:	2a20      	cmp	r2, #32
 8008428:	d8ef      	bhi.n	800840a <__ssvfiscanf_r+0xee>
 800842a:	a101      	add	r1, pc, #4	@ (adr r1, 8008430 <__ssvfiscanf_r+0x114>)
 800842c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008430:	080084e3 	.word	0x080084e3
 8008434:	0800840b 	.word	0x0800840b
 8008438:	0800840b 	.word	0x0800840b
 800843c:	0800853d 	.word	0x0800853d
 8008440:	0800840b 	.word	0x0800840b
 8008444:	0800840b 	.word	0x0800840b
 8008448:	0800840b 	.word	0x0800840b
 800844c:	0800840b 	.word	0x0800840b
 8008450:	0800840b 	.word	0x0800840b
 8008454:	0800840b 	.word	0x0800840b
 8008458:	0800840b 	.word	0x0800840b
 800845c:	08008553 	.word	0x08008553
 8008460:	08008539 	.word	0x08008539
 8008464:	080084bb 	.word	0x080084bb
 8008468:	080084bb 	.word	0x080084bb
 800846c:	080084bb 	.word	0x080084bb
 8008470:	0800840b 	.word	0x0800840b
 8008474:	080084f5 	.word	0x080084f5
 8008478:	0800840b 	.word	0x0800840b
 800847c:	0800840b 	.word	0x0800840b
 8008480:	0800840b 	.word	0x0800840b
 8008484:	0800840b 	.word	0x0800840b
 8008488:	08008563 	.word	0x08008563
 800848c:	080084fd 	.word	0x080084fd
 8008490:	080084db 	.word	0x080084db
 8008494:	0800840b 	.word	0x0800840b
 8008498:	0800840b 	.word	0x0800840b
 800849c:	0800855f 	.word	0x0800855f
 80084a0:	0800840b 	.word	0x0800840b
 80084a4:	08008539 	.word	0x08008539
 80084a8:	0800840b 	.word	0x0800840b
 80084ac:	0800840b 	.word	0x0800840b
 80084b0:	080084e3 	.word	0x080084e3
 80084b4:	3b45      	subs	r3, #69	@ 0x45
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d8a7      	bhi.n	800840a <__ssvfiscanf_r+0xee>
 80084ba:	2305      	movs	r3, #5
 80084bc:	e021      	b.n	8008502 <__ssvfiscanf_r+0x1e6>
 80084be:	4621      	mov	r1, r4
 80084c0:	4630      	mov	r0, r6
 80084c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084c4:	4798      	blx	r3
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f af65 	beq.w	8008396 <__ssvfiscanf_r+0x7a>
 80084cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f040 808c 	bne.w	80085ec <__ssvfiscanf_r+0x2d0>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e08c      	b.n	80085f4 <__ssvfiscanf_r+0x2d8>
 80084da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80084dc:	f042 0220 	orr.w	r2, r2, #32
 80084e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80084e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80084e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80084ea:	2210      	movs	r2, #16
 80084ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80084ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80084f0:	d902      	bls.n	80084f8 <__ssvfiscanf_r+0x1dc>
 80084f2:	e005      	b.n	8008500 <__ssvfiscanf_r+0x1e4>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80084f8:	2303      	movs	r3, #3
 80084fa:	e002      	b.n	8008502 <__ssvfiscanf_r+0x1e6>
 80084fc:	2308      	movs	r3, #8
 80084fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8008500:	2304      	movs	r3, #4
 8008502:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd39      	ble.n	800857e <__ssvfiscanf_r+0x262>
 800850a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800850c:	0659      	lsls	r1, r3, #25
 800850e:	d404      	bmi.n	800851a <__ssvfiscanf_r+0x1fe>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	5cba      	ldrb	r2, [r7, r2]
 8008516:	0712      	lsls	r2, r2, #28
 8008518:	d438      	bmi.n	800858c <__ssvfiscanf_r+0x270>
 800851a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800851c:	2b02      	cmp	r3, #2
 800851e:	dc47      	bgt.n	80085b0 <__ssvfiscanf_r+0x294>
 8008520:	466b      	mov	r3, sp
 8008522:	4622      	mov	r2, r4
 8008524:	4630      	mov	r0, r6
 8008526:	a941      	add	r1, sp, #260	@ 0x104
 8008528:	f000 f86a 	bl	8008600 <_scanf_chars>
 800852c:	2801      	cmp	r0, #1
 800852e:	d065      	beq.n	80085fc <__ssvfiscanf_r+0x2e0>
 8008530:	2802      	cmp	r0, #2
 8008532:	f47f af17 	bne.w	8008364 <__ssvfiscanf_r+0x48>
 8008536:	e7c9      	b.n	80084cc <__ssvfiscanf_r+0x1b0>
 8008538:	220a      	movs	r2, #10
 800853a:	e7d7      	b.n	80084ec <__ssvfiscanf_r+0x1d0>
 800853c:	4629      	mov	r1, r5
 800853e:	4640      	mov	r0, r8
 8008540:	f000 fa52 	bl	80089e8 <__sccl>
 8008544:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008546:	4605      	mov	r5, r0
 8008548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800854c:	9341      	str	r3, [sp, #260]	@ 0x104
 800854e:	2301      	movs	r3, #1
 8008550:	e7d7      	b.n	8008502 <__ssvfiscanf_r+0x1e6>
 8008552:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008558:	9341      	str	r3, [sp, #260]	@ 0x104
 800855a:	2300      	movs	r3, #0
 800855c:	e7d1      	b.n	8008502 <__ssvfiscanf_r+0x1e6>
 800855e:	2302      	movs	r3, #2
 8008560:	e7cf      	b.n	8008502 <__ssvfiscanf_r+0x1e6>
 8008562:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008564:	06c3      	lsls	r3, r0, #27
 8008566:	f53f aefd 	bmi.w	8008364 <__ssvfiscanf_r+0x48>
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800856e:	1d19      	adds	r1, r3, #4
 8008570:	9100      	str	r1, [sp, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	07c0      	lsls	r0, r0, #31
 8008576:	bf4c      	ite	mi
 8008578:	801a      	strhmi	r2, [r3, #0]
 800857a:	601a      	strpl	r2, [r3, #0]
 800857c:	e6f2      	b.n	8008364 <__ssvfiscanf_r+0x48>
 800857e:	4621      	mov	r1, r4
 8008580:	4630      	mov	r0, r6
 8008582:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008584:	4798      	blx	r3
 8008586:	2800      	cmp	r0, #0
 8008588:	d0bf      	beq.n	800850a <__ssvfiscanf_r+0x1ee>
 800858a:	e79f      	b.n	80084cc <__ssvfiscanf_r+0x1b0>
 800858c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800858e:	3201      	adds	r2, #1
 8008590:	9245      	str	r2, [sp, #276]	@ 0x114
 8008592:	6862      	ldr	r2, [r4, #4]
 8008594:	3a01      	subs	r2, #1
 8008596:	2a00      	cmp	r2, #0
 8008598:	6062      	str	r2, [r4, #4]
 800859a:	dd02      	ble.n	80085a2 <__ssvfiscanf_r+0x286>
 800859c:	3301      	adds	r3, #1
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	e7b6      	b.n	8008510 <__ssvfiscanf_r+0x1f4>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4630      	mov	r0, r6
 80085a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80085a8:	4798      	blx	r3
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d0b0      	beq.n	8008510 <__ssvfiscanf_r+0x1f4>
 80085ae:	e78d      	b.n	80084cc <__ssvfiscanf_r+0x1b0>
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	dc06      	bgt.n	80085c2 <__ssvfiscanf_r+0x2a6>
 80085b4:	466b      	mov	r3, sp
 80085b6:	4622      	mov	r2, r4
 80085b8:	4630      	mov	r0, r6
 80085ba:	a941      	add	r1, sp, #260	@ 0x104
 80085bc:	f000 f87a 	bl	80086b4 <_scanf_i>
 80085c0:	e7b4      	b.n	800852c <__ssvfiscanf_r+0x210>
 80085c2:	4b09      	ldr	r3, [pc, #36]	@ (80085e8 <__ssvfiscanf_r+0x2cc>)
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f43f aecd 	beq.w	8008364 <__ssvfiscanf_r+0x48>
 80085ca:	466b      	mov	r3, sp
 80085cc:	4622      	mov	r2, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	a941      	add	r1, sp, #260	@ 0x104
 80085d2:	f7fc fe8b 	bl	80052ec <_scanf_float>
 80085d6:	e7a9      	b.n	800852c <__ssvfiscanf_r+0x210>
 80085d8:	0800826d 	.word	0x0800826d
 80085dc:	080082e3 	.word	0x080082e3
 80085e0:	08009e09 	.word	0x08009e09
 80085e4:	08009f0f 	.word	0x08009f0f
 80085e8:	080052ed 	.word	0x080052ed
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	065b      	lsls	r3, r3, #25
 80085f0:	f53f af70 	bmi.w	80084d4 <__ssvfiscanf_r+0x1b8>
 80085f4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80085f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80085fe:	e7f9      	b.n	80085f4 <__ssvfiscanf_r+0x2d8>

08008600 <_scanf_chars>:
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	4615      	mov	r5, r2
 8008606:	688a      	ldr	r2, [r1, #8]
 8008608:	4680      	mov	r8, r0
 800860a:	460c      	mov	r4, r1
 800860c:	b932      	cbnz	r2, 800861c <_scanf_chars+0x1c>
 800860e:	698a      	ldr	r2, [r1, #24]
 8008610:	2a00      	cmp	r2, #0
 8008612:	bf14      	ite	ne
 8008614:	f04f 32ff 	movne.w	r2, #4294967295
 8008618:	2201      	moveq	r2, #1
 800861a:	608a      	str	r2, [r1, #8]
 800861c:	2700      	movs	r7, #0
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80086b0 <_scanf_chars+0xb0>
 8008624:	06d1      	lsls	r1, r2, #27
 8008626:	bf5f      	itttt	pl
 8008628:	681a      	ldrpl	r2, [r3, #0]
 800862a:	1d11      	addpl	r1, r2, #4
 800862c:	6019      	strpl	r1, [r3, #0]
 800862e:	6816      	ldrpl	r6, [r2, #0]
 8008630:	69a0      	ldr	r0, [r4, #24]
 8008632:	b188      	cbz	r0, 8008658 <_scanf_chars+0x58>
 8008634:	2801      	cmp	r0, #1
 8008636:	d107      	bne.n	8008648 <_scanf_chars+0x48>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	6963      	ldr	r3, [r4, #20]
 800863e:	5c9b      	ldrb	r3, [r3, r2]
 8008640:	b953      	cbnz	r3, 8008658 <_scanf_chars+0x58>
 8008642:	2f00      	cmp	r7, #0
 8008644:	d031      	beq.n	80086aa <_scanf_chars+0xaa>
 8008646:	e022      	b.n	800868e <_scanf_chars+0x8e>
 8008648:	2802      	cmp	r0, #2
 800864a:	d120      	bne.n	800868e <_scanf_chars+0x8e>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008654:	071b      	lsls	r3, r3, #28
 8008656:	d41a      	bmi.n	800868e <_scanf_chars+0x8e>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	3701      	adds	r7, #1
 800865c:	06da      	lsls	r2, r3, #27
 800865e:	bf5e      	ittt	pl
 8008660:	682b      	ldrpl	r3, [r5, #0]
 8008662:	781b      	ldrbpl	r3, [r3, #0]
 8008664:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008668:	682a      	ldr	r2, [r5, #0]
 800866a:	686b      	ldr	r3, [r5, #4]
 800866c:	3201      	adds	r2, #1
 800866e:	602a      	str	r2, [r5, #0]
 8008670:	68a2      	ldr	r2, [r4, #8]
 8008672:	3b01      	subs	r3, #1
 8008674:	3a01      	subs	r2, #1
 8008676:	606b      	str	r3, [r5, #4]
 8008678:	60a2      	str	r2, [r4, #8]
 800867a:	b142      	cbz	r2, 800868e <_scanf_chars+0x8e>
 800867c:	2b00      	cmp	r3, #0
 800867e:	dcd7      	bgt.n	8008630 <_scanf_chars+0x30>
 8008680:	4629      	mov	r1, r5
 8008682:	4640      	mov	r0, r8
 8008684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008688:	4798      	blx	r3
 800868a:	2800      	cmp	r0, #0
 800868c:	d0d0      	beq.n	8008630 <_scanf_chars+0x30>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	f013 0310 	ands.w	r3, r3, #16
 8008694:	d105      	bne.n	80086a2 <_scanf_chars+0xa2>
 8008696:	68e2      	ldr	r2, [r4, #12]
 8008698:	3201      	adds	r2, #1
 800869a:	60e2      	str	r2, [r4, #12]
 800869c:	69a2      	ldr	r2, [r4, #24]
 800869e:	b102      	cbz	r2, 80086a2 <_scanf_chars+0xa2>
 80086a0:	7033      	strb	r3, [r6, #0]
 80086a2:	2000      	movs	r0, #0
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	443b      	add	r3, r7
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ae:	bf00      	nop
 80086b0:	08009e09 	.word	0x08009e09

080086b4 <_scanf_i>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	460c      	mov	r4, r1
 80086ba:	4698      	mov	r8, r3
 80086bc:	4b72      	ldr	r3, [pc, #456]	@ (8008888 <_scanf_i+0x1d4>)
 80086be:	b087      	sub	sp, #28
 80086c0:	4682      	mov	sl, r0
 80086c2:	4616      	mov	r6, r2
 80086c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80086ce:	4b6f      	ldr	r3, [pc, #444]	@ (800888c <_scanf_i+0x1d8>)
 80086d0:	69a1      	ldr	r1, [r4, #24]
 80086d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008890 <_scanf_i+0x1dc>)
 80086d4:	4627      	mov	r7, r4
 80086d6:	2903      	cmp	r1, #3
 80086d8:	bf08      	it	eq
 80086da:	461a      	moveq	r2, r3
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	9201      	str	r2, [sp, #4]
 80086e0:	1e5a      	subs	r2, r3, #1
 80086e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80086e6:	bf81      	itttt	hi
 80086e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80086ec:	eb03 0905 	addhi.w	r9, r3, r5
 80086f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086f4:	60a3      	strhi	r3, [r4, #8]
 80086f6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80086fa:	bf98      	it	ls
 80086fc:	f04f 0900 	movls.w	r9, #0
 8008700:	463d      	mov	r5, r7
 8008702:	f04f 0b00 	mov.w	fp, #0
 8008706:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	6831      	ldr	r1, [r6, #0]
 800870e:	ab03      	add	r3, sp, #12
 8008710:	2202      	movs	r2, #2
 8008712:	7809      	ldrb	r1, [r1, #0]
 8008714:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008718:	f7fd f9c9 	bl	8005aae <memchr>
 800871c:	b328      	cbz	r0, 800876a <_scanf_i+0xb6>
 800871e:	f1bb 0f01 	cmp.w	fp, #1
 8008722:	d159      	bne.n	80087d8 <_scanf_i+0x124>
 8008724:	6862      	ldr	r2, [r4, #4]
 8008726:	b92a      	cbnz	r2, 8008734 <_scanf_i+0x80>
 8008728:	2108      	movs	r1, #8
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	6061      	str	r1, [r4, #4]
 800872e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008732:	6022      	str	r2, [r4, #0]
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	68a2      	ldr	r2, [r4, #8]
 800873e:	1e51      	subs	r1, r2, #1
 8008740:	60a1      	str	r1, [r4, #8]
 8008742:	b192      	cbz	r2, 800876a <_scanf_i+0xb6>
 8008744:	6832      	ldr	r2, [r6, #0]
 8008746:	1c51      	adds	r1, r2, #1
 8008748:	6031      	str	r1, [r6, #0]
 800874a:	7812      	ldrb	r2, [r2, #0]
 800874c:	f805 2b01 	strb.w	r2, [r5], #1
 8008750:	6872      	ldr	r2, [r6, #4]
 8008752:	3a01      	subs	r2, #1
 8008754:	2a00      	cmp	r2, #0
 8008756:	6072      	str	r2, [r6, #4]
 8008758:	dc07      	bgt.n	800876a <_scanf_i+0xb6>
 800875a:	4631      	mov	r1, r6
 800875c:	4650      	mov	r0, sl
 800875e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008762:	4790      	blx	r2
 8008764:	2800      	cmp	r0, #0
 8008766:	f040 8085 	bne.w	8008874 <_scanf_i+0x1c0>
 800876a:	f10b 0b01 	add.w	fp, fp, #1
 800876e:	f1bb 0f03 	cmp.w	fp, #3
 8008772:	d1cb      	bne.n	800870c <_scanf_i+0x58>
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	b90b      	cbnz	r3, 800877c <_scanf_i+0xc8>
 8008778:	230a      	movs	r3, #10
 800877a:	6063      	str	r3, [r4, #4]
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	4945      	ldr	r1, [pc, #276]	@ (8008894 <_scanf_i+0x1e0>)
 8008780:	6960      	ldr	r0, [r4, #20]
 8008782:	1ac9      	subs	r1, r1, r3
 8008784:	f000 f930 	bl	80089e8 <__sccl>
 8008788:	f04f 0b00 	mov.w	fp, #0
 800878c:	68a3      	ldr	r3, [r4, #8]
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d03d      	beq.n	8008810 <_scanf_i+0x15c>
 8008794:	6831      	ldr	r1, [r6, #0]
 8008796:	6960      	ldr	r0, [r4, #20]
 8008798:	f891 c000 	ldrb.w	ip, [r1]
 800879c:	f810 000c 	ldrb.w	r0, [r0, ip]
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d035      	beq.n	8008810 <_scanf_i+0x15c>
 80087a4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80087a8:	d124      	bne.n	80087f4 <_scanf_i+0x140>
 80087aa:	0510      	lsls	r0, r2, #20
 80087ac:	d522      	bpl.n	80087f4 <_scanf_i+0x140>
 80087ae:	f10b 0b01 	add.w	fp, fp, #1
 80087b2:	f1b9 0f00 	cmp.w	r9, #0
 80087b6:	d003      	beq.n	80087c0 <_scanf_i+0x10c>
 80087b8:	3301      	adds	r3, #1
 80087ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80087be:	60a3      	str	r3, [r4, #8]
 80087c0:	6873      	ldr	r3, [r6, #4]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	6073      	str	r3, [r6, #4]
 80087c8:	dd1b      	ble.n	8008802 <_scanf_i+0x14e>
 80087ca:	6833      	ldr	r3, [r6, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	6033      	str	r3, [r6, #0]
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	e7d9      	b.n	800878c <_scanf_i+0xd8>
 80087d8:	f1bb 0f02 	cmp.w	fp, #2
 80087dc:	d1ae      	bne.n	800873c <_scanf_i+0x88>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80087e4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80087e8:	d1bf      	bne.n	800876a <_scanf_i+0xb6>
 80087ea:	2110      	movs	r1, #16
 80087ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087f0:	6061      	str	r1, [r4, #4]
 80087f2:	e7a2      	b.n	800873a <_scanf_i+0x86>
 80087f4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80087f8:	6022      	str	r2, [r4, #0]
 80087fa:	780b      	ldrb	r3, [r1, #0]
 80087fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008800:	e7de      	b.n	80087c0 <_scanf_i+0x10c>
 8008802:	4631      	mov	r1, r6
 8008804:	4650      	mov	r0, sl
 8008806:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800880a:	4798      	blx	r3
 800880c:	2800      	cmp	r0, #0
 800880e:	d0df      	beq.n	80087d0 <_scanf_i+0x11c>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	05d9      	lsls	r1, r3, #23
 8008814:	d50d      	bpl.n	8008832 <_scanf_i+0x17e>
 8008816:	42bd      	cmp	r5, r7
 8008818:	d909      	bls.n	800882e <_scanf_i+0x17a>
 800881a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800881e:	4632      	mov	r2, r6
 8008820:	4650      	mov	r0, sl
 8008822:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008826:	f105 39ff 	add.w	r9, r5, #4294967295
 800882a:	4798      	blx	r3
 800882c:	464d      	mov	r5, r9
 800882e:	42bd      	cmp	r5, r7
 8008830:	d028      	beq.n	8008884 <_scanf_i+0x1d0>
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	f012 0210 	ands.w	r2, r2, #16
 8008838:	d113      	bne.n	8008862 <_scanf_i+0x1ae>
 800883a:	702a      	strb	r2, [r5, #0]
 800883c:	4639      	mov	r1, r7
 800883e:	6863      	ldr	r3, [r4, #4]
 8008840:	4650      	mov	r0, sl
 8008842:	9e01      	ldr	r6, [sp, #4]
 8008844:	47b0      	blx	r6
 8008846:	f8d8 3000 	ldr.w	r3, [r8]
 800884a:	6821      	ldr	r1, [r4, #0]
 800884c:	1d1a      	adds	r2, r3, #4
 800884e:	f8c8 2000 	str.w	r2, [r8]
 8008852:	f011 0f20 	tst.w	r1, #32
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	d00f      	beq.n	800887a <_scanf_i+0x1c6>
 800885a:	6018      	str	r0, [r3, #0]
 800885c:	68e3      	ldr	r3, [r4, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60e3      	str	r3, [r4, #12]
 8008862:	2000      	movs	r0, #0
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	1bed      	subs	r5, r5, r7
 8008868:	445d      	add	r5, fp
 800886a:	442b      	add	r3, r5
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	b007      	add	sp, #28
 8008870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008874:	f04f 0b00 	mov.w	fp, #0
 8008878:	e7ca      	b.n	8008810 <_scanf_i+0x15c>
 800887a:	07ca      	lsls	r2, r1, #31
 800887c:	bf4c      	ite	mi
 800887e:	8018      	strhmi	r0, [r3, #0]
 8008880:	6018      	strpl	r0, [r3, #0]
 8008882:	e7eb      	b.n	800885c <_scanf_i+0x1a8>
 8008884:	2001      	movs	r0, #1
 8008886:	e7f2      	b.n	800886e <_scanf_i+0x1ba>
 8008888:	08009b50 	.word	0x08009b50
 800888c:	08007fb9 	.word	0x08007fb9
 8008890:	080093a1 	.word	0x080093a1
 8008894:	08009f2a 	.word	0x08009f2a

08008898 <__sflush_r>:
 8008898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	0716      	lsls	r6, r2, #28
 80088a0:	4605      	mov	r5, r0
 80088a2:	460c      	mov	r4, r1
 80088a4:	d454      	bmi.n	8008950 <__sflush_r+0xb8>
 80088a6:	684b      	ldr	r3, [r1, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	dc02      	bgt.n	80088b2 <__sflush_r+0x1a>
 80088ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd48      	ble.n	8008944 <__sflush_r+0xac>
 80088b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b4:	2e00      	cmp	r6, #0
 80088b6:	d045      	beq.n	8008944 <__sflush_r+0xac>
 80088b8:	2300      	movs	r3, #0
 80088ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088be:	682f      	ldr	r7, [r5, #0]
 80088c0:	6a21      	ldr	r1, [r4, #32]
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	d030      	beq.n	8008928 <__sflush_r+0x90>
 80088c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	0759      	lsls	r1, r3, #29
 80088cc:	d505      	bpl.n	80088da <__sflush_r+0x42>
 80088ce:	6863      	ldr	r3, [r4, #4]
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088d4:	b10b      	cbz	r3, 80088da <__sflush_r+0x42>
 80088d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	2300      	movs	r3, #0
 80088dc:	4628      	mov	r0, r5
 80088de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088e0:	6a21      	ldr	r1, [r4, #32]
 80088e2:	47b0      	blx	r6
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	d106      	bne.n	80088f8 <__sflush_r+0x60>
 80088ea:	6829      	ldr	r1, [r5, #0]
 80088ec:	291d      	cmp	r1, #29
 80088ee:	d82b      	bhi.n	8008948 <__sflush_r+0xb0>
 80088f0:	4a28      	ldr	r2, [pc, #160]	@ (8008994 <__sflush_r+0xfc>)
 80088f2:	410a      	asrs	r2, r1
 80088f4:	07d6      	lsls	r6, r2, #31
 80088f6:	d427      	bmi.n	8008948 <__sflush_r+0xb0>
 80088f8:	2200      	movs	r2, #0
 80088fa:	6062      	str	r2, [r4, #4]
 80088fc:	6922      	ldr	r2, [r4, #16]
 80088fe:	04d9      	lsls	r1, r3, #19
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	d504      	bpl.n	800890e <__sflush_r+0x76>
 8008904:	1c42      	adds	r2, r0, #1
 8008906:	d101      	bne.n	800890c <__sflush_r+0x74>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b903      	cbnz	r3, 800890e <__sflush_r+0x76>
 800890c:	6560      	str	r0, [r4, #84]	@ 0x54
 800890e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008910:	602f      	str	r7, [r5, #0]
 8008912:	b1b9      	cbz	r1, 8008944 <__sflush_r+0xac>
 8008914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008918:	4299      	cmp	r1, r3
 800891a:	d002      	beq.n	8008922 <__sflush_r+0x8a>
 800891c:	4628      	mov	r0, r5
 800891e:	f7fd ff2b 	bl	8006778 <_free_r>
 8008922:	2300      	movs	r3, #0
 8008924:	6363      	str	r3, [r4, #52]	@ 0x34
 8008926:	e00d      	b.n	8008944 <__sflush_r+0xac>
 8008928:	2301      	movs	r3, #1
 800892a:	4628      	mov	r0, r5
 800892c:	47b0      	blx	r6
 800892e:	4602      	mov	r2, r0
 8008930:	1c50      	adds	r0, r2, #1
 8008932:	d1c9      	bne.n	80088c8 <__sflush_r+0x30>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0c6      	beq.n	80088c8 <__sflush_r+0x30>
 800893a:	2b1d      	cmp	r3, #29
 800893c:	d001      	beq.n	8008942 <__sflush_r+0xaa>
 800893e:	2b16      	cmp	r3, #22
 8008940:	d11d      	bne.n	800897e <__sflush_r+0xe6>
 8008942:	602f      	str	r7, [r5, #0]
 8008944:	2000      	movs	r0, #0
 8008946:	e021      	b.n	800898c <__sflush_r+0xf4>
 8008948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800894c:	b21b      	sxth	r3, r3
 800894e:	e01a      	b.n	8008986 <__sflush_r+0xee>
 8008950:	690f      	ldr	r7, [r1, #16]
 8008952:	2f00      	cmp	r7, #0
 8008954:	d0f6      	beq.n	8008944 <__sflush_r+0xac>
 8008956:	0793      	lsls	r3, r2, #30
 8008958:	bf18      	it	ne
 800895a:	2300      	movne	r3, #0
 800895c:	680e      	ldr	r6, [r1, #0]
 800895e:	bf08      	it	eq
 8008960:	694b      	ldreq	r3, [r1, #20]
 8008962:	1bf6      	subs	r6, r6, r7
 8008964:	600f      	str	r7, [r1, #0]
 8008966:	608b      	str	r3, [r1, #8]
 8008968:	2e00      	cmp	r6, #0
 800896a:	ddeb      	ble.n	8008944 <__sflush_r+0xac>
 800896c:	4633      	mov	r3, r6
 800896e:	463a      	mov	r2, r7
 8008970:	4628      	mov	r0, r5
 8008972:	6a21      	ldr	r1, [r4, #32]
 8008974:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008978:	47e0      	blx	ip
 800897a:	2800      	cmp	r0, #0
 800897c:	dc07      	bgt.n	800898e <__sflush_r+0xf6>
 800897e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008986:	f04f 30ff 	mov.w	r0, #4294967295
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800898e:	4407      	add	r7, r0
 8008990:	1a36      	subs	r6, r6, r0
 8008992:	e7e9      	b.n	8008968 <__sflush_r+0xd0>
 8008994:	dfbffffe 	.word	0xdfbffffe

08008998 <_fflush_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	690b      	ldr	r3, [r1, #16]
 800899c:	4605      	mov	r5, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	b913      	cbnz	r3, 80089a8 <_fflush_r+0x10>
 80089a2:	2500      	movs	r5, #0
 80089a4:	4628      	mov	r0, r5
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	b118      	cbz	r0, 80089b2 <_fflush_r+0x1a>
 80089aa:	6a03      	ldr	r3, [r0, #32]
 80089ac:	b90b      	cbnz	r3, 80089b2 <_fflush_r+0x1a>
 80089ae:	f7fc ff39 	bl	8005824 <__sinit>
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f3      	beq.n	80089a2 <_fflush_r+0xa>
 80089ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089bc:	07d0      	lsls	r0, r2, #31
 80089be:	d404      	bmi.n	80089ca <_fflush_r+0x32>
 80089c0:	0599      	lsls	r1, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_fflush_r+0x32>
 80089c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089c6:	f7fd f870 	bl	8005aaa <__retarget_lock_acquire_recursive>
 80089ca:	4628      	mov	r0, r5
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7ff ff63 	bl	8008898 <__sflush_r>
 80089d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089d4:	4605      	mov	r5, r0
 80089d6:	07da      	lsls	r2, r3, #31
 80089d8:	d4e4      	bmi.n	80089a4 <_fflush_r+0xc>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	059b      	lsls	r3, r3, #22
 80089de:	d4e1      	bmi.n	80089a4 <_fflush_r+0xc>
 80089e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089e2:	f7fd f863 	bl	8005aac <__retarget_lock_release_recursive>
 80089e6:	e7dd      	b.n	80089a4 <_fflush_r+0xc>

080089e8 <__sccl>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	780b      	ldrb	r3, [r1, #0]
 80089ec:	4604      	mov	r4, r0
 80089ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80089f0:	bf0b      	itete	eq
 80089f2:	784b      	ldrbeq	r3, [r1, #1]
 80089f4:	1c4a      	addne	r2, r1, #1
 80089f6:	1c8a      	addeq	r2, r1, #2
 80089f8:	2100      	movne	r1, #0
 80089fa:	bf08      	it	eq
 80089fc:	2101      	moveq	r1, #1
 80089fe:	3801      	subs	r0, #1
 8008a00:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008a04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008a08:	42a8      	cmp	r0, r5
 8008a0a:	d1fb      	bne.n	8008a04 <__sccl+0x1c>
 8008a0c:	b90b      	cbnz	r3, 8008a12 <__sccl+0x2a>
 8008a0e:	1e50      	subs	r0, r2, #1
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	f081 0101 	eor.w	r1, r1, #1
 8008a16:	4610      	mov	r0, r2
 8008a18:	54e1      	strb	r1, [r4, r3]
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008a20:	2d2d      	cmp	r5, #45	@ 0x2d
 8008a22:	d005      	beq.n	8008a30 <__sccl+0x48>
 8008a24:	2d5d      	cmp	r5, #93	@ 0x5d
 8008a26:	d016      	beq.n	8008a56 <__sccl+0x6e>
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	d0f1      	beq.n	8008a10 <__sccl+0x28>
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	e7f2      	b.n	8008a16 <__sccl+0x2e>
 8008a30:	7846      	ldrb	r6, [r0, #1]
 8008a32:	2e5d      	cmp	r6, #93	@ 0x5d
 8008a34:	d0fa      	beq.n	8008a2c <__sccl+0x44>
 8008a36:	42b3      	cmp	r3, r6
 8008a38:	dcf8      	bgt.n	8008a2c <__sccl+0x44>
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	3002      	adds	r0, #2
 8008a3e:	3201      	adds	r2, #1
 8008a40:	4296      	cmp	r6, r2
 8008a42:	54a1      	strb	r1, [r4, r2]
 8008a44:	dcfb      	bgt.n	8008a3e <__sccl+0x56>
 8008a46:	1af2      	subs	r2, r6, r3
 8008a48:	3a01      	subs	r2, #1
 8008a4a:	42b3      	cmp	r3, r6
 8008a4c:	bfa8      	it	ge
 8008a4e:	2200      	movge	r2, #0
 8008a50:	1c5d      	adds	r5, r3, #1
 8008a52:	18ab      	adds	r3, r5, r2
 8008a54:	e7e1      	b.n	8008a1a <__sccl+0x32>
 8008a56:	4610      	mov	r0, r2
 8008a58:	e7da      	b.n	8008a10 <__sccl+0x28>

08008a5a <__submore>:
 8008a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	460c      	mov	r4, r1
 8008a60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a66:	4299      	cmp	r1, r3
 8008a68:	d11b      	bne.n	8008aa2 <__submore+0x48>
 8008a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a6e:	f7fd fef5 	bl	800685c <_malloc_r>
 8008a72:	b918      	cbnz	r0, 8008a7c <__submore+0x22>
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a80:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008a82:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008a86:	6360      	str	r0, [r4, #52]	@ 0x34
 8008a88:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008a8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a90:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008a94:	7043      	strb	r3, [r0, #1]
 8008a96:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a9a:	7003      	strb	r3, [r0, #0]
 8008a9c:	6020      	str	r0, [r4, #0]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e7ea      	b.n	8008a78 <__submore+0x1e>
 8008aa2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008aa4:	0077      	lsls	r7, r6, #1
 8008aa6:	463a      	mov	r2, r7
 8008aa8:	f000 fbdd 	bl	8009266 <_realloc_r>
 8008aac:	4605      	mov	r5, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0e0      	beq.n	8008a74 <__submore+0x1a>
 8008ab2:	eb00 0806 	add.w	r8, r0, r6
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	4632      	mov	r2, r6
 8008aba:	4640      	mov	r0, r8
 8008abc:	f000 f842 	bl	8008b44 <memcpy>
 8008ac0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008ac4:	f8c4 8000 	str.w	r8, [r4]
 8008ac8:	e7e9      	b.n	8008a9e <__submore+0x44>

08008aca <memmove>:
 8008aca:	4288      	cmp	r0, r1
 8008acc:	b510      	push	{r4, lr}
 8008ace:	eb01 0402 	add.w	r4, r1, r2
 8008ad2:	d902      	bls.n	8008ada <memmove+0x10>
 8008ad4:	4284      	cmp	r4, r0
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	d807      	bhi.n	8008aea <memmove+0x20>
 8008ada:	1e43      	subs	r3, r0, #1
 8008adc:	42a1      	cmp	r1, r4
 8008ade:	d008      	beq.n	8008af2 <memmove+0x28>
 8008ae0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ae4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ae8:	e7f8      	b.n	8008adc <memmove+0x12>
 8008aea:	4601      	mov	r1, r0
 8008aec:	4402      	add	r2, r0
 8008aee:	428a      	cmp	r2, r1
 8008af0:	d100      	bne.n	8008af4 <memmove+0x2a>
 8008af2:	bd10      	pop	{r4, pc}
 8008af4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008afc:	e7f7      	b.n	8008aee <memmove+0x24>

08008afe <strncmp>:
 8008afe:	b510      	push	{r4, lr}
 8008b00:	b16a      	cbz	r2, 8008b1e <strncmp+0x20>
 8008b02:	3901      	subs	r1, #1
 8008b04:	1884      	adds	r4, r0, r2
 8008b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d103      	bne.n	8008b1a <strncmp+0x1c>
 8008b12:	42a0      	cmp	r0, r4
 8008b14:	d001      	beq.n	8008b1a <strncmp+0x1c>
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d1f5      	bne.n	8008b06 <strncmp+0x8>
 8008b1a:	1ad0      	subs	r0, r2, r3
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	4610      	mov	r0, r2
 8008b20:	e7fc      	b.n	8008b1c <strncmp+0x1e>
	...

08008b24 <_sbrk_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	2300      	movs	r3, #0
 8008b28:	4d05      	ldr	r5, [pc, #20]	@ (8008b40 <_sbrk_r+0x1c>)
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7f8 ff24 	bl	800197c <_sbrk>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_sbrk_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_sbrk_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	20000460 	.word	0x20000460

08008b44 <memcpy>:
 8008b44:	440a      	add	r2, r1
 8008b46:	4291      	cmp	r1, r2
 8008b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	4770      	bx	lr
 8008b50:	b510      	push	{r4, lr}
 8008b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b56:	4291      	cmp	r1, r2
 8008b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b5c:	d1f9      	bne.n	8008b52 <memcpy+0xe>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <nan>:
 8008b60:	2000      	movs	r0, #0
 8008b62:	4901      	ldr	r1, [pc, #4]	@ (8008b68 <nan+0x8>)
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	7ff80000 	.word	0x7ff80000

08008b6c <__assert_func>:
 8008b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b6e:	4614      	mov	r4, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <__assert_func+0x2c>)
 8008b74:	4605      	mov	r5, r0
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68d8      	ldr	r0, [r3, #12]
 8008b7a:	b954      	cbnz	r4, 8008b92 <__assert_func+0x26>
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <__assert_func+0x30>)
 8008b7e:	461c      	mov	r4, r3
 8008b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b84:	9100      	str	r1, [sp, #0]
 8008b86:	462b      	mov	r3, r5
 8008b88:	4905      	ldr	r1, [pc, #20]	@ (8008ba0 <__assert_func+0x34>)
 8008b8a:	f000 fc19 	bl	80093c0 <fiprintf>
 8008b8e:	f000 fc29 	bl	80093e4 <abort>
 8008b92:	4b04      	ldr	r3, [pc, #16]	@ (8008ba4 <__assert_func+0x38>)
 8008b94:	e7f4      	b.n	8008b80 <__assert_func+0x14>
 8008b96:	bf00      	nop
 8008b98:	20000018 	.word	0x20000018
 8008b9c:	08009f78 	.word	0x08009f78
 8008ba0:	08009f4a 	.word	0x08009f4a
 8008ba4:	08009f3d 	.word	0x08009f3d

08008ba8 <_calloc_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	fba1 5402 	umull	r5, r4, r1, r2
 8008bae:	b93c      	cbnz	r4, 8008bc0 <_calloc_r+0x18>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7fd fe53 	bl	800685c <_malloc_r>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	b928      	cbnz	r0, 8008bc6 <_calloc_r+0x1e>
 8008bba:	2600      	movs	r6, #0
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	220c      	movs	r2, #12
 8008bc2:	6002      	str	r2, [r0, #0]
 8008bc4:	e7f9      	b.n	8008bba <_calloc_r+0x12>
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f7fc fef0 	bl	80059ae <memset>
 8008bce:	e7f5      	b.n	8008bbc <_calloc_r+0x14>

08008bd0 <rshift>:
 8008bd0:	6903      	ldr	r3, [r0, #16]
 8008bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bda:	f100 0414 	add.w	r4, r0, #20
 8008bde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008be2:	dd46      	ble.n	8008c72 <rshift+0xa2>
 8008be4:	f011 011f 	ands.w	r1, r1, #31
 8008be8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008bec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008bf0:	d10c      	bne.n	8008c0c <rshift+0x3c>
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	f100 0710 	add.w	r7, r0, #16
 8008bf8:	42b1      	cmp	r1, r6
 8008bfa:	d335      	bcc.n	8008c68 <rshift+0x98>
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	1eea      	subs	r2, r5, #3
 8008c02:	4296      	cmp	r6, r2
 8008c04:	bf38      	it	cc
 8008c06:	2300      	movcc	r3, #0
 8008c08:	4423      	add	r3, r4
 8008c0a:	e015      	b.n	8008c38 <rshift+0x68>
 8008c0c:	46a1      	mov	r9, r4
 8008c0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c12:	f1c1 0820 	rsb	r8, r1, #32
 8008c16:	40cf      	lsrs	r7, r1
 8008c18:	f105 0e04 	add.w	lr, r5, #4
 8008c1c:	4576      	cmp	r6, lr
 8008c1e:	46f4      	mov	ip, lr
 8008c20:	d816      	bhi.n	8008c50 <rshift+0x80>
 8008c22:	1a9a      	subs	r2, r3, r2
 8008c24:	0092      	lsls	r2, r2, #2
 8008c26:	3a04      	subs	r2, #4
 8008c28:	3501      	adds	r5, #1
 8008c2a:	42ae      	cmp	r6, r5
 8008c2c:	bf38      	it	cc
 8008c2e:	2200      	movcc	r2, #0
 8008c30:	18a3      	adds	r3, r4, r2
 8008c32:	50a7      	str	r7, [r4, r2]
 8008c34:	b107      	cbz	r7, 8008c38 <rshift+0x68>
 8008c36:	3304      	adds	r3, #4
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	eba3 0204 	sub.w	r2, r3, r4
 8008c3e:	bf08      	it	eq
 8008c40:	2300      	moveq	r3, #0
 8008c42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c46:	6102      	str	r2, [r0, #16]
 8008c48:	bf08      	it	eq
 8008c4a:	6143      	streq	r3, [r0, #20]
 8008c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c50:	f8dc c000 	ldr.w	ip, [ip]
 8008c54:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c58:	ea4c 0707 	orr.w	r7, ip, r7
 8008c5c:	f849 7b04 	str.w	r7, [r9], #4
 8008c60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c64:	40cf      	lsrs	r7, r1
 8008c66:	e7d9      	b.n	8008c1c <rshift+0x4c>
 8008c68:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c70:	e7c2      	b.n	8008bf8 <rshift+0x28>
 8008c72:	4623      	mov	r3, r4
 8008c74:	e7e0      	b.n	8008c38 <rshift+0x68>

08008c76 <__hexdig_fun>:
 8008c76:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d802      	bhi.n	8008c84 <__hexdig_fun+0xe>
 8008c7e:	3820      	subs	r0, #32
 8008c80:	b2c0      	uxtb	r0, r0
 8008c82:	4770      	bx	lr
 8008c84:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008c88:	2b05      	cmp	r3, #5
 8008c8a:	d801      	bhi.n	8008c90 <__hexdig_fun+0x1a>
 8008c8c:	3847      	subs	r0, #71	@ 0x47
 8008c8e:	e7f7      	b.n	8008c80 <__hexdig_fun+0xa>
 8008c90:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	d801      	bhi.n	8008c9c <__hexdig_fun+0x26>
 8008c98:	3827      	subs	r0, #39	@ 0x27
 8008c9a:	e7f1      	b.n	8008c80 <__hexdig_fun+0xa>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	4770      	bx	lr

08008ca0 <__gethex>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	468a      	mov	sl, r1
 8008ca6:	4690      	mov	r8, r2
 8008ca8:	b085      	sub	sp, #20
 8008caa:	9302      	str	r3, [sp, #8]
 8008cac:	680b      	ldr	r3, [r1, #0]
 8008cae:	9001      	str	r0, [sp, #4]
 8008cb0:	1c9c      	adds	r4, r3, #2
 8008cb2:	46a1      	mov	r9, r4
 8008cb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008cb8:	2830      	cmp	r0, #48	@ 0x30
 8008cba:	d0fa      	beq.n	8008cb2 <__gethex+0x12>
 8008cbc:	eba9 0303 	sub.w	r3, r9, r3
 8008cc0:	f1a3 0b02 	sub.w	fp, r3, #2
 8008cc4:	f7ff ffd7 	bl	8008c76 <__hexdig_fun>
 8008cc8:	4605      	mov	r5, r0
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d168      	bne.n	8008da0 <__gethex+0x100>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4648      	mov	r0, r9
 8008cd2:	499f      	ldr	r1, [pc, #636]	@ (8008f50 <__gethex+0x2b0>)
 8008cd4:	f7ff ff13 	bl	8008afe <strncmp>
 8008cd8:	4607      	mov	r7, r0
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d167      	bne.n	8008dae <__gethex+0x10e>
 8008cde:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ce2:	4626      	mov	r6, r4
 8008ce4:	f7ff ffc7 	bl	8008c76 <__hexdig_fun>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d062      	beq.n	8008db2 <__gethex+0x112>
 8008cec:	4623      	mov	r3, r4
 8008cee:	7818      	ldrb	r0, [r3, #0]
 8008cf0:	4699      	mov	r9, r3
 8008cf2:	2830      	cmp	r0, #48	@ 0x30
 8008cf4:	f103 0301 	add.w	r3, r3, #1
 8008cf8:	d0f9      	beq.n	8008cee <__gethex+0x4e>
 8008cfa:	f7ff ffbc 	bl	8008c76 <__hexdig_fun>
 8008cfe:	fab0 f580 	clz	r5, r0
 8008d02:	f04f 0b01 	mov.w	fp, #1
 8008d06:	096d      	lsrs	r5, r5, #5
 8008d08:	464a      	mov	r2, r9
 8008d0a:	4616      	mov	r6, r2
 8008d0c:	7830      	ldrb	r0, [r6, #0]
 8008d0e:	3201      	adds	r2, #1
 8008d10:	f7ff ffb1 	bl	8008c76 <__hexdig_fun>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1f8      	bne.n	8008d0a <__gethex+0x6a>
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	498c      	ldr	r1, [pc, #560]	@ (8008f50 <__gethex+0x2b0>)
 8008d1e:	f7ff feee 	bl	8008afe <strncmp>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d13f      	bne.n	8008da6 <__gethex+0x106>
 8008d26:	b944      	cbnz	r4, 8008d3a <__gethex+0x9a>
 8008d28:	1c74      	adds	r4, r6, #1
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	7830      	ldrb	r0, [r6, #0]
 8008d30:	3201      	adds	r2, #1
 8008d32:	f7ff ffa0 	bl	8008c76 <__hexdig_fun>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d1f8      	bne.n	8008d2c <__gethex+0x8c>
 8008d3a:	1ba4      	subs	r4, r4, r6
 8008d3c:	00a7      	lsls	r7, r4, #2
 8008d3e:	7833      	ldrb	r3, [r6, #0]
 8008d40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d44:	2b50      	cmp	r3, #80	@ 0x50
 8008d46:	d13e      	bne.n	8008dc6 <__gethex+0x126>
 8008d48:	7873      	ldrb	r3, [r6, #1]
 8008d4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008d4c:	d033      	beq.n	8008db6 <__gethex+0x116>
 8008d4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d50:	d034      	beq.n	8008dbc <__gethex+0x11c>
 8008d52:	2400      	movs	r4, #0
 8008d54:	1c71      	adds	r1, r6, #1
 8008d56:	7808      	ldrb	r0, [r1, #0]
 8008d58:	f7ff ff8d 	bl	8008c76 <__hexdig_fun>
 8008d5c:	1e43      	subs	r3, r0, #1
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b18      	cmp	r3, #24
 8008d62:	d830      	bhi.n	8008dc6 <__gethex+0x126>
 8008d64:	f1a0 0210 	sub.w	r2, r0, #16
 8008d68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d6c:	f7ff ff83 	bl	8008c76 <__hexdig_fun>
 8008d70:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d74:	fa5f fc8c 	uxtb.w	ip, ip
 8008d78:	f1bc 0f18 	cmp.w	ip, #24
 8008d7c:	f04f 030a 	mov.w	r3, #10
 8008d80:	d91e      	bls.n	8008dc0 <__gethex+0x120>
 8008d82:	b104      	cbz	r4, 8008d86 <__gethex+0xe6>
 8008d84:	4252      	negs	r2, r2
 8008d86:	4417      	add	r7, r2
 8008d88:	f8ca 1000 	str.w	r1, [sl]
 8008d8c:	b1ed      	cbz	r5, 8008dca <__gethex+0x12a>
 8008d8e:	f1bb 0f00 	cmp.w	fp, #0
 8008d92:	bf0c      	ite	eq
 8008d94:	2506      	moveq	r5, #6
 8008d96:	2500      	movne	r5, #0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	b005      	add	sp, #20
 8008d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da0:	2500      	movs	r5, #0
 8008da2:	462c      	mov	r4, r5
 8008da4:	e7b0      	b.n	8008d08 <__gethex+0x68>
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	d1c7      	bne.n	8008d3a <__gethex+0x9a>
 8008daa:	4627      	mov	r7, r4
 8008dac:	e7c7      	b.n	8008d3e <__gethex+0x9e>
 8008dae:	464e      	mov	r6, r9
 8008db0:	462f      	mov	r7, r5
 8008db2:	2501      	movs	r5, #1
 8008db4:	e7c3      	b.n	8008d3e <__gethex+0x9e>
 8008db6:	2400      	movs	r4, #0
 8008db8:	1cb1      	adds	r1, r6, #2
 8008dba:	e7cc      	b.n	8008d56 <__gethex+0xb6>
 8008dbc:	2401      	movs	r4, #1
 8008dbe:	e7fb      	b.n	8008db8 <__gethex+0x118>
 8008dc0:	fb03 0002 	mla	r0, r3, r2, r0
 8008dc4:	e7ce      	b.n	8008d64 <__gethex+0xc4>
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	e7de      	b.n	8008d88 <__gethex+0xe8>
 8008dca:	4629      	mov	r1, r5
 8008dcc:	eba6 0309 	sub.w	r3, r6, r9
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	2b07      	cmp	r3, #7
 8008dd4:	dc0a      	bgt.n	8008dec <__gethex+0x14c>
 8008dd6:	9801      	ldr	r0, [sp, #4]
 8008dd8:	f7fd fdcc 	bl	8006974 <_Balloc>
 8008ddc:	4604      	mov	r4, r0
 8008dde:	b940      	cbnz	r0, 8008df2 <__gethex+0x152>
 8008de0:	4602      	mov	r2, r0
 8008de2:	21e4      	movs	r1, #228	@ 0xe4
 8008de4:	4b5b      	ldr	r3, [pc, #364]	@ (8008f54 <__gethex+0x2b4>)
 8008de6:	485c      	ldr	r0, [pc, #368]	@ (8008f58 <__gethex+0x2b8>)
 8008de8:	f7ff fec0 	bl	8008b6c <__assert_func>
 8008dec:	3101      	adds	r1, #1
 8008dee:	105b      	asrs	r3, r3, #1
 8008df0:	e7ef      	b.n	8008dd2 <__gethex+0x132>
 8008df2:	2300      	movs	r3, #0
 8008df4:	f100 0a14 	add.w	sl, r0, #20
 8008df8:	4655      	mov	r5, sl
 8008dfa:	469b      	mov	fp, r3
 8008dfc:	45b1      	cmp	r9, r6
 8008dfe:	d337      	bcc.n	8008e70 <__gethex+0x1d0>
 8008e00:	f845 bb04 	str.w	fp, [r5], #4
 8008e04:	eba5 050a 	sub.w	r5, r5, sl
 8008e08:	10ad      	asrs	r5, r5, #2
 8008e0a:	6125      	str	r5, [r4, #16]
 8008e0c:	4658      	mov	r0, fp
 8008e0e:	f7fd fea3 	bl	8006b58 <__hi0bits>
 8008e12:	016d      	lsls	r5, r5, #5
 8008e14:	f8d8 6000 	ldr.w	r6, [r8]
 8008e18:	1a2d      	subs	r5, r5, r0
 8008e1a:	42b5      	cmp	r5, r6
 8008e1c:	dd54      	ble.n	8008ec8 <__gethex+0x228>
 8008e1e:	1bad      	subs	r5, r5, r6
 8008e20:	4629      	mov	r1, r5
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7fe fa2b 	bl	800727e <__any_on>
 8008e28:	4681      	mov	r9, r0
 8008e2a:	b178      	cbz	r0, 8008e4c <__gethex+0x1ac>
 8008e2c:	f04f 0901 	mov.w	r9, #1
 8008e30:	1e6b      	subs	r3, r5, #1
 8008e32:	1159      	asrs	r1, r3, #5
 8008e34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e38:	f003 021f 	and.w	r2, r3, #31
 8008e3c:	fa09 f202 	lsl.w	r2, r9, r2
 8008e40:	420a      	tst	r2, r1
 8008e42:	d003      	beq.n	8008e4c <__gethex+0x1ac>
 8008e44:	454b      	cmp	r3, r9
 8008e46:	dc36      	bgt.n	8008eb6 <__gethex+0x216>
 8008e48:	f04f 0902 	mov.w	r9, #2
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f7ff febe 	bl	8008bd0 <rshift>
 8008e54:	442f      	add	r7, r5
 8008e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	da42      	bge.n	8008ee4 <__gethex+0x244>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	9801      	ldr	r0, [sp, #4]
 8008e62:	f7fd fdc7 	bl	80069f4 <_Bfree>
 8008e66:	2300      	movs	r3, #0
 8008e68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e6a:	25a3      	movs	r5, #163	@ 0xa3
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	e793      	b.n	8008d98 <__gethex+0xf8>
 8008e70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008e74:	2a2e      	cmp	r2, #46	@ 0x2e
 8008e76:	d012      	beq.n	8008e9e <__gethex+0x1fe>
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d104      	bne.n	8008e86 <__gethex+0x1e6>
 8008e7c:	f845 bb04 	str.w	fp, [r5], #4
 8008e80:	f04f 0b00 	mov.w	fp, #0
 8008e84:	465b      	mov	r3, fp
 8008e86:	7830      	ldrb	r0, [r6, #0]
 8008e88:	9303      	str	r3, [sp, #12]
 8008e8a:	f7ff fef4 	bl	8008c76 <__hexdig_fun>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	f000 000f 	and.w	r0, r0, #15
 8008e94:	4098      	lsls	r0, r3
 8008e96:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	e7ae      	b.n	8008dfc <__gethex+0x15c>
 8008e9e:	45b1      	cmp	r9, r6
 8008ea0:	d8ea      	bhi.n	8008e78 <__gethex+0x1d8>
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	492a      	ldr	r1, [pc, #168]	@ (8008f50 <__gethex+0x2b0>)
 8008ea8:	9303      	str	r3, [sp, #12]
 8008eaa:	f7ff fe28 	bl	8008afe <strncmp>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d1e1      	bne.n	8008e78 <__gethex+0x1d8>
 8008eb4:	e7a2      	b.n	8008dfc <__gethex+0x15c>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	1ea9      	subs	r1, r5, #2
 8008eba:	f7fe f9e0 	bl	800727e <__any_on>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d0c2      	beq.n	8008e48 <__gethex+0x1a8>
 8008ec2:	f04f 0903 	mov.w	r9, #3
 8008ec6:	e7c1      	b.n	8008e4c <__gethex+0x1ac>
 8008ec8:	da09      	bge.n	8008ede <__gethex+0x23e>
 8008eca:	1b75      	subs	r5, r6, r5
 8008ecc:	4621      	mov	r1, r4
 8008ece:	462a      	mov	r2, r5
 8008ed0:	9801      	ldr	r0, [sp, #4]
 8008ed2:	f7fd ffa5 	bl	8006e20 <__lshift>
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	1b7f      	subs	r7, r7, r5
 8008eda:	f100 0a14 	add.w	sl, r0, #20
 8008ede:	f04f 0900 	mov.w	r9, #0
 8008ee2:	e7b8      	b.n	8008e56 <__gethex+0x1b6>
 8008ee4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ee8:	42bd      	cmp	r5, r7
 8008eea:	dd6f      	ble.n	8008fcc <__gethex+0x32c>
 8008eec:	1bed      	subs	r5, r5, r7
 8008eee:	42ae      	cmp	r6, r5
 8008ef0:	dc34      	bgt.n	8008f5c <__gethex+0x2bc>
 8008ef2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d022      	beq.n	8008f40 <__gethex+0x2a0>
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d024      	beq.n	8008f48 <__gethex+0x2a8>
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d115      	bne.n	8008f2e <__gethex+0x28e>
 8008f02:	42ae      	cmp	r6, r5
 8008f04:	d113      	bne.n	8008f2e <__gethex+0x28e>
 8008f06:	2e01      	cmp	r6, #1
 8008f08:	d10b      	bne.n	8008f22 <__gethex+0x282>
 8008f0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f0e:	9a02      	ldr	r2, [sp, #8]
 8008f10:	2562      	movs	r5, #98	@ 0x62
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	2301      	movs	r3, #1
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	f8ca 3000 	str.w	r3, [sl]
 8008f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f1e:	601c      	str	r4, [r3, #0]
 8008f20:	e73a      	b.n	8008d98 <__gethex+0xf8>
 8008f22:	4620      	mov	r0, r4
 8008f24:	1e71      	subs	r1, r6, #1
 8008f26:	f7fe f9aa 	bl	800727e <__any_on>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1ed      	bne.n	8008f0a <__gethex+0x26a>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	9801      	ldr	r0, [sp, #4]
 8008f32:	f7fd fd5f 	bl	80069f4 <_Bfree>
 8008f36:	2300      	movs	r3, #0
 8008f38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f3a:	2550      	movs	r5, #80	@ 0x50
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	e72b      	b.n	8008d98 <__gethex+0xf8>
 8008f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f3      	bne.n	8008f2e <__gethex+0x28e>
 8008f46:	e7e0      	b.n	8008f0a <__gethex+0x26a>
 8008f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1dd      	bne.n	8008f0a <__gethex+0x26a>
 8008f4e:	e7ee      	b.n	8008f2e <__gethex+0x28e>
 8008f50:	08009db0 	.word	0x08009db0
 8008f54:	08009c47 	.word	0x08009c47
 8008f58:	08009f79 	.word	0x08009f79
 8008f5c:	1e6f      	subs	r7, r5, #1
 8008f5e:	f1b9 0f00 	cmp.w	r9, #0
 8008f62:	d130      	bne.n	8008fc6 <__gethex+0x326>
 8008f64:	b127      	cbz	r7, 8008f70 <__gethex+0x2d0>
 8008f66:	4639      	mov	r1, r7
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7fe f988 	bl	800727e <__any_on>
 8008f6e:	4681      	mov	r9, r0
 8008f70:	2301      	movs	r3, #1
 8008f72:	4629      	mov	r1, r5
 8008f74:	1b76      	subs	r6, r6, r5
 8008f76:	2502      	movs	r5, #2
 8008f78:	117a      	asrs	r2, r7, #5
 8008f7a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008f7e:	f007 071f 	and.w	r7, r7, #31
 8008f82:	40bb      	lsls	r3, r7
 8008f84:	4213      	tst	r3, r2
 8008f86:	4620      	mov	r0, r4
 8008f88:	bf18      	it	ne
 8008f8a:	f049 0902 	orrne.w	r9, r9, #2
 8008f8e:	f7ff fe1f 	bl	8008bd0 <rshift>
 8008f92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008f96:	f1b9 0f00 	cmp.w	r9, #0
 8008f9a:	d047      	beq.n	800902c <__gethex+0x38c>
 8008f9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d015      	beq.n	8008fd0 <__gethex+0x330>
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d017      	beq.n	8008fd8 <__gethex+0x338>
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d109      	bne.n	8008fc0 <__gethex+0x320>
 8008fac:	f019 0f02 	tst.w	r9, #2
 8008fb0:	d006      	beq.n	8008fc0 <__gethex+0x320>
 8008fb2:	f8da 3000 	ldr.w	r3, [sl]
 8008fb6:	ea49 0903 	orr.w	r9, r9, r3
 8008fba:	f019 0f01 	tst.w	r9, #1
 8008fbe:	d10e      	bne.n	8008fde <__gethex+0x33e>
 8008fc0:	f045 0510 	orr.w	r5, r5, #16
 8008fc4:	e032      	b.n	800902c <__gethex+0x38c>
 8008fc6:	f04f 0901 	mov.w	r9, #1
 8008fca:	e7d1      	b.n	8008f70 <__gethex+0x2d0>
 8008fcc:	2501      	movs	r5, #1
 8008fce:	e7e2      	b.n	8008f96 <__gethex+0x2f6>
 8008fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd2:	f1c3 0301 	rsb	r3, r3, #1
 8008fd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <__gethex+0x320>
 8008fde:	f04f 0c00 	mov.w	ip, #0
 8008fe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fe6:	f104 0314 	add.w	r3, r4, #20
 8008fea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ffc:	d01b      	beq.n	8009036 <__gethex+0x396>
 8008ffe:	3201      	adds	r2, #1
 8009000:	6002      	str	r2, [r0, #0]
 8009002:	2d02      	cmp	r5, #2
 8009004:	f104 0314 	add.w	r3, r4, #20
 8009008:	d13c      	bne.n	8009084 <__gethex+0x3e4>
 800900a:	f8d8 2000 	ldr.w	r2, [r8]
 800900e:	3a01      	subs	r2, #1
 8009010:	42b2      	cmp	r2, r6
 8009012:	d109      	bne.n	8009028 <__gethex+0x388>
 8009014:	2201      	movs	r2, #1
 8009016:	1171      	asrs	r1, r6, #5
 8009018:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800901c:	f006 061f 	and.w	r6, r6, #31
 8009020:	fa02 f606 	lsl.w	r6, r2, r6
 8009024:	421e      	tst	r6, r3
 8009026:	d13a      	bne.n	800909e <__gethex+0x3fe>
 8009028:	f045 0520 	orr.w	r5, r5, #32
 800902c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800902e:	601c      	str	r4, [r3, #0]
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	601f      	str	r7, [r3, #0]
 8009034:	e6b0      	b.n	8008d98 <__gethex+0xf8>
 8009036:	4299      	cmp	r1, r3
 8009038:	f843 cc04 	str.w	ip, [r3, #-4]
 800903c:	d8d9      	bhi.n	8008ff2 <__gethex+0x352>
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	459b      	cmp	fp, r3
 8009042:	db17      	blt.n	8009074 <__gethex+0x3d4>
 8009044:	6861      	ldr	r1, [r4, #4]
 8009046:	9801      	ldr	r0, [sp, #4]
 8009048:	3101      	adds	r1, #1
 800904a:	f7fd fc93 	bl	8006974 <_Balloc>
 800904e:	4681      	mov	r9, r0
 8009050:	b918      	cbnz	r0, 800905a <__gethex+0x3ba>
 8009052:	4602      	mov	r2, r0
 8009054:	2184      	movs	r1, #132	@ 0x84
 8009056:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <__gethex+0x41c>)
 8009058:	e6c5      	b.n	8008de6 <__gethex+0x146>
 800905a:	6922      	ldr	r2, [r4, #16]
 800905c:	f104 010c 	add.w	r1, r4, #12
 8009060:	3202      	adds	r2, #2
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	300c      	adds	r0, #12
 8009066:	f7ff fd6d 	bl	8008b44 <memcpy>
 800906a:	4621      	mov	r1, r4
 800906c:	9801      	ldr	r0, [sp, #4]
 800906e:	f7fd fcc1 	bl	80069f4 <_Bfree>
 8009072:	464c      	mov	r4, r9
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	6122      	str	r2, [r4, #16]
 800907a:	2201      	movs	r2, #1
 800907c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009080:	615a      	str	r2, [r3, #20]
 8009082:	e7be      	b.n	8009002 <__gethex+0x362>
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	455a      	cmp	r2, fp
 8009088:	dd0b      	ble.n	80090a2 <__gethex+0x402>
 800908a:	2101      	movs	r1, #1
 800908c:	4620      	mov	r0, r4
 800908e:	f7ff fd9f 	bl	8008bd0 <rshift>
 8009092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009096:	3701      	adds	r7, #1
 8009098:	42bb      	cmp	r3, r7
 800909a:	f6ff aee0 	blt.w	8008e5e <__gethex+0x1be>
 800909e:	2501      	movs	r5, #1
 80090a0:	e7c2      	b.n	8009028 <__gethex+0x388>
 80090a2:	f016 061f 	ands.w	r6, r6, #31
 80090a6:	d0fa      	beq.n	800909e <__gethex+0x3fe>
 80090a8:	4453      	add	r3, sl
 80090aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090ae:	f7fd fd53 	bl	8006b58 <__hi0bits>
 80090b2:	f1c6 0620 	rsb	r6, r6, #32
 80090b6:	42b0      	cmp	r0, r6
 80090b8:	dbe7      	blt.n	800908a <__gethex+0x3ea>
 80090ba:	e7f0      	b.n	800909e <__gethex+0x3fe>
 80090bc:	08009c47 	.word	0x08009c47

080090c0 <L_shift>:
 80090c0:	f1c2 0208 	rsb	r2, r2, #8
 80090c4:	0092      	lsls	r2, r2, #2
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	f1c2 0620 	rsb	r6, r2, #32
 80090cc:	6843      	ldr	r3, [r0, #4]
 80090ce:	6804      	ldr	r4, [r0, #0]
 80090d0:	fa03 f506 	lsl.w	r5, r3, r6
 80090d4:	432c      	orrs	r4, r5
 80090d6:	40d3      	lsrs	r3, r2
 80090d8:	6004      	str	r4, [r0, #0]
 80090da:	f840 3f04 	str.w	r3, [r0, #4]!
 80090de:	4288      	cmp	r0, r1
 80090e0:	d3f4      	bcc.n	80090cc <L_shift+0xc>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}

080090e4 <__match>:
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ee:	b914      	cbnz	r4, 80090f6 <__match+0x12>
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	2001      	movs	r0, #1
 80090f4:	bd30      	pop	{r4, r5, pc}
 80090f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80090fe:	2d19      	cmp	r5, #25
 8009100:	bf98      	it	ls
 8009102:	3220      	addls	r2, #32
 8009104:	42a2      	cmp	r2, r4
 8009106:	d0f0      	beq.n	80090ea <__match+0x6>
 8009108:	2000      	movs	r0, #0
 800910a:	e7f3      	b.n	80090f4 <__match+0x10>

0800910c <__hexnan>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	2500      	movs	r5, #0
 8009112:	680b      	ldr	r3, [r1, #0]
 8009114:	4682      	mov	sl, r0
 8009116:	115e      	asrs	r6, r3, #5
 8009118:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800911c:	f013 031f 	ands.w	r3, r3, #31
 8009120:	bf18      	it	ne
 8009122:	3604      	addne	r6, #4
 8009124:	1f37      	subs	r7, r6, #4
 8009126:	4690      	mov	r8, r2
 8009128:	46b9      	mov	r9, r7
 800912a:	463c      	mov	r4, r7
 800912c:	46ab      	mov	fp, r5
 800912e:	b087      	sub	sp, #28
 8009130:	6801      	ldr	r1, [r0, #0]
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	f846 5c04 	str.w	r5, [r6, #-4]
 8009138:	9502      	str	r5, [sp, #8]
 800913a:	784a      	ldrb	r2, [r1, #1]
 800913c:	1c4b      	adds	r3, r1, #1
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	b342      	cbz	r2, 8009194 <__hexnan+0x88>
 8009142:	4610      	mov	r0, r2
 8009144:	9105      	str	r1, [sp, #20]
 8009146:	9204      	str	r2, [sp, #16]
 8009148:	f7ff fd95 	bl	8008c76 <__hexdig_fun>
 800914c:	2800      	cmp	r0, #0
 800914e:	d151      	bne.n	80091f4 <__hexnan+0xe8>
 8009150:	9a04      	ldr	r2, [sp, #16]
 8009152:	9905      	ldr	r1, [sp, #20]
 8009154:	2a20      	cmp	r2, #32
 8009156:	d818      	bhi.n	800918a <__hexnan+0x7e>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	459b      	cmp	fp, r3
 800915c:	dd13      	ble.n	8009186 <__hexnan+0x7a>
 800915e:	454c      	cmp	r4, r9
 8009160:	d206      	bcs.n	8009170 <__hexnan+0x64>
 8009162:	2d07      	cmp	r5, #7
 8009164:	dc04      	bgt.n	8009170 <__hexnan+0x64>
 8009166:	462a      	mov	r2, r5
 8009168:	4649      	mov	r1, r9
 800916a:	4620      	mov	r0, r4
 800916c:	f7ff ffa8 	bl	80090c0 <L_shift>
 8009170:	4544      	cmp	r4, r8
 8009172:	d952      	bls.n	800921a <__hexnan+0x10e>
 8009174:	2300      	movs	r3, #0
 8009176:	f1a4 0904 	sub.w	r9, r4, #4
 800917a:	f844 3c04 	str.w	r3, [r4, #-4]
 800917e:	461d      	mov	r5, r3
 8009180:	464c      	mov	r4, r9
 8009182:	f8cd b008 	str.w	fp, [sp, #8]
 8009186:	9903      	ldr	r1, [sp, #12]
 8009188:	e7d7      	b.n	800913a <__hexnan+0x2e>
 800918a:	2a29      	cmp	r2, #41	@ 0x29
 800918c:	d157      	bne.n	800923e <__hexnan+0x132>
 800918e:	3102      	adds	r1, #2
 8009190:	f8ca 1000 	str.w	r1, [sl]
 8009194:	f1bb 0f00 	cmp.w	fp, #0
 8009198:	d051      	beq.n	800923e <__hexnan+0x132>
 800919a:	454c      	cmp	r4, r9
 800919c:	d206      	bcs.n	80091ac <__hexnan+0xa0>
 800919e:	2d07      	cmp	r5, #7
 80091a0:	dc04      	bgt.n	80091ac <__hexnan+0xa0>
 80091a2:	462a      	mov	r2, r5
 80091a4:	4649      	mov	r1, r9
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff ff8a 	bl	80090c0 <L_shift>
 80091ac:	4544      	cmp	r4, r8
 80091ae:	d936      	bls.n	800921e <__hexnan+0x112>
 80091b0:	4623      	mov	r3, r4
 80091b2:	f1a8 0204 	sub.w	r2, r8, #4
 80091b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80091ba:	429f      	cmp	r7, r3
 80091bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80091c0:	d2f9      	bcs.n	80091b6 <__hexnan+0xaa>
 80091c2:	1b3b      	subs	r3, r7, r4
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	3304      	adds	r3, #4
 80091ca:	3401      	adds	r4, #1
 80091cc:	3e03      	subs	r6, #3
 80091ce:	42b4      	cmp	r4, r6
 80091d0:	bf88      	it	hi
 80091d2:	2304      	movhi	r3, #4
 80091d4:	2200      	movs	r2, #0
 80091d6:	4443      	add	r3, r8
 80091d8:	f843 2b04 	str.w	r2, [r3], #4
 80091dc:	429f      	cmp	r7, r3
 80091de:	d2fb      	bcs.n	80091d8 <__hexnan+0xcc>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	b91b      	cbnz	r3, 80091ec <__hexnan+0xe0>
 80091e4:	4547      	cmp	r7, r8
 80091e6:	d128      	bne.n	800923a <__hexnan+0x12e>
 80091e8:	2301      	movs	r3, #1
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	2005      	movs	r0, #5
 80091ee:	b007      	add	sp, #28
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	3501      	adds	r5, #1
 80091f6:	2d08      	cmp	r5, #8
 80091f8:	f10b 0b01 	add.w	fp, fp, #1
 80091fc:	dd06      	ble.n	800920c <__hexnan+0x100>
 80091fe:	4544      	cmp	r4, r8
 8009200:	d9c1      	bls.n	8009186 <__hexnan+0x7a>
 8009202:	2300      	movs	r3, #0
 8009204:	2501      	movs	r5, #1
 8009206:	f844 3c04 	str.w	r3, [r4, #-4]
 800920a:	3c04      	subs	r4, #4
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	f000 000f 	and.w	r0, r0, #15
 8009212:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009216:	6020      	str	r0, [r4, #0]
 8009218:	e7b5      	b.n	8009186 <__hexnan+0x7a>
 800921a:	2508      	movs	r5, #8
 800921c:	e7b3      	b.n	8009186 <__hexnan+0x7a>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0dd      	beq.n	80091e0 <__hexnan+0xd4>
 8009224:	f04f 32ff 	mov.w	r2, #4294967295
 8009228:	f1c3 0320 	rsb	r3, r3, #32
 800922c:	40da      	lsrs	r2, r3
 800922e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009232:	4013      	ands	r3, r2
 8009234:	f846 3c04 	str.w	r3, [r6, #-4]
 8009238:	e7d2      	b.n	80091e0 <__hexnan+0xd4>
 800923a:	3f04      	subs	r7, #4
 800923c:	e7d0      	b.n	80091e0 <__hexnan+0xd4>
 800923e:	2004      	movs	r0, #4
 8009240:	e7d5      	b.n	80091ee <__hexnan+0xe2>

08009242 <__ascii_mbtowc>:
 8009242:	b082      	sub	sp, #8
 8009244:	b901      	cbnz	r1, 8009248 <__ascii_mbtowc+0x6>
 8009246:	a901      	add	r1, sp, #4
 8009248:	b142      	cbz	r2, 800925c <__ascii_mbtowc+0x1a>
 800924a:	b14b      	cbz	r3, 8009260 <__ascii_mbtowc+0x1e>
 800924c:	7813      	ldrb	r3, [r2, #0]
 800924e:	600b      	str	r3, [r1, #0]
 8009250:	7812      	ldrb	r2, [r2, #0]
 8009252:	1e10      	subs	r0, r2, #0
 8009254:	bf18      	it	ne
 8009256:	2001      	movne	r0, #1
 8009258:	b002      	add	sp, #8
 800925a:	4770      	bx	lr
 800925c:	4610      	mov	r0, r2
 800925e:	e7fb      	b.n	8009258 <__ascii_mbtowc+0x16>
 8009260:	f06f 0001 	mvn.w	r0, #1
 8009264:	e7f8      	b.n	8009258 <__ascii_mbtowc+0x16>

08009266 <_realloc_r>:
 8009266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926a:	4680      	mov	r8, r0
 800926c:	4615      	mov	r5, r2
 800926e:	460c      	mov	r4, r1
 8009270:	b921      	cbnz	r1, 800927c <_realloc_r+0x16>
 8009272:	4611      	mov	r1, r2
 8009274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	f7fd baf0 	b.w	800685c <_malloc_r>
 800927c:	b92a      	cbnz	r2, 800928a <_realloc_r+0x24>
 800927e:	f7fd fa7b 	bl	8006778 <_free_r>
 8009282:	2400      	movs	r4, #0
 8009284:	4620      	mov	r0, r4
 8009286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928a:	f000 f8b2 	bl	80093f2 <_malloc_usable_size_r>
 800928e:	4285      	cmp	r5, r0
 8009290:	4606      	mov	r6, r0
 8009292:	d802      	bhi.n	800929a <_realloc_r+0x34>
 8009294:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009298:	d8f4      	bhi.n	8009284 <_realloc_r+0x1e>
 800929a:	4629      	mov	r1, r5
 800929c:	4640      	mov	r0, r8
 800929e:	f7fd fadd 	bl	800685c <_malloc_r>
 80092a2:	4607      	mov	r7, r0
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0ec      	beq.n	8009282 <_realloc_r+0x1c>
 80092a8:	42b5      	cmp	r5, r6
 80092aa:	462a      	mov	r2, r5
 80092ac:	4621      	mov	r1, r4
 80092ae:	bf28      	it	cs
 80092b0:	4632      	movcs	r2, r6
 80092b2:	f7ff fc47 	bl	8008b44 <memcpy>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4640      	mov	r0, r8
 80092ba:	f7fd fa5d 	bl	8006778 <_free_r>
 80092be:	463c      	mov	r4, r7
 80092c0:	e7e0      	b.n	8009284 <_realloc_r+0x1e>
	...

080092c4 <_strtoul_l.constprop.0>:
 80092c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092c8:	4686      	mov	lr, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	4e33      	ldr	r6, [pc, #204]	@ (800939c <_strtoul_l.constprop.0+0xd8>)
 80092ce:	4628      	mov	r0, r5
 80092d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092d4:	5d37      	ldrb	r7, [r6, r4]
 80092d6:	f017 0708 	ands.w	r7, r7, #8
 80092da:	d1f8      	bne.n	80092ce <_strtoul_l.constprop.0+0xa>
 80092dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80092de:	d12f      	bne.n	8009340 <_strtoul_l.constprop.0+0x7c>
 80092e0:	2701      	movs	r7, #1
 80092e2:	782c      	ldrb	r4, [r5, #0]
 80092e4:	1c85      	adds	r5, r0, #2
 80092e6:	f033 0010 	bics.w	r0, r3, #16
 80092ea:	d109      	bne.n	8009300 <_strtoul_l.constprop.0+0x3c>
 80092ec:	2c30      	cmp	r4, #48	@ 0x30
 80092ee:	d12c      	bne.n	800934a <_strtoul_l.constprop.0+0x86>
 80092f0:	7828      	ldrb	r0, [r5, #0]
 80092f2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80092f6:	2858      	cmp	r0, #88	@ 0x58
 80092f8:	d127      	bne.n	800934a <_strtoul_l.constprop.0+0x86>
 80092fa:	2310      	movs	r3, #16
 80092fc:	786c      	ldrb	r4, [r5, #1]
 80092fe:	3502      	adds	r5, #2
 8009300:	f04f 38ff 	mov.w	r8, #4294967295
 8009304:	fbb8 f8f3 	udiv	r8, r8, r3
 8009308:	2600      	movs	r6, #0
 800930a:	fb03 f908 	mul.w	r9, r3, r8
 800930e:	4630      	mov	r0, r6
 8009310:	ea6f 0909 	mvn.w	r9, r9
 8009314:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009318:	f1bc 0f09 	cmp.w	ip, #9
 800931c:	d81c      	bhi.n	8009358 <_strtoul_l.constprop.0+0x94>
 800931e:	4664      	mov	r4, ip
 8009320:	42a3      	cmp	r3, r4
 8009322:	dd2a      	ble.n	800937a <_strtoul_l.constprop.0+0xb6>
 8009324:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009328:	d007      	beq.n	800933a <_strtoul_l.constprop.0+0x76>
 800932a:	4580      	cmp	r8, r0
 800932c:	d322      	bcc.n	8009374 <_strtoul_l.constprop.0+0xb0>
 800932e:	d101      	bne.n	8009334 <_strtoul_l.constprop.0+0x70>
 8009330:	45a1      	cmp	r9, r4
 8009332:	db1f      	blt.n	8009374 <_strtoul_l.constprop.0+0xb0>
 8009334:	2601      	movs	r6, #1
 8009336:	fb00 4003 	mla	r0, r0, r3, r4
 800933a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800933e:	e7e9      	b.n	8009314 <_strtoul_l.constprop.0+0x50>
 8009340:	2c2b      	cmp	r4, #43	@ 0x2b
 8009342:	bf04      	itt	eq
 8009344:	782c      	ldrbeq	r4, [r5, #0]
 8009346:	1c85      	addeq	r5, r0, #2
 8009348:	e7cd      	b.n	80092e6 <_strtoul_l.constprop.0+0x22>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1d8      	bne.n	8009300 <_strtoul_l.constprop.0+0x3c>
 800934e:	2c30      	cmp	r4, #48	@ 0x30
 8009350:	bf0c      	ite	eq
 8009352:	2308      	moveq	r3, #8
 8009354:	230a      	movne	r3, #10
 8009356:	e7d3      	b.n	8009300 <_strtoul_l.constprop.0+0x3c>
 8009358:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800935c:	f1bc 0f19 	cmp.w	ip, #25
 8009360:	d801      	bhi.n	8009366 <_strtoul_l.constprop.0+0xa2>
 8009362:	3c37      	subs	r4, #55	@ 0x37
 8009364:	e7dc      	b.n	8009320 <_strtoul_l.constprop.0+0x5c>
 8009366:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800936a:	f1bc 0f19 	cmp.w	ip, #25
 800936e:	d804      	bhi.n	800937a <_strtoul_l.constprop.0+0xb6>
 8009370:	3c57      	subs	r4, #87	@ 0x57
 8009372:	e7d5      	b.n	8009320 <_strtoul_l.constprop.0+0x5c>
 8009374:	f04f 36ff 	mov.w	r6, #4294967295
 8009378:	e7df      	b.n	800933a <_strtoul_l.constprop.0+0x76>
 800937a:	1c73      	adds	r3, r6, #1
 800937c:	d106      	bne.n	800938c <_strtoul_l.constprop.0+0xc8>
 800937e:	2322      	movs	r3, #34	@ 0x22
 8009380:	4630      	mov	r0, r6
 8009382:	f8ce 3000 	str.w	r3, [lr]
 8009386:	b932      	cbnz	r2, 8009396 <_strtoul_l.constprop.0+0xd2>
 8009388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800938c:	b107      	cbz	r7, 8009390 <_strtoul_l.constprop.0+0xcc>
 800938e:	4240      	negs	r0, r0
 8009390:	2a00      	cmp	r2, #0
 8009392:	d0f9      	beq.n	8009388 <_strtoul_l.constprop.0+0xc4>
 8009394:	b106      	cbz	r6, 8009398 <_strtoul_l.constprop.0+0xd4>
 8009396:	1e69      	subs	r1, r5, #1
 8009398:	6011      	str	r1, [r2, #0]
 800939a:	e7f5      	b.n	8009388 <_strtoul_l.constprop.0+0xc4>
 800939c:	08009e09 	.word	0x08009e09

080093a0 <_strtoul_r>:
 80093a0:	f7ff bf90 	b.w	80092c4 <_strtoul_l.constprop.0>

080093a4 <__ascii_wctomb>:
 80093a4:	4603      	mov	r3, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	b141      	cbz	r1, 80093bc <__ascii_wctomb+0x18>
 80093aa:	2aff      	cmp	r2, #255	@ 0xff
 80093ac:	d904      	bls.n	80093b8 <__ascii_wctomb+0x14>
 80093ae:	228a      	movs	r2, #138	@ 0x8a
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	4770      	bx	lr
 80093b8:	2001      	movs	r0, #1
 80093ba:	700a      	strb	r2, [r1, #0]
 80093bc:	4770      	bx	lr
	...

080093c0 <fiprintf>:
 80093c0:	b40e      	push	{r1, r2, r3}
 80093c2:	b503      	push	{r0, r1, lr}
 80093c4:	4601      	mov	r1, r0
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	4805      	ldr	r0, [pc, #20]	@ (80093e0 <fiprintf+0x20>)
 80093ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ce:	6800      	ldr	r0, [r0, #0]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f000 f83d 	bl	8009450 <_vfiprintf_r>
 80093d6:	b002      	add	sp, #8
 80093d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093dc:	b003      	add	sp, #12
 80093de:	4770      	bx	lr
 80093e0:	20000018 	.word	0x20000018

080093e4 <abort>:
 80093e4:	2006      	movs	r0, #6
 80093e6:	b508      	push	{r3, lr}
 80093e8:	f000 fa06 	bl	80097f8 <raise>
 80093ec:	2001      	movs	r0, #1
 80093ee:	f7f8 fa50 	bl	8001892 <_exit>

080093f2 <_malloc_usable_size_r>:
 80093f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f6:	1f18      	subs	r0, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfbc      	itt	lt
 80093fc:	580b      	ldrlt	r3, [r1, r0]
 80093fe:	18c0      	addlt	r0, r0, r3
 8009400:	4770      	bx	lr

08009402 <__sfputc_r>:
 8009402:	6893      	ldr	r3, [r2, #8]
 8009404:	b410      	push	{r4}
 8009406:	3b01      	subs	r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	6093      	str	r3, [r2, #8]
 800940c:	da07      	bge.n	800941e <__sfputc_r+0x1c>
 800940e:	6994      	ldr	r4, [r2, #24]
 8009410:	42a3      	cmp	r3, r4
 8009412:	db01      	blt.n	8009418 <__sfputc_r+0x16>
 8009414:	290a      	cmp	r1, #10
 8009416:	d102      	bne.n	800941e <__sfputc_r+0x1c>
 8009418:	bc10      	pop	{r4}
 800941a:	f000 b931 	b.w	8009680 <__swbuf_r>
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	1c58      	adds	r0, r3, #1
 8009422:	6010      	str	r0, [r2, #0]
 8009424:	7019      	strb	r1, [r3, #0]
 8009426:	4608      	mov	r0, r1
 8009428:	bc10      	pop	{r4}
 800942a:	4770      	bx	lr

0800942c <__sfputs_r>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	4606      	mov	r6, r0
 8009430:	460f      	mov	r7, r1
 8009432:	4614      	mov	r4, r2
 8009434:	18d5      	adds	r5, r2, r3
 8009436:	42ac      	cmp	r4, r5
 8009438:	d101      	bne.n	800943e <__sfputs_r+0x12>
 800943a:	2000      	movs	r0, #0
 800943c:	e007      	b.n	800944e <__sfputs_r+0x22>
 800943e:	463a      	mov	r2, r7
 8009440:	4630      	mov	r0, r6
 8009442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009446:	f7ff ffdc 	bl	8009402 <__sfputc_r>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d1f3      	bne.n	8009436 <__sfputs_r+0xa>
 800944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009450 <_vfiprintf_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	460d      	mov	r5, r1
 8009456:	4614      	mov	r4, r2
 8009458:	4698      	mov	r8, r3
 800945a:	4606      	mov	r6, r0
 800945c:	b09d      	sub	sp, #116	@ 0x74
 800945e:	b118      	cbz	r0, 8009468 <_vfiprintf_r+0x18>
 8009460:	6a03      	ldr	r3, [r0, #32]
 8009462:	b90b      	cbnz	r3, 8009468 <_vfiprintf_r+0x18>
 8009464:	f7fc f9de 	bl	8005824 <__sinit>
 8009468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800946a:	07d9      	lsls	r1, r3, #31
 800946c:	d405      	bmi.n	800947a <_vfiprintf_r+0x2a>
 800946e:	89ab      	ldrh	r3, [r5, #12]
 8009470:	059a      	lsls	r2, r3, #22
 8009472:	d402      	bmi.n	800947a <_vfiprintf_r+0x2a>
 8009474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009476:	f7fc fb18 	bl	8005aaa <__retarget_lock_acquire_recursive>
 800947a:	89ab      	ldrh	r3, [r5, #12]
 800947c:	071b      	lsls	r3, r3, #28
 800947e:	d501      	bpl.n	8009484 <_vfiprintf_r+0x34>
 8009480:	692b      	ldr	r3, [r5, #16]
 8009482:	b99b      	cbnz	r3, 80094ac <_vfiprintf_r+0x5c>
 8009484:	4629      	mov	r1, r5
 8009486:	4630      	mov	r0, r6
 8009488:	f000 f938 	bl	80096fc <__swsetup_r>
 800948c:	b170      	cbz	r0, 80094ac <_vfiprintf_r+0x5c>
 800948e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009490:	07dc      	lsls	r4, r3, #31
 8009492:	d504      	bpl.n	800949e <_vfiprintf_r+0x4e>
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	b01d      	add	sp, #116	@ 0x74
 800949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949e:	89ab      	ldrh	r3, [r5, #12]
 80094a0:	0598      	lsls	r0, r3, #22
 80094a2:	d4f7      	bmi.n	8009494 <_vfiprintf_r+0x44>
 80094a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094a6:	f7fc fb01 	bl	8005aac <__retarget_lock_release_recursive>
 80094aa:	e7f3      	b.n	8009494 <_vfiprintf_r+0x44>
 80094ac:	2300      	movs	r3, #0
 80094ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b0:	2320      	movs	r3, #32
 80094b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094b6:	2330      	movs	r3, #48	@ 0x30
 80094b8:	f04f 0901 	mov.w	r9, #1
 80094bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80094c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800966c <_vfiprintf_r+0x21c>
 80094c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094c8:	4623      	mov	r3, r4
 80094ca:	469a      	mov	sl, r3
 80094cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d0:	b10a      	cbz	r2, 80094d6 <_vfiprintf_r+0x86>
 80094d2:	2a25      	cmp	r2, #37	@ 0x25
 80094d4:	d1f9      	bne.n	80094ca <_vfiprintf_r+0x7a>
 80094d6:	ebba 0b04 	subs.w	fp, sl, r4
 80094da:	d00b      	beq.n	80094f4 <_vfiprintf_r+0xa4>
 80094dc:	465b      	mov	r3, fp
 80094de:	4622      	mov	r2, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7ff ffa2 	bl	800942c <__sfputs_r>
 80094e8:	3001      	adds	r0, #1
 80094ea:	f000 80a7 	beq.w	800963c <_vfiprintf_r+0x1ec>
 80094ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094f0:	445a      	add	r2, fp
 80094f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80094f4:	f89a 3000 	ldrb.w	r3, [sl]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 809f 	beq.w	800963c <_vfiprintf_r+0x1ec>
 80094fe:	2300      	movs	r3, #0
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009508:	f10a 0a01 	add.w	sl, sl, #1
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	9307      	str	r3, [sp, #28]
 8009510:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009514:	931a      	str	r3, [sp, #104]	@ 0x68
 8009516:	4654      	mov	r4, sl
 8009518:	2205      	movs	r2, #5
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	4853      	ldr	r0, [pc, #332]	@ (800966c <_vfiprintf_r+0x21c>)
 8009520:	f7fc fac5 	bl	8005aae <memchr>
 8009524:	9a04      	ldr	r2, [sp, #16]
 8009526:	b9d8      	cbnz	r0, 8009560 <_vfiprintf_r+0x110>
 8009528:	06d1      	lsls	r1, r2, #27
 800952a:	bf44      	itt	mi
 800952c:	2320      	movmi	r3, #32
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009532:	0713      	lsls	r3, r2, #28
 8009534:	bf44      	itt	mi
 8009536:	232b      	movmi	r3, #43	@ 0x2b
 8009538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800953c:	f89a 3000 	ldrb.w	r3, [sl]
 8009540:	2b2a      	cmp	r3, #42	@ 0x2a
 8009542:	d015      	beq.n	8009570 <_vfiprintf_r+0x120>
 8009544:	4654      	mov	r4, sl
 8009546:	2000      	movs	r0, #0
 8009548:	f04f 0c0a 	mov.w	ip, #10
 800954c:	9a07      	ldr	r2, [sp, #28]
 800954e:	4621      	mov	r1, r4
 8009550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009554:	3b30      	subs	r3, #48	@ 0x30
 8009556:	2b09      	cmp	r3, #9
 8009558:	d94b      	bls.n	80095f2 <_vfiprintf_r+0x1a2>
 800955a:	b1b0      	cbz	r0, 800958a <_vfiprintf_r+0x13a>
 800955c:	9207      	str	r2, [sp, #28]
 800955e:	e014      	b.n	800958a <_vfiprintf_r+0x13a>
 8009560:	eba0 0308 	sub.w	r3, r0, r8
 8009564:	fa09 f303 	lsl.w	r3, r9, r3
 8009568:	4313      	orrs	r3, r2
 800956a:	46a2      	mov	sl, r4
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	e7d2      	b.n	8009516 <_vfiprintf_r+0xc6>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	1d19      	adds	r1, r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9103      	str	r1, [sp, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bfbb      	ittet	lt
 800957c:	425b      	neglt	r3, r3
 800957e:	f042 0202 	orrlt.w	r2, r2, #2
 8009582:	9307      	strge	r3, [sp, #28]
 8009584:	9307      	strlt	r3, [sp, #28]
 8009586:	bfb8      	it	lt
 8009588:	9204      	strlt	r2, [sp, #16]
 800958a:	7823      	ldrb	r3, [r4, #0]
 800958c:	2b2e      	cmp	r3, #46	@ 0x2e
 800958e:	d10a      	bne.n	80095a6 <_vfiprintf_r+0x156>
 8009590:	7863      	ldrb	r3, [r4, #1]
 8009592:	2b2a      	cmp	r3, #42	@ 0x2a
 8009594:	d132      	bne.n	80095fc <_vfiprintf_r+0x1ac>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	3402      	adds	r4, #2
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	9203      	str	r2, [sp, #12]
 80095a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095a4:	9305      	str	r3, [sp, #20]
 80095a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009670 <_vfiprintf_r+0x220>
 80095aa:	2203      	movs	r2, #3
 80095ac:	4650      	mov	r0, sl
 80095ae:	7821      	ldrb	r1, [r4, #0]
 80095b0:	f7fc fa7d 	bl	8005aae <memchr>
 80095b4:	b138      	cbz	r0, 80095c6 <_vfiprintf_r+0x176>
 80095b6:	2240      	movs	r2, #64	@ 0x40
 80095b8:	9b04      	ldr	r3, [sp, #16]
 80095ba:	eba0 000a 	sub.w	r0, r0, sl
 80095be:	4082      	lsls	r2, r0
 80095c0:	4313      	orrs	r3, r2
 80095c2:	3401      	adds	r4, #1
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ca:	2206      	movs	r2, #6
 80095cc:	4829      	ldr	r0, [pc, #164]	@ (8009674 <_vfiprintf_r+0x224>)
 80095ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095d2:	f7fc fa6c 	bl	8005aae <memchr>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d03f      	beq.n	800965a <_vfiprintf_r+0x20a>
 80095da:	4b27      	ldr	r3, [pc, #156]	@ (8009678 <_vfiprintf_r+0x228>)
 80095dc:	bb1b      	cbnz	r3, 8009626 <_vfiprintf_r+0x1d6>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	3307      	adds	r3, #7
 80095e2:	f023 0307 	bic.w	r3, r3, #7
 80095e6:	3308      	adds	r3, #8
 80095e8:	9303      	str	r3, [sp, #12]
 80095ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ec:	443b      	add	r3, r7
 80095ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f0:	e76a      	b.n	80094c8 <_vfiprintf_r+0x78>
 80095f2:	460c      	mov	r4, r1
 80095f4:	2001      	movs	r0, #1
 80095f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fa:	e7a8      	b.n	800954e <_vfiprintf_r+0xfe>
 80095fc:	2300      	movs	r3, #0
 80095fe:	f04f 0c0a 	mov.w	ip, #10
 8009602:	4619      	mov	r1, r3
 8009604:	3401      	adds	r4, #1
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	4620      	mov	r0, r4
 800960a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960e:	3a30      	subs	r2, #48	@ 0x30
 8009610:	2a09      	cmp	r2, #9
 8009612:	d903      	bls.n	800961c <_vfiprintf_r+0x1cc>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0c6      	beq.n	80095a6 <_vfiprintf_r+0x156>
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	e7c4      	b.n	80095a6 <_vfiprintf_r+0x156>
 800961c:	4604      	mov	r4, r0
 800961e:	2301      	movs	r3, #1
 8009620:	fb0c 2101 	mla	r1, ip, r1, r2
 8009624:	e7f0      	b.n	8009608 <_vfiprintf_r+0x1b8>
 8009626:	ab03      	add	r3, sp, #12
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	462a      	mov	r2, r5
 800962c:	4630      	mov	r0, r6
 800962e:	4b13      	ldr	r3, [pc, #76]	@ (800967c <_vfiprintf_r+0x22c>)
 8009630:	a904      	add	r1, sp, #16
 8009632:	f7fb fa9d 	bl	8004b70 <_printf_float>
 8009636:	4607      	mov	r7, r0
 8009638:	1c78      	adds	r0, r7, #1
 800963a:	d1d6      	bne.n	80095ea <_vfiprintf_r+0x19a>
 800963c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800963e:	07d9      	lsls	r1, r3, #31
 8009640:	d405      	bmi.n	800964e <_vfiprintf_r+0x1fe>
 8009642:	89ab      	ldrh	r3, [r5, #12]
 8009644:	059a      	lsls	r2, r3, #22
 8009646:	d402      	bmi.n	800964e <_vfiprintf_r+0x1fe>
 8009648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800964a:	f7fc fa2f 	bl	8005aac <__retarget_lock_release_recursive>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	065b      	lsls	r3, r3, #25
 8009652:	f53f af1f 	bmi.w	8009494 <_vfiprintf_r+0x44>
 8009656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009658:	e71e      	b.n	8009498 <_vfiprintf_r+0x48>
 800965a:	ab03      	add	r3, sp, #12
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	462a      	mov	r2, r5
 8009660:	4630      	mov	r0, r6
 8009662:	4b06      	ldr	r3, [pc, #24]	@ (800967c <_vfiprintf_r+0x22c>)
 8009664:	a904      	add	r1, sp, #16
 8009666:	f7fb fd21 	bl	80050ac <_printf_i>
 800966a:	e7e4      	b.n	8009636 <_vfiprintf_r+0x1e6>
 800966c:	08009f09 	.word	0x08009f09
 8009670:	08009f0f 	.word	0x08009f0f
 8009674:	08009f13 	.word	0x08009f13
 8009678:	08004b71 	.word	0x08004b71
 800967c:	0800942d 	.word	0x0800942d

08009680 <__swbuf_r>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	460e      	mov	r6, r1
 8009684:	4614      	mov	r4, r2
 8009686:	4605      	mov	r5, r0
 8009688:	b118      	cbz	r0, 8009692 <__swbuf_r+0x12>
 800968a:	6a03      	ldr	r3, [r0, #32]
 800968c:	b90b      	cbnz	r3, 8009692 <__swbuf_r+0x12>
 800968e:	f7fc f8c9 	bl	8005824 <__sinit>
 8009692:	69a3      	ldr	r3, [r4, #24]
 8009694:	60a3      	str	r3, [r4, #8]
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	071a      	lsls	r2, r3, #28
 800969a:	d501      	bpl.n	80096a0 <__swbuf_r+0x20>
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	b943      	cbnz	r3, 80096b2 <__swbuf_r+0x32>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f82a 	bl	80096fc <__swsetup_r>
 80096a8:	b118      	cbz	r0, 80096b2 <__swbuf_r+0x32>
 80096aa:	f04f 37ff 	mov.w	r7, #4294967295
 80096ae:	4638      	mov	r0, r7
 80096b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	6922      	ldr	r2, [r4, #16]
 80096b6:	b2f6      	uxtb	r6, r6
 80096b8:	1a98      	subs	r0, r3, r2
 80096ba:	6963      	ldr	r3, [r4, #20]
 80096bc:	4637      	mov	r7, r6
 80096be:	4283      	cmp	r3, r0
 80096c0:	dc05      	bgt.n	80096ce <__swbuf_r+0x4e>
 80096c2:	4621      	mov	r1, r4
 80096c4:	4628      	mov	r0, r5
 80096c6:	f7ff f967 	bl	8008998 <_fflush_r>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d1ed      	bne.n	80096aa <__swbuf_r+0x2a>
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	60a3      	str	r3, [r4, #8]
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	701e      	strb	r6, [r3, #0]
 80096dc:	6962      	ldr	r2, [r4, #20]
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d004      	beq.n	80096ee <__swbuf_r+0x6e>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	07db      	lsls	r3, r3, #31
 80096e8:	d5e1      	bpl.n	80096ae <__swbuf_r+0x2e>
 80096ea:	2e0a      	cmp	r6, #10
 80096ec:	d1df      	bne.n	80096ae <__swbuf_r+0x2e>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	f7ff f951 	bl	8008998 <_fflush_r>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d0d9      	beq.n	80096ae <__swbuf_r+0x2e>
 80096fa:	e7d6      	b.n	80096aa <__swbuf_r+0x2a>

080096fc <__swsetup_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4b29      	ldr	r3, [pc, #164]	@ (80097a4 <__swsetup_r+0xa8>)
 8009700:	4605      	mov	r5, r0
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	460c      	mov	r4, r1
 8009706:	b118      	cbz	r0, 8009710 <__swsetup_r+0x14>
 8009708:	6a03      	ldr	r3, [r0, #32]
 800970a:	b90b      	cbnz	r3, 8009710 <__swsetup_r+0x14>
 800970c:	f7fc f88a 	bl	8005824 <__sinit>
 8009710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009714:	0719      	lsls	r1, r3, #28
 8009716:	d422      	bmi.n	800975e <__swsetup_r+0x62>
 8009718:	06da      	lsls	r2, r3, #27
 800971a:	d407      	bmi.n	800972c <__swsetup_r+0x30>
 800971c:	2209      	movs	r2, #9
 800971e:	602a      	str	r2, [r5, #0]
 8009720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	e033      	b.n	8009794 <__swsetup_r+0x98>
 800972c:	0758      	lsls	r0, r3, #29
 800972e:	d512      	bpl.n	8009756 <__swsetup_r+0x5a>
 8009730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009732:	b141      	cbz	r1, 8009746 <__swsetup_r+0x4a>
 8009734:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009738:	4299      	cmp	r1, r3
 800973a:	d002      	beq.n	8009742 <__swsetup_r+0x46>
 800973c:	4628      	mov	r0, r5
 800973e:	f7fd f81b 	bl	8006778 <_free_r>
 8009742:	2300      	movs	r3, #0
 8009744:	6363      	str	r3, [r4, #52]	@ 0x34
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	2300      	movs	r3, #0
 8009750:	6063      	str	r3, [r4, #4]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f043 0308 	orr.w	r3, r3, #8
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	b94b      	cbnz	r3, 8009776 <__swsetup_r+0x7a>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800976c:	d003      	beq.n	8009776 <__swsetup_r+0x7a>
 800976e:	4621      	mov	r1, r4
 8009770:	4628      	mov	r0, r5
 8009772:	f000 f882 	bl	800987a <__smakebuf_r>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	f013 0201 	ands.w	r2, r3, #1
 800977e:	d00a      	beq.n	8009796 <__swsetup_r+0x9a>
 8009780:	2200      	movs	r2, #0
 8009782:	60a2      	str	r2, [r4, #8]
 8009784:	6962      	ldr	r2, [r4, #20]
 8009786:	4252      	negs	r2, r2
 8009788:	61a2      	str	r2, [r4, #24]
 800978a:	6922      	ldr	r2, [r4, #16]
 800978c:	b942      	cbnz	r2, 80097a0 <__swsetup_r+0xa4>
 800978e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009792:	d1c5      	bne.n	8009720 <__swsetup_r+0x24>
 8009794:	bd38      	pop	{r3, r4, r5, pc}
 8009796:	0799      	lsls	r1, r3, #30
 8009798:	bf58      	it	pl
 800979a:	6962      	ldrpl	r2, [r4, #20]
 800979c:	60a2      	str	r2, [r4, #8]
 800979e:	e7f4      	b.n	800978a <__swsetup_r+0x8e>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7f7      	b.n	8009794 <__swsetup_r+0x98>
 80097a4:	20000018 	.word	0x20000018

080097a8 <_raise_r>:
 80097a8:	291f      	cmp	r1, #31
 80097aa:	b538      	push	{r3, r4, r5, lr}
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	d904      	bls.n	80097bc <_raise_r+0x14>
 80097b2:	2316      	movs	r3, #22
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097be:	b112      	cbz	r2, 80097c6 <_raise_r+0x1e>
 80097c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097c4:	b94b      	cbnz	r3, 80097da <_raise_r+0x32>
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 f830 	bl	800982c <_getpid_r>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4601      	mov	r1, r0
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d6:	f000 b817 	b.w	8009808 <_kill_r>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d00a      	beq.n	80097f4 <_raise_r+0x4c>
 80097de:	1c59      	adds	r1, r3, #1
 80097e0:	d103      	bne.n	80097ea <_raise_r+0x42>
 80097e2:	2316      	movs	r3, #22
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	2001      	movs	r0, #1
 80097e8:	e7e7      	b.n	80097ba <_raise_r+0x12>
 80097ea:	2100      	movs	r1, #0
 80097ec:	4620      	mov	r0, r4
 80097ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097f2:	4798      	blx	r3
 80097f4:	2000      	movs	r0, #0
 80097f6:	e7e0      	b.n	80097ba <_raise_r+0x12>

080097f8 <raise>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	@ (8009804 <raise+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f7ff bfd3 	b.w	80097a8 <_raise_r>
 8009802:	bf00      	nop
 8009804:	20000018 	.word	0x20000018

08009808 <_kill_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	2300      	movs	r3, #0
 800980c:	4d06      	ldr	r5, [pc, #24]	@ (8009828 <_kill_r+0x20>)
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7f8 f82c 	bl	8001872 <_kill>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d102      	bne.n	8009824 <_kill_r+0x1c>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	b103      	cbz	r3, 8009824 <_kill_r+0x1c>
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	20000460 	.word	0x20000460

0800982c <_getpid_r>:
 800982c:	f7f8 b81a 	b.w	8001864 <_getpid>

08009830 <__swhatbuf_r>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	460c      	mov	r4, r1
 8009834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009838:	4615      	mov	r5, r2
 800983a:	2900      	cmp	r1, #0
 800983c:	461e      	mov	r6, r3
 800983e:	b096      	sub	sp, #88	@ 0x58
 8009840:	da0c      	bge.n	800985c <__swhatbuf_r+0x2c>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	2100      	movs	r1, #0
 8009846:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800984a:	bf14      	ite	ne
 800984c:	2340      	movne	r3, #64	@ 0x40
 800984e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009852:	2000      	movs	r0, #0
 8009854:	6031      	str	r1, [r6, #0]
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	b016      	add	sp, #88	@ 0x58
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	466a      	mov	r2, sp
 800985e:	f000 f849 	bl	80098f4 <_fstat_r>
 8009862:	2800      	cmp	r0, #0
 8009864:	dbed      	blt.n	8009842 <__swhatbuf_r+0x12>
 8009866:	9901      	ldr	r1, [sp, #4]
 8009868:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800986c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009870:	4259      	negs	r1, r3
 8009872:	4159      	adcs	r1, r3
 8009874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009878:	e7eb      	b.n	8009852 <__swhatbuf_r+0x22>

0800987a <__smakebuf_r>:
 800987a:	898b      	ldrh	r3, [r1, #12]
 800987c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800987e:	079d      	lsls	r5, r3, #30
 8009880:	4606      	mov	r6, r0
 8009882:	460c      	mov	r4, r1
 8009884:	d507      	bpl.n	8009896 <__smakebuf_r+0x1c>
 8009886:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	2301      	movs	r3, #1
 8009890:	6163      	str	r3, [r4, #20]
 8009892:	b003      	add	sp, #12
 8009894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009896:	466a      	mov	r2, sp
 8009898:	ab01      	add	r3, sp, #4
 800989a:	f7ff ffc9 	bl	8009830 <__swhatbuf_r>
 800989e:	9f00      	ldr	r7, [sp, #0]
 80098a0:	4605      	mov	r5, r0
 80098a2:	4639      	mov	r1, r7
 80098a4:	4630      	mov	r0, r6
 80098a6:	f7fc ffd9 	bl	800685c <_malloc_r>
 80098aa:	b948      	cbnz	r0, 80098c0 <__smakebuf_r+0x46>
 80098ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d4ee      	bmi.n	8009892 <__smakebuf_r+0x18>
 80098b4:	f023 0303 	bic.w	r3, r3, #3
 80098b8:	f043 0302 	orr.w	r3, r3, #2
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	e7e2      	b.n	8009886 <__smakebuf_r+0xc>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	6020      	str	r0, [r4, #0]
 80098d0:	b15b      	cbz	r3, 80098ea <__smakebuf_r+0x70>
 80098d2:	4630      	mov	r0, r6
 80098d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098d8:	f000 f81e 	bl	8009918 <_isatty_r>
 80098dc:	b128      	cbz	r0, 80098ea <__smakebuf_r+0x70>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f023 0303 	bic.w	r3, r3, #3
 80098e4:	f043 0301 	orr.w	r3, r3, #1
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	431d      	orrs	r5, r3
 80098ee:	81a5      	strh	r5, [r4, #12]
 80098f0:	e7cf      	b.n	8009892 <__smakebuf_r+0x18>
	...

080098f4 <_fstat_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	2300      	movs	r3, #0
 80098f8:	4d06      	ldr	r5, [pc, #24]	@ (8009914 <_fstat_r+0x20>)
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7f8 f815 	bl	8001930 <_fstat>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_fstat_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_fstat_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	20000460 	.word	0x20000460

08009918 <_isatty_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	2300      	movs	r3, #0
 800991c:	4d05      	ldr	r5, [pc, #20]	@ (8009934 <_isatty_r+0x1c>)
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	f7f8 f813 	bl	800194e <_isatty>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_isatty_r+0x1a>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_isatty_r+0x1a>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20000460 	.word	0x20000460

08009938 <_init>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr

08009944 <_fini>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr
