
can_am_blinker_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a4  080048a4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048ac  080048ac  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  08004910  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08004910  000062e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c229  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5d  00000000  00000000  000122ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00013f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098d  00000000  00000000  00014b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ea9  00000000  00000000  000154cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de64  00000000  00000000  00017376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b364a  00000000  00000000  000251da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  000d8868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000dc4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004594 	.word	0x08004594

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08004594 	.word	0x08004594

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	@ 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295
 80005c0:	f000 b968 	b.w	8000894 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f806 	bl	80005dc <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__udivmoddi4>:
 80005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e0:	9d08      	ldr	r5, [sp, #32]
 80005e2:	460c      	mov	r4, r1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14e      	bne.n	8000686 <__udivmoddi4+0xaa>
 80005e8:	4694      	mov	ip, r2
 80005ea:	458c      	cmp	ip, r1
 80005ec:	4686      	mov	lr, r0
 80005ee:	fab2 f282 	clz	r2, r2
 80005f2:	d962      	bls.n	80006ba <__udivmoddi4+0xde>
 80005f4:	b14a      	cbz	r2, 800060a <__udivmoddi4+0x2e>
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	4091      	lsls	r1, r2
 80005fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	4319      	orrs	r1, r3
 8000606:	fa00 fe02 	lsl.w	lr, r0, r2
 800060a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800060e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000612:	fb07 1114 	mls	r1, r7, r4, r1
 8000616:	fa1f f68c 	uxth.w	r6, ip
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb04 f106 	mul.w	r1, r4, r6
 8000626:	4299      	cmp	r1, r3
 8000628:	d90a      	bls.n	8000640 <__udivmoddi4+0x64>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000632:	f080 8110 	bcs.w	8000856 <__udivmoddi4+0x27a>
 8000636:	4299      	cmp	r1, r3
 8000638:	f240 810d 	bls.w	8000856 <__udivmoddi4+0x27a>
 800063c:	3c02      	subs	r4, #2
 800063e:	4463      	add	r3, ip
 8000640:	1a59      	subs	r1, r3, r1
 8000642:	fbb1 f0f7 	udiv	r0, r1, r7
 8000646:	fb07 1110 	mls	r1, r7, r0, r1
 800064a:	fb00 f606 	mul.w	r6, r0, r6
 800064e:	fa1f f38e 	uxth.w	r3, lr
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	429e      	cmp	r6, r3
 8000658:	d90a      	bls.n	8000670 <__udivmoddi4+0x94>
 800065a:	eb1c 0303 	adds.w	r3, ip, r3
 800065e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000662:	f080 80fa 	bcs.w	800085a <__udivmoddi4+0x27e>
 8000666:	429e      	cmp	r6, r3
 8000668:	f240 80f7 	bls.w	800085a <__udivmoddi4+0x27e>
 800066c:	4463      	add	r3, ip
 800066e:	3802      	subs	r0, #2
 8000670:	2100      	movs	r1, #0
 8000672:	1b9b      	subs	r3, r3, r6
 8000674:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000678:	b11d      	cbz	r5, 8000682 <__udivmoddi4+0xa6>
 800067a:	40d3      	lsrs	r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	e9c5 3200 	strd	r3, r2, [r5]
 8000682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000686:	428b      	cmp	r3, r1
 8000688:	d905      	bls.n	8000696 <__udivmoddi4+0xba>
 800068a:	b10d      	cbz	r5, 8000690 <__udivmoddi4+0xb4>
 800068c:	e9c5 0100 	strd	r0, r1, [r5]
 8000690:	2100      	movs	r1, #0
 8000692:	4608      	mov	r0, r1
 8000694:	e7f5      	b.n	8000682 <__udivmoddi4+0xa6>
 8000696:	fab3 f183 	clz	r1, r3
 800069a:	2900      	cmp	r1, #0
 800069c:	d146      	bne.n	800072c <__udivmoddi4+0x150>
 800069e:	42a3      	cmp	r3, r4
 80006a0:	d302      	bcc.n	80006a8 <__udivmoddi4+0xcc>
 80006a2:	4290      	cmp	r0, r2
 80006a4:	f0c0 80ee 	bcc.w	8000884 <__udivmoddi4+0x2a8>
 80006a8:	1a86      	subs	r6, r0, r2
 80006aa:	eb64 0303 	sbc.w	r3, r4, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d0e6      	beq.n	8000682 <__udivmoddi4+0xa6>
 80006b4:	e9c5 6300 	strd	r6, r3, [r5]
 80006b8:	e7e3      	b.n	8000682 <__udivmoddi4+0xa6>
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	f040 808f 	bne.w	80007de <__udivmoddi4+0x202>
 80006c0:	eba1 040c 	sub.w	r4, r1, ip
 80006c4:	2101      	movs	r1, #1
 80006c6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ca:	fa1f f78c 	uxth.w	r7, ip
 80006ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d2:	fb08 4416 	mls	r4, r8, r6, r4
 80006d6:	fb07 f006 	mul.w	r0, r7, r6
 80006da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d908      	bls.n	80006f8 <__udivmoddi4+0x11c>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80006ee:	d202      	bcs.n	80006f6 <__udivmoddi4+0x11a>
 80006f0:	4298      	cmp	r0, r3
 80006f2:	f200 80cb 	bhi.w	800088c <__udivmoddi4+0x2b0>
 80006f6:	4626      	mov	r6, r4
 80006f8:	1a1c      	subs	r4, r3, r0
 80006fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80006fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000702:	fb00 f707 	mul.w	r7, r0, r7
 8000706:	fa1f f38e 	uxth.w	r3, lr
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	429f      	cmp	r7, r3
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0x148>
 8000712:	eb1c 0303 	adds.w	r3, ip, r3
 8000716:	f100 34ff 	add.w	r4, r0, #4294967295
 800071a:	d202      	bcs.n	8000722 <__udivmoddi4+0x146>
 800071c:	429f      	cmp	r7, r3
 800071e:	f200 80ae 	bhi.w	800087e <__udivmoddi4+0x2a2>
 8000722:	4620      	mov	r0, r4
 8000724:	1bdb      	subs	r3, r3, r7
 8000726:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072a:	e7a5      	b.n	8000678 <__udivmoddi4+0x9c>
 800072c:	f1c1 0720 	rsb	r7, r1, #32
 8000730:	408b      	lsls	r3, r1
 8000732:	fa22 fc07 	lsr.w	ip, r2, r7
 8000736:	ea4c 0c03 	orr.w	ip, ip, r3
 800073a:	fa24 f607 	lsr.w	r6, r4, r7
 800073e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000742:	fbb6 f8f9 	udiv	r8, r6, r9
 8000746:	fa1f fe8c 	uxth.w	lr, ip
 800074a:	fb09 6618 	mls	r6, r9, r8, r6
 800074e:	fa20 f307 	lsr.w	r3, r0, r7
 8000752:	408c      	lsls	r4, r1
 8000754:	fa00 fa01 	lsl.w	sl, r0, r1
 8000758:	fb08 f00e 	mul.w	r0, r8, lr
 800075c:	431c      	orrs	r4, r3
 800075e:	0c23      	lsrs	r3, r4, #16
 8000760:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000764:	4298      	cmp	r0, r3
 8000766:	fa02 f201 	lsl.w	r2, r2, r1
 800076a:	d90a      	bls.n	8000782 <__udivmoddi4+0x1a6>
 800076c:	eb1c 0303 	adds.w	r3, ip, r3
 8000770:	f108 36ff 	add.w	r6, r8, #4294967295
 8000774:	f080 8081 	bcs.w	800087a <__udivmoddi4+0x29e>
 8000778:	4298      	cmp	r0, r3
 800077a:	d97e      	bls.n	800087a <__udivmoddi4+0x29e>
 800077c:	f1a8 0802 	sub.w	r8, r8, #2
 8000780:	4463      	add	r3, ip
 8000782:	1a1e      	subs	r6, r3, r0
 8000784:	fbb6 f3f9 	udiv	r3, r6, r9
 8000788:	fb09 6613 	mls	r6, r9, r3, r6
 800078c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000790:	b2a4      	uxth	r4, r4
 8000792:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000796:	45a6      	cmp	lr, r4
 8000798:	d908      	bls.n	80007ac <__udivmoddi4+0x1d0>
 800079a:	eb1c 0404 	adds.w	r4, ip, r4
 800079e:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a2:	d266      	bcs.n	8000872 <__udivmoddi4+0x296>
 80007a4:	45a6      	cmp	lr, r4
 80007a6:	d964      	bls.n	8000872 <__udivmoddi4+0x296>
 80007a8:	3b02      	subs	r3, #2
 80007aa:	4464      	add	r4, ip
 80007ac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80007b0:	fba0 8302 	umull	r8, r3, r0, r2
 80007b4:	eba4 040e 	sub.w	r4, r4, lr
 80007b8:	429c      	cmp	r4, r3
 80007ba:	46c6      	mov	lr, r8
 80007bc:	461e      	mov	r6, r3
 80007be:	d350      	bcc.n	8000862 <__udivmoddi4+0x286>
 80007c0:	d04d      	beq.n	800085e <__udivmoddi4+0x282>
 80007c2:	b155      	cbz	r5, 80007da <__udivmoddi4+0x1fe>
 80007c4:	ebba 030e 	subs.w	r3, sl, lr
 80007c8:	eb64 0406 	sbc.w	r4, r4, r6
 80007cc:	fa04 f707 	lsl.w	r7, r4, r7
 80007d0:	40cb      	lsrs	r3, r1
 80007d2:	431f      	orrs	r7, r3
 80007d4:	40cc      	lsrs	r4, r1
 80007d6:	e9c5 7400 	strd	r7, r4, [r5]
 80007da:	2100      	movs	r1, #0
 80007dc:	e751      	b.n	8000682 <__udivmoddi4+0xa6>
 80007de:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	40d9      	lsrs	r1, r3
 80007e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ec:	fa20 f303 	lsr.w	r3, r0, r3
 80007f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f4:	fbb1 f0f8 	udiv	r0, r1, r8
 80007f8:	fb08 1110 	mls	r1, r8, r0, r1
 80007fc:	4094      	lsls	r4, r2
 80007fe:	431c      	orrs	r4, r3
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	0c23      	lsrs	r3, r4, #16
 8000806:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080a:	fb00 f107 	mul.w	r1, r0, r7
 800080e:	4299      	cmp	r1, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x248>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f100 36ff 	add.w	r6, r0, #4294967295
 800081a:	d22c      	bcs.n	8000876 <__udivmoddi4+0x29a>
 800081c:	4299      	cmp	r1, r3
 800081e:	d92a      	bls.n	8000876 <__udivmoddi4+0x29a>
 8000820:	3802      	subs	r0, #2
 8000822:	4463      	add	r3, ip
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	fbb3 f1f8 	udiv	r1, r3, r8
 800082a:	fb08 3311 	mls	r3, r8, r1, r3
 800082e:	b2a4      	uxth	r4, r4
 8000830:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000834:	fb01 f307 	mul.w	r3, r1, r7
 8000838:	42a3      	cmp	r3, r4
 800083a:	d908      	bls.n	800084e <__udivmoddi4+0x272>
 800083c:	eb1c 0404 	adds.w	r4, ip, r4
 8000840:	f101 36ff 	add.w	r6, r1, #4294967295
 8000844:	d213      	bcs.n	800086e <__udivmoddi4+0x292>
 8000846:	42a3      	cmp	r3, r4
 8000848:	d911      	bls.n	800086e <__udivmoddi4+0x292>
 800084a:	3902      	subs	r1, #2
 800084c:	4464      	add	r4, ip
 800084e:	1ae4      	subs	r4, r4, r3
 8000850:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000854:	e73b      	b.n	80006ce <__udivmoddi4+0xf2>
 8000856:	4604      	mov	r4, r0
 8000858:	e6f2      	b.n	8000640 <__udivmoddi4+0x64>
 800085a:	4608      	mov	r0, r1
 800085c:	e708      	b.n	8000670 <__udivmoddi4+0x94>
 800085e:	45c2      	cmp	sl, r8
 8000860:	d2af      	bcs.n	80007c2 <__udivmoddi4+0x1e6>
 8000862:	ebb8 0e02 	subs.w	lr, r8, r2
 8000866:	eb63 060c 	sbc.w	r6, r3, ip
 800086a:	3801      	subs	r0, #1
 800086c:	e7a9      	b.n	80007c2 <__udivmoddi4+0x1e6>
 800086e:	4631      	mov	r1, r6
 8000870:	e7ed      	b.n	800084e <__udivmoddi4+0x272>
 8000872:	4603      	mov	r3, r0
 8000874:	e79a      	b.n	80007ac <__udivmoddi4+0x1d0>
 8000876:	4630      	mov	r0, r6
 8000878:	e7d4      	b.n	8000824 <__udivmoddi4+0x248>
 800087a:	46b0      	mov	r8, r6
 800087c:	e781      	b.n	8000782 <__udivmoddi4+0x1a6>
 800087e:	4463      	add	r3, ip
 8000880:	3802      	subs	r0, #2
 8000882:	e74f      	b.n	8000724 <__udivmoddi4+0x148>
 8000884:	4606      	mov	r6, r0
 8000886:	4623      	mov	r3, r4
 8000888:	4608      	mov	r0, r1
 800088a:	e711      	b.n	80006b0 <__udivmoddi4+0xd4>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	e732      	b.n	80006f8 <__udivmoddi4+0x11c>
 8000892:	bf00      	nop

08000894 <__aeabi_idiv0>:
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 fe6a 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f860 	bl	8000964 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uart.errorflag      = false;
 80008a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <main+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  uart.validmsg       = false;
 80008ac:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <main+0xbc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  uart.msg_state      = STATESTART;
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <main+0xbc>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  uart.len_verify     = 0;                        // Initialize length verify counter to 0
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <main+0xbc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  uart.producer_index = 0;                        // Initialize consumer index
 80008c4:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <main+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  uart.consumer_index = 0;                        // Initialize producer index
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <main+0xbc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  uart.inmenu         = false;                    // Will not start out in console menu
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <main+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f940 	bl	8000b60 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008e0:	f000 f88e 	bl	8000a00 <MX_TIM1_Init>
  MX_TIM6_Init();
 80008e4:	f000 f8dc 	bl	8000aa0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80008e8:	f000 f910 	bl	8000b0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  init_timer (&tim);
 80008ec:	481a      	ldr	r0, [pc, #104]	@ (8000958 <main+0xc0>)
 80008ee:	f000 f981 	bl	8000bf4 <init_timer>
  HAL_TIM_Base_Start_IT(&htim6);
 80008f2:	481a      	ldr	r0, [pc, #104]	@ (800095c <main+0xc4>)
 80008f4:	f001 ff1e 	bl	8002734 <HAL_TIM_Base_Start_IT>
  while (1) {

    /**
     * Message handling
     */
    if (uart.byte_counter >= MAX_RX_BUF_INDEX) {
 80008f8:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <main+0xbc>)
 80008fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80008fe:	2b1f      	cmp	r3, #31
 8000900:	d903      	bls.n	800090a <main+0x72>
      ResetRxBuffer(& uart);                        //Something went wrong, reset the RX buffer.
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <main+0xbc>)
 8000904:	f000 fc5e 	bl	80011c4 <ResetRxBuffer>
 8000908:	e00a      	b.n	8000920 <main+0x88>
    }
    else if(uart.consumer_index != uart.producer_index) {             //We have unprocessed data when indices do not agree
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <main+0xbc>)
 800090c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <main+0xbc>)
 8000912:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000916:	429a      	cmp	r2, r3
 8000918:	d002      	beq.n	8000920 <main+0x88>
      HandleByte(& uart);
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <main+0xbc>)
 800091c:	f000 fc6e 	bl	80011fc <HandleByte>
    }

    if(tim.flag_10ms_tick) {
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <main+0xc0>)
 8000922:	799b      	ldrb	r3, [r3, #6]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <main+0x96>
      tim.flag_10ms_tick = false;
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <main+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	719a      	strb	r2, [r3, #6]
    }

    if(tim.flag_100ms_tick) {
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <main+0xc0>)
 8000930:	79db      	ldrb	r3, [r3, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <main+0xa4>
    tim.flag_100ms_tick = false;
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <main+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	71da      	strb	r2, [r3, #7]
    }
    
	  

    if(tim.flag_500ms_tick) {
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <main+0xc0>)
 800093e:	7a1b      	ldrb	r3, [r3, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0d9      	beq.n	80008f8 <main+0x60>
      tim.flag_500ms_tick = false;
 8000944:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <main+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	721a      	strb	r2, [r3, #8]
      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);   // Board LED
 800094a:	2101      	movs	r1, #1
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <main+0xc8>)
 800094e:	f001 f941 	bl	8001bd4 <HAL_GPIO_TogglePin>
    if (uart.byte_counter >= MAX_RX_BUF_INDEX) {
 8000952:	e7d1      	b.n	80008f8 <main+0x60>
 8000954:	20000078 	.word	0x20000078
 8000958:	200000a8 	.word	0x200000a8
 800095c:	20000100 	.word	0x20000100
 8000960:	40011000 	.word	0x40011000

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	@ 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	2238      	movs	r2, #56	@ 0x38
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fd0a 	bl	800338c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000990:	2301      	movs	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f927 	bl	8001c08 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80009c0:	f000 f98e 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fc28 	bl	8002234 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009ea:	f000 f979 	bl	8000ce0 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80009ee:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <SystemClock_Config+0x98>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	@ 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	42420070 	.word	0x42420070

08000a00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a9c <MX_TIM1_Init+0x9c>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a48:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a4a:	f001 fe23 	bl	8002694 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f944 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a66:	f001 ffaf 	bl	80029c8 <HAL_TIM_ConfigClockSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a70:	f000 f936 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_TIM1_Init+0x98>)
 8000a82:	f002 f99b 	bl	8002dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a8c:	f000 f928 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000b8 	.word	0x200000b8
 8000a9c:	40012c00 	.word	0x40012c00

08000aa0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000ab0:	4a15      	ldr	r2, [pc, #84]	@ (8000b08 <MX_TIM6_Init+0x68>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000ab6:	2247      	movs	r2, #71	@ 0x47
 8000ab8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000ac2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ac6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000aca:	2280      	movs	r2, #128	@ 0x80
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ace:	480d      	ldr	r0, [pc, #52]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000ad0:	f001 fde0 	bl	8002694 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ada:	f000 f901 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <MX_TIM6_Init+0x64>)
 8000aec:	f002 f966 	bl	8002dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000af6:	f000 f8f3 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000100 	.word	0x20000100
 8000b08:	40001000 	.word	0x40001000

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <MX_USART1_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b18:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_USART1_UART_Init+0x4c>)
 8000b44:	f002 f9b2 	bl	8002eac <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8c7 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000148 	.word	0x20000148
 8000b5c:	40013800 	.word	0x40013800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1c      	ldr	r2, [pc, #112]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000b7a:	f043 0320 	orr.w	r3, r3, #32
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0320 	and.w	r3, r3, #32
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a16      	ldr	r2, [pc, #88]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a10      	ldr	r2, [pc, #64]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_GPIO_Init+0x8c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	480b      	ldr	r0, [pc, #44]	@ (8000bf0 <MX_GPIO_Init+0x90>)
 8000bc2:	f000 ffef 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HLTH_LED_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HLTH_LED_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_GPIO_Init+0x90>)
 8000bde:	f000 fe5d 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be2:	bf00      	nop
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40011000 	.word	0x40011000

08000bf4 <init_timer>:
/* USER CODE BEGIN 4 */

/********************************************//**
*  @brief Initialize timer events 
***********************************************/
void init_timer (timing_type * tim) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  tim -> led_fast_blink = false;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	725a      	strb	r2, [r3, #9]
  tim -> flag_10ms_tick = false;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	719a      	strb	r2, [r3, #6]
  tim -> flag_100ms_tick = false;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	71da      	strb	r2, [r3, #7]
  tim -> flag_500ms_tick = false;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	721a      	strb	r2, [r3, #8]
  tim -> ticks10ms = 0;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	801a      	strh	r2, [r3, #0]
  tim -> ticks100ms = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	805a      	strh	r2, [r3, #2]
  tim -> ticks500ms = 0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	809a      	strh	r2, [r3, #4]

  tim -> timer_100ms_running = false;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	731a      	strb	r2, [r3, #12]
  tim -> timer_100ms_cntr = 0;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	815a      	strh	r2, [r3, #10]

}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <HAL_TIM_PeriodElapsedCallback>:

/********************************************//**
*  @brief Handle Timer Interrupts 
***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a24      	ldr	r2, [pc, #144]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d140      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x92>
			tim.flag_10ms_tick = true;
 8000c4c:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	719a      	strb	r2, [r3, #6]

		 if(tim.ticks10ms == 9) {
 8000c52:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	d133      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x86>
		   tim.ticks10ms = 0;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	801a      	strh	r2, [r3, #0]
		   tim.flag_100ms_tick = true;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	71da      	strb	r2, [r3, #7]
       if(tim.timer_100ms_running) {
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c68:	7b1b      	ldrb	r3, [r3, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x40>
        tim.timer_100ms_cntr++;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c70:	895b      	ldrh	r3, [r3, #10]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c78:	815a      	strh	r2, [r3, #10]
 8000c7a:	e002      	b.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x46>
       }
       else {
        tim.timer_100ms_cntr = 0;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	815a      	strh	r2, [r3, #10]
       }

		   if(tim.ticks100ms == 4) {
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c84:	885b      	ldrh	r3, [r3, #2]
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d114      	bne.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x78>
			 tim.ticks100ms = 0;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	805a      	strh	r2, [r3, #2]
			 tim.flag_500ms_tick = true;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	721a      	strb	r2, [r3, #8]

			 if(tim.ticks500ms == 119)										// One minute worth of half seconds
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c98:	889b      	ldrh	r3, [r3, #4]
 8000c9a:	2b77      	cmp	r3, #119	@ 0x77
 8000c9c:	d103      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			   tim.ticks500ms = 0;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	809a      	strh	r2, [r3, #4]
		 else {
		   tim.ticks10ms += 1;
		 }

		}
}
 8000ca4:	e013      	b.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x92>
			   tim.ticks500ms += 1;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cb0:	809a      	strh	r2, [r3, #4]
}
 8000cb2:	e00c      	b.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x92>
			   tim.ticks100ms += 1;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cb6:	885b      	ldrh	r3, [r3, #2]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cbe:	805a      	strh	r2, [r3, #2]
}
 8000cc0:	e005      	b.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x92>
		   tim.ticks10ms += 1;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ccc:	801a      	strh	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20000100 	.word	0x20000100
 8000cdc:	200000a8 	.word	0x200000a8

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_MspInit+0x60>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_MspInit+0x60>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <HAL_TIM_Base_MspInit+0x68>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10c      	bne.n	8000d7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_TIM_Base_MspInit+0x6c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <HAL_TIM_Base_MspInit+0x6c>)
 8000d68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <HAL_TIM_Base_MspInit+0x6c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d7a:	e018      	b.n	8000dae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x70>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d113      	bne.n	8000dae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_TIM_Base_MspInit+0x6c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <HAL_TIM_Base_MspInit+0x6c>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_TIM_Base_MspInit+0x6c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2036      	movs	r0, #54	@ 0x36
 8000da4:	f000 fd43 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000da8:	2036      	movs	r0, #54	@ 0x36
 8000daa:	f000 fd5c 	bl	8001866 <HAL_NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40012c00 	.word	0x40012c00
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	@ (8000e50 <HAL_UART_MspInit+0x8c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d131      	bne.n	8000e48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <HAL_UART_MspInit+0x94>)
 8000e2a:	f000 fd37 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_UART_MspInit+0x94>)
 8000e44:	f000 fd2a 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 fba8 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM6_IRQHandler+0x10>)
 8000eba:	f001 fc95 	bl	80027e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000100 	.word	0x20000100

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f002 fa50 	bl	800339c <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20010000 	.word	0x20010000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000190 	.word	0x20000190
 8000f30:	200002e0 	.word	0x200002e0

08000f34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <print_float>:
// timing       tim;               // Struct for all things timing related

extern uart_type        ut;
extern timing_type       tim;

void print_float (float number, uint8_t action) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
    char temp_buffer[8];        //Define the array that will hold the ASCII values
    char c = '\0';
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    sprintf(temp_buffer, "%.4f", number);   //f tells the function we want to print a float value
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fad3 	bl	80004fc <__aeabi_f2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	f107 0010 	add.w	r0, r7, #16
 8000f5e:	491a      	ldr	r1, [pc, #104]	@ (8000fc8 <print_float+0x88>)
 8000f60:	f002 f9c8 	bl	80032f4 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *) temp_buffer, sizeof(temp_buffer), HAL_MAX_DELAY);
 8000f64:	f107 0110 	add.w	r1, r7, #16
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	4817      	ldr	r0, [pc, #92]	@ (8000fcc <print_float+0x8c>)
 8000f70:	f001 ffec 	bl	8002f4c <HAL_UART_Transmit>

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d114      	bne.n	8000fa4 <print_float+0x64>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8000f7a:	230d      	movs	r3, #13
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	f107 010f 	add.w	r1, r7, #15
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2201      	movs	r2, #1
 8000f88:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <print_float+0x8c>)
 8000f8a:	f001 ffdf 	bl	8002f4c <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8000f8e:	230a      	movs	r3, #10
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	f107 010f 	add.w	r1, r7, #15
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <print_float+0x8c>)
 8000f9e:	f001 ffd5 	bl	8002f4c <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8000fa2:	e00c      	b.n	8000fbe <print_float+0x7e>
    else if(action == CR) {
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d109      	bne.n	8000fbe <print_float+0x7e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8000faa:	230d      	movs	r3, #13
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	f107 010f 	add.w	r1, r7, #15
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <print_float+0x8c>)
 8000fba:	f001 ffc7 	bl	8002f4c <HAL_UART_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	080045ac 	.word	0x080045ac
 8000fcc:	20000148 	.word	0x20000148

08000fd0 <print_string>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_string(const char * s, uint8_t action) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 8000fe0:	e009      	b.n	8000ff6 <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4819      	ldr	r0, [pc, #100]	@ (8001050 <print_string+0x80>)
 8000fec:	f001 ffae 	bl	8002f4c <HAL_UART_Transmit>
        s++;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f1      	bne.n	8000fe2 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d114      	bne.n	800102e <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001004:	230d      	movs	r3, #13
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	f107 010f 	add.w	r1, r7, #15
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	2201      	movs	r2, #1
 8001012:	480f      	ldr	r0, [pc, #60]	@ (8001050 <print_string+0x80>)
 8001014:	f001 ff9a 	bl	8002f4c <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001018:	230a      	movs	r3, #10
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	f107 010f 	add.w	r1, r7, #15
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2201      	movs	r2, #1
 8001026:	480a      	ldr	r0, [pc, #40]	@ (8001050 <print_string+0x80>)
 8001028:	f001 ff90 	bl	8002f4c <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 800102c:	e00c      	b.n	8001048 <print_string+0x78>
    else if(action == CR) {
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d109      	bne.n	8001048 <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001034:	230d      	movs	r3, #13
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	f107 010f 	add.w	r1, r7, #15
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	2201      	movs	r2, #1
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <print_string+0x80>)
 8001044:	f001 ff82 	bl	8002f4c <HAL_UART_Transmit>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000148 	.word	0x20000148

08001054 <print_unsigned_decimal>:

void print_unsigned_decimal (uint16_t number, uint8_t action) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	717b      	strb	r3, [r7, #5]
    char temphex[5];        //Define the array that will hold the ASCII values
    char c = '\r';
 8001064:	230d      	movs	r3, #13
 8001066:	73fb      	strb	r3, [r7, #15]
    uint8_t i;                
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4920      	ldr	r1, [pc, #128]	@ (80010f0 <print_unsigned_decimal+0x9c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f002 f93f 	bl	80032f4 <siprintf>
 8001076:	4603      	mov	r3, r0
 8001078:	75bb      	strb	r3, [r7, #22]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 800107a:	2300      	movs	r3, #0
 800107c:	75fb      	strb	r3, [r7, #23]
 800107e:	e00c      	b.n	800109a <print_unsigned_decimal+0x46>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	f107 0210 	add.w	r2, r7, #16
 8001086:	18d1      	adds	r1, r2, r3
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	2201      	movs	r2, #1
 800108e:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <print_unsigned_decimal+0xa0>)
 8001090:	f001 ff5c 	bl	8002f4c <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	3301      	adds	r3, #1
 8001098:	75fb      	strb	r3, [r7, #23]
 800109a:	7dfa      	ldrb	r2, [r7, #23]
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3ee      	bcc.n	8001080 <print_unsigned_decimal+0x2c>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80010a2:	797b      	ldrb	r3, [r7, #5]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d112      	bne.n	80010ce <print_unsigned_decimal+0x7a>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80010a8:	f107 010f 	add.w	r1, r7, #15
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2201      	movs	r2, #1
 80010b2:	4810      	ldr	r0, [pc, #64]	@ (80010f4 <print_unsigned_decimal+0xa0>)
 80010b4:	f001 ff4a 	bl	8002f4c <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80010b8:	230a      	movs	r3, #10
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	f107 010f 	add.w	r1, r7, #15
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	2201      	movs	r2, #1
 80010c6:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <print_unsigned_decimal+0xa0>)
 80010c8:	f001 ff40 	bl	8002f4c <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 80010cc:	e00c      	b.n	80010e8 <print_unsigned_decimal+0x94>
    else if(action == CR) {
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d109      	bne.n	80010e8 <print_unsigned_decimal+0x94>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80010d4:	230d      	movs	r3, #13
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	f107 010f 	add.w	r1, r7, #15
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2201      	movs	r2, #1
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <print_unsigned_decimal+0xa0>)
 80010e4:	f001 ff32 	bl	8002f4c <HAL_UART_Transmit>
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	080045b4 	.word	0x080045b4
 80010f4:	20000148 	.word	0x20000148

080010f8 <CursorTopLeft>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void CursorTopLeft( void ) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
    char c = 0x1B;
 80010fe:	231b      	movs	r3, #27
 8001100:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001102:	1df9      	adds	r1, r7, #7
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	2201      	movs	r2, #1
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <CursorTopLeft+0x28>)
 800110c:	f001 ff1e 	bl	8002f4c <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 8001110:	2100      	movs	r1, #0
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <CursorTopLeft+0x2c>)
 8001114:	f7ff ff5c 	bl	8000fd0 <print_string>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000148 	.word	0x20000148
 8001124:	080045c4 	.word	0x080045c4

08001128 <ResetTerminal>:

void ResetTerminal( void ) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800112e:	231b      	movs	r3, #27
 8001130:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001132:	1df9      	adds	r1, r7, #7
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	2201      	movs	r2, #1
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <ResetTerminal+0x28>)
 800113c:	f001 ff06 	bl	8002f4c <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 8001140:	2100      	movs	r1, #0
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <ResetTerminal+0x2c>)
 8001144:	f7ff ff44 	bl	8000fd0 <print_string>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000148 	.word	0x20000148
 8001154:	080045c8 	.word	0x080045c8

08001158 <InsertLineFeed>:

void InsertLineFeed( uint8_t line_feeds ) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 8001166:	230d      	movs	r3, #13
 8001168:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e014      	b.n	800119a <InsertLineFeed+0x42>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001170:	f107 010e 	add.w	r1, r7, #14
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	2201      	movs	r2, #1
 800117a:	480c      	ldr	r0, [pc, #48]	@ (80011ac <InsertLineFeed+0x54>)
 800117c:	f001 fee6 	bl	8002f4c <HAL_UART_Transmit>
        c = '\n'; //TODO: do we need this line?
 8001180:	230a      	movs	r3, #10
 8001182:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8001184:	f107 010e 	add.w	r1, r7, #14
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	2201      	movs	r2, #1
 800118e:	4807      	ldr	r0, [pc, #28]	@ (80011ac <InsertLineFeed+0x54>)
 8001190:	f001 fedc 	bl	8002f4c <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3e6      	bcc.n	8001170 <InsertLineFeed+0x18>
    }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000148 	.word	0x20000148

080011b0 <InsertLineSeparator>:

void InsertLineSeparator( void ) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    print_string("---------------------------------------", LF);
 80011b4:	2101      	movs	r1, #1
 80011b6:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <InsertLineSeparator+0x10>)
 80011b8:	f7ff ff0a 	bl	8000fd0 <print_string>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	080045cc 	.word	0x080045cc

080011c4 <ResetRxBuffer>:

void ResetRxBuffer(uart_type * ut) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

    ut->consumer_index = ut->producer_index = 0;                              //Reset the pointers
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    ut->byte_counter = 0;                                            //Reset the data counter
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    memset(ut->rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2221      	movs	r2, #33	@ 0x21
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f8cc 	bl	800338c <memset>
} /* End of ResetRxBuffer */
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HandleByte>:

void HandleByte(uart_type * ut) {     
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

    
    
    switch(ut->msg_state) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800120a:	2b01      	cmp	r3, #1
 800120c:	d12e      	bne.n	800126c <HandleByte+0x70>
        case(STATESTART):                                   //Have yet to receive a valid SOF
            ut->len_verify = 0;                            //Good place to reset the length verify counter
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if(ut->rxbuf[ut->consumer_index] == RXSOF) {
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	2bfc      	cmp	r3, #252	@ 0xfc
 8001224:	d107      	bne.n	8001236 <HandleByte+0x3a>
                ut->msg_state = SOFRXED;                   //Advance state if we receive SOF
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2202      	movs	r2, #2
 800122a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                IncrementConsumer(ut);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f820 	bl	8001274 <IncrementConsumer>
                ut->inmenu = false;                     //Clear this now that the sensors have been calibrated
            }
            else {
                IncrementConsumer(ut);                        //Not a valid byte, keep looking
            }
        break;
 8001234:	e019      	b.n	800126a <HandleByte+0x6e>
            else if(ut->rxbuf[ut -> consumer_index] == 'z') {     //User wishes to run calibration routine
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	5c9b      	ldrb	r3, [r3, r2]
 8001242:	2b7a      	cmp	r3, #122	@ 0x7a
 8001244:	d10e      	bne.n	8001264 <HandleByte+0x68>
                ut->inmenu = true;                      //Set this flag so that we don't mess up the rxbuffer
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                ResetRxBuffer(ut);                            //Reset this because messaging handling didn't occur while calibrating
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffb8 	bl	80011c4 <ResetRxBuffer>
                MainMenu(ut);                         //Run the calibration routine
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f8b7 	bl	80013c8 <MainMenu>
                ut->inmenu = false;                     //Clear this now that the sensors have been calibrated
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        break;
 8001262:	e002      	b.n	800126a <HandleByte+0x6e>
                IncrementConsumer(ut);                        //Not a valid byte, keep looking
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f805 	bl	8001274 <IncrementConsumer>
        break;
 800126a:	bf00      	nop

        //     ut->len_verify++;                           //Used to validate the length byte received
        //     IncrementConsumer();                        //Move pointer
        // break;
    }
} /* End of HandleByte */
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <IncrementConsumer>:

void IncrementConsumer(uart_type * ut) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    ut->consumer_index >= MAX_RX_BUF_INDEX ? (ut->consumer_index = 0):(ut->consumer_index++);                        // Either roll over or increment the "consumer" pointer
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001282:	2b1f      	cmp	r3, #31
 8001284:	d904      	bls.n	8001290 <IncrementConsumer+0x1c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800128e:	e007      	b.n	80012a0 <IncrementConsumer+0x2c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001296:	3301      	adds	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    (ut->byte_counter <= 1) ? (ut->byte_counter = 0):(ut->byte_counter--);                                           //Decrement data counter
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d804      	bhi.n	80012b4 <IncrementConsumer+0x40>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
} /* End of IncrementConsumer */
 80012b2:	e007      	b.n	80012c4 <IncrementConsumer+0x50>
    (ut->byte_counter <= 1) ? (ut->byte_counter = 0):(ut->byte_counter--);                                           //Decrement data counter
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
} /* End of IncrementConsumer */
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <getNumber_u8>:




uint8_t getNumber_u8 (uart_type * ut ) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    int number      = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
    uint8_t timeout     = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

    ResetRxBuffer(ut);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff6f 	bl	80011c4 <ResetRxBuffer>
    
    ut->rxchar = '\0';
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while(ut->rxchar == '\0'){}                   // Wait for keyboard input 
 80012ee:	bf00      	nop
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0fa      	beq.n	80012f0 <getNumber_u8+0x20>
    
    while (timeout < 20) {
 80012fa:	e00a      	b.n	8001312 <getNumber_u8+0x42>
        if(ut->rxchar == ENTER_KEY) break;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001302:	2b0d      	cmp	r3, #13
 8001304:	d009      	beq.n	800131a <getNumber_u8+0x4a>

        HAL_Delay(100);          // Delay in ms 
 8001306:	2064      	movs	r0, #100	@ 0x64
 8001308:	f000 f996 	bl	8001638 <HAL_Delay>
        timeout++;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
    while (timeout < 20) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b13      	cmp	r3, #19
 8001316:	d9f1      	bls.n	80012fc <getNumber_u8+0x2c>
 8001318:	e000      	b.n	800131c <getNumber_u8+0x4c>
        if(ut->rxchar == ENTER_KEY) break;
 800131a:	bf00      	nop
    }

    sscanf(ut->rxbuf,"%d",&number);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f107 0208 	add.w	r2, r7, #8
 8001322:	490b      	ldr	r1, [pc, #44]	@ (8001350 <getNumber_u8+0x80>)
 8001324:	4618      	mov	r0, r3
 8001326:	f002 f805 	bl	8003334 <siscanf>

    print_string("Number Received: ",0);
 800132a:	2100      	movs	r1, #0
 800132c:	4809      	ldr	r0, [pc, #36]	@ (8001354 <getNumber_u8+0x84>)
 800132e:	f7ff fe4f 	bl	8000fd0 <print_string>
    print_unsigned_decimal((uint8_t)number, LF);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2101      	movs	r1, #1
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe8b 	bl	8001054 <print_unsigned_decimal>

    ResetRxBuffer(ut);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff40 	bl	80011c4 <ResetRxBuffer>
    return(number);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	080045f4 	.word	0x080045f4
 8001354:	080045f8 	.word	0x080045f8

08001358 <getNumber_float>:

float getNumber_float(uart_type * ut) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    float number        = 0;
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
    uint8_t timeout     = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
    
    ResetRxBuffer(ut);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff2a 	bl	80011c4 <ResetRxBuffer>
    
    ut->rxchar = '\0';
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while(ut->rxchar == '\0'){}                   // Wait for keyboard input 
 8001378:	bf00      	nop
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0fa      	beq.n	800137a <getNumber_float+0x22>
    
    while (timeout < 80) {
 8001384:	e00a      	b.n	800139c <getNumber_float+0x44>
        
        if(ut->rxchar == ENTER_KEY) break;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800138c:	2b0d      	cmp	r3, #13
 800138e:	d009      	beq.n	80013a4 <getNumber_float+0x4c>

        HAL_Delay(100);          // Delay in ms
 8001390:	2064      	movs	r0, #100	@ 0x64
 8001392:	f000 f951 	bl	8001638 <HAL_Delay>
        timeout++;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3301      	adds	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
    while (timeout < 80) {
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b4f      	cmp	r3, #79	@ 0x4f
 80013a0:	d9f1      	bls.n	8001386 <getNumber_float+0x2e>
 80013a2:	e000      	b.n	80013a6 <getNumber_float+0x4e>
        if(ut->rxchar == ENTER_KEY) break;
 80013a4:	bf00      	nop
    }

    sscanf(ut->rxbuf,"%f.3",&number);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f107 0208 	add.w	r2, r7, #8
 80013ac:	4905      	ldr	r1, [pc, #20]	@ (80013c4 <getNumber_float+0x6c>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 ffc0 	bl	8003334 <siscanf>
    
    ResetRxBuffer(ut);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff05 	bl	80011c4 <ResetRxBuffer>

    return(number);
 80013ba:	68bb      	ldr	r3, [r7, #8]

}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0800460c 	.word	0x0800460c

080013c8 <MainMenu>:




void MainMenu(uart_type * ut) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
     * in main.c just prior to entering this routine. 
     * 
     * 
     */

	uint8_t     usr_number_u8           = 0;        // Number user has entered will be stored here
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
    float       temp_float              = 0.0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
    
    ut->rxchar = '\0';                  
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    ResetTerminal();                            // Clear all the contents on the terminal
 80013e2:	f7ff fea1 	bl	8001128 <ResetTerminal>

    
    HAL_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 f926 	bl	8001638 <HAL_Delay>
    CursorTopLeft();
 80013ec:	f7ff fe84 	bl	80010f8 <CursorTopLeft>
    HAL_Delay(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f000 f921 	bl	8001638 <HAL_Delay>

    while(usr_number_u8 != 99) {
 80013f6:	e075      	b.n	80014e4 <MainMenu+0x11c>
        InsertLineFeed(1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fead 	bl	8001158 <InsertLineFeed>
        InsertLineSeparator();
 80013fe:	f7ff fed7 	bl	80011b0 <InsertLineSeparator>
        print_string("1 --- Not implemented1...",LF);
 8001402:	2101      	movs	r1, #1
 8001404:	483d      	ldr	r0, [pc, #244]	@ (80014fc <MainMenu+0x134>)
 8001406:	f7ff fde3 	bl	8000fd0 <print_string>
        print_string("2 --- Not implemented2...",LF);
 800140a:	2101      	movs	r1, #1
 800140c:	483c      	ldr	r0, [pc, #240]	@ (8001500 <MainMenu+0x138>)
 800140e:	f7ff fddf 	bl	8000fd0 <print_string>
        print_string("3 --- Print SW version.",LF);
 8001412:	2101      	movs	r1, #1
 8001414:	483b      	ldr	r0, [pc, #236]	@ (8001504 <MainMenu+0x13c>)
 8001416:	f7ff fddb 	bl	8000fd0 <print_string>
        
        InsertLineFeed(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fe9c 	bl	8001158 <InsertLineFeed>
        
        print_string("8 --- Get SW version information.",LF);
 8001420:	2101      	movs	r1, #1
 8001422:	4839      	ldr	r0, [pc, #228]	@ (8001508 <MainMenu+0x140>)
 8001424:	f7ff fdd4 	bl	8000fd0 <print_string>
        
        print_string("99 -- Exit menu.",LF);  
 8001428:	2101      	movs	r1, #1
 800142a:	4838      	ldr	r0, [pc, #224]	@ (800150c <MainMenu+0x144>)
 800142c:	f7ff fdd0 	bl	8000fd0 <print_string>
        
        InsertLineFeed(2);
 8001430:	2002      	movs	r0, #2
 8001432:	f7ff fe91 	bl	8001158 <InsertLineFeed>
        
        print_string("Enter Selection:  ",0);
 8001436:	2100      	movs	r1, #0
 8001438:	4835      	ldr	r0, [pc, #212]	@ (8001510 <MainMenu+0x148>)
 800143a:	f7ff fdc9 	bl	8000fd0 <print_string>
        usr_number_u8 = getNumber_u8(ut);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff46 	bl	80012d0 <getNumber_u8>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]

       
        switch(usr_number_u8) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b63      	cmp	r3, #99	@ 0x63
 800144c:	d03b      	beq.n	80014c6 <MainMenu+0xfe>
 800144e:	2b63      	cmp	r3, #99	@ 0x63
 8001450:	dc46      	bgt.n	80014e0 <MainMenu+0x118>
 8001452:	2b03      	cmp	r3, #3
 8001454:	d029      	beq.n	80014aa <MainMenu+0xe2>
 8001456:	2b03      	cmp	r3, #3
 8001458:	dc42      	bgt.n	80014e0 <MainMenu+0x118>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d002      	beq.n	8001464 <MainMenu+0x9c>
 800145e:	2b02      	cmp	r3, #2
 8001460:	d019      	beq.n	8001496 <MainMenu+0xce>
 8001462:	e03d      	b.n	80014e0 <MainMenu+0x118>
            /* Note implemented 1 */
            case 1:
                InsertLineFeed(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff fe77 	bl	8001158 <InsertLineFeed>
                InsertLineSeparator();
 800146a:	f7ff fea1 	bl	80011b0 <InsertLineSeparator>
                print_string("Need to implement something here...",0);
 800146e:	2100      	movs	r1, #0
 8001470:	4828      	ldr	r0, [pc, #160]	@ (8001514 <MainMenu+0x14c>)
 8001472:	f7ff fdad 	bl	8000fd0 <print_string>
                temp_float = getNumber_float(ut);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff6e 	bl	8001358 <getNumber_float>
 800147c:	60b8      	str	r0, [r7, #8]
                InsertLineFeed(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fe6a 	bl	8001158 <InsertLineFeed>
                print_string("Now I'm leaving...",0);
 8001484:	2100      	movs	r1, #0
 8001486:	4824      	ldr	r0, [pc, #144]	@ (8001518 <MainMenu+0x150>)
 8001488:	f7ff fda2 	bl	8000fd0 <print_string>
                print_float(temp_float,LF);
 800148c:	2101      	movs	r1, #1
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff fd56 	bl	8000f40 <print_float>

            	// dac_data_value = get_dac_data_value (temp_float);
                // HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
            break;
 8001494:	e026      	b.n	80014e4 <MainMenu+0x11c>
            
            /* Note implemented 2 */
            case 2:
                InsertLineFeed(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fe5e 	bl	8001158 <InsertLineFeed>
                InsertLineSeparator();
 800149c:	f7ff fe88 	bl	80011b0 <InsertLineSeparator>
                print_string("Need to implement something here...",0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	481c      	ldr	r0, [pc, #112]	@ (8001514 <MainMenu+0x14c>)
 80014a4:	f7ff fd94 	bl	8000fd0 <print_string>

            	// dac_data_value = get_dac_data_value (temp_float);
                
                // HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)dac_data_value);
            	
            break;
 80014a8:	e01c      	b.n	80014e4 <MainMenu+0x11c>

            /* Print SW version */
            case 3:
                InsertLineFeed(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff fe54 	bl	8001158 <InsertLineFeed>
                InsertLineSeparator();
 80014b0:	f7ff fe7e 	bl	80011b0 <InsertLineSeparator>
                
                print_string("SW Version:",0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4819      	ldr	r0, [pc, #100]	@ (800151c <MainMenu+0x154>)
 80014b8:	f7ff fd8a 	bl	8000fd0 <print_string>
                print_string(SW_VER_STR,LF);
 80014bc:	2101      	movs	r1, #1
 80014be:	4818      	ldr	r0, [pc, #96]	@ (8001520 <MainMenu+0x158>)
 80014c0:	f7ff fd86 	bl	8000fd0 <print_string>

            break;
 80014c4:	e00e      	b.n	80014e4 <MainMenu+0x11c>

            /* Leave menu */
            case 99:
                ResetTerminal();              //Leaving menu, so clear the screen so not to confuse user
 80014c6:	f7ff fe2f 	bl	8001128 <ResetTerminal>
                HAL_Delay(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 f8b4 	bl	8001638 <HAL_Delay>
                CursorTopLeft();        //Make sure the cursor is in the Top Left position
 80014d0:	f7ff fe12 	bl	80010f8 <CursorTopLeft>
                HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f000 f8af 	bl	8001638 <HAL_Delay>
                usr_number_u8 = 99;
 80014da:	2363      	movs	r3, #99	@ 0x63
 80014dc:	73fb      	strb	r3, [r7, #15]
            break;
 80014de:	e001      	b.n	80014e4 <MainMenu+0x11c>

            default:
                usr_number_u8 = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
    while(usr_number_u8 != 99) {
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b63      	cmp	r3, #99	@ 0x63
 80014e8:	d186      	bne.n	80013f8 <MainMenu+0x30>
        }   //END Switch(usr_number_u8)
    }  //END while(usr_number_u8 != 99)

    print_string("Leaving console.",LF);
 80014ea:	2101      	movs	r1, #1
 80014ec:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MainMenu+0x15c>)
 80014ee:	f7ff fd6f 	bl	8000fd0 <print_string>

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08004614 	.word	0x08004614
 8001500:	08004630 	.word	0x08004630
 8001504:	0800464c 	.word	0x0800464c
 8001508:	08004664 	.word	0x08004664
 800150c:	08004688 	.word	0x08004688
 8001510:	0800469c 	.word	0x0800469c
 8001514:	080046b0 	.word	0x080046b0
 8001518:	080046d4 	.word	0x080046d4
 800151c:	080046e8 	.word	0x080046e8
 8001520:	080046f4 	.word	0x080046f4
 8001524:	080046fc 	.word	0x080046fc

08001528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff fd04 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800152e:	490c      	ldr	r1, [pc, #48]	@ (8001560 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001530:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001544:	4c09      	ldr	r4, [pc, #36]	@ (800156c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001552:	f001 ff29 	bl	80033a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001556:	f7ff f99f 	bl	8000898 <main>
  bx lr
 800155a:	4770      	bx	lr
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001564:	080048b4 	.word	0x080048b4
  ldr r2, =_sbss
 8001568:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800156c:	200002e0 	.word	0x200002e0

08001570 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC1_2_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_Init+0x28>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	@ (800159c <HAL_Init+0x28>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f947 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f808 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fbac 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f95f 	bl	8001882 <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 f927 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	@ (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000008 	.word	0x20000008
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <HAL_IncTick+0x1c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_IncTick+0x20>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a03      	ldr	r2, [pc, #12]	@ (8001620 <HAL_IncTick+0x20>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000008 	.word	0x20000008
 8001620:	20000194 	.word	0x20000194

08001624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b02      	ldr	r3, [pc, #8]	@ (8001634 <HAL_GetTick+0x10>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000194 	.word	0x20000194

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff fff0 	bl	8001624 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffe0 	bl	8001624 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4906      	ldr	r1, [pc, #24]	@ (8001718 <__NVIC_EnableIRQ+0x34>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff90 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff2d 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff42 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff90 	bl	8001770 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5f 	bl	800171c <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff35 	bl	80016e4 <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e169      	b.n	8001b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8158 	bne.w	8001b7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018d8:	4a98      	ldr	r2, [pc, #608]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d875      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018de:	4a98      	ldr	r2, [pc, #608]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d058      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018e4:	4a96      	ldr	r2, [pc, #600]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d86f      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018ea:	4a96      	ldr	r2, [pc, #600]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d052      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018f0:	4a94      	ldr	r2, [pc, #592]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d869      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018f6:	4a94      	ldr	r2, [pc, #592]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04c      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018fc:	4a92      	ldr	r2, [pc, #584]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d863      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001902:	4a92      	ldr	r2, [pc, #584]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d046      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 8001908:	4a90      	ldr	r2, [pc, #576]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d85d      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d82a      	bhi.n	8001968 <HAL_GPIO_Init+0xcc>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d859      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001916:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <HAL_GPIO_Init+0x80>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001997 	.word	0x08001997
 8001920:	08001971 	.word	0x08001971
 8001924:	08001983 	.word	0x08001983
 8001928:	080019c5 	.word	0x080019c5
 800192c:	080019cb 	.word	0x080019cb
 8001930:	080019cb 	.word	0x080019cb
 8001934:	080019cb 	.word	0x080019cb
 8001938:	080019cb 	.word	0x080019cb
 800193c:	080019cb 	.word	0x080019cb
 8001940:	080019cb 	.word	0x080019cb
 8001944:	080019cb 	.word	0x080019cb
 8001948:	080019cb 	.word	0x080019cb
 800194c:	080019cb 	.word	0x080019cb
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019cb 	.word	0x080019cb
 8001958:	080019cb 	.word	0x080019cb
 800195c:	080019cb 	.word	0x080019cb
 8001960:	08001979 	.word	0x08001979
 8001964:	0800198d 	.word	0x0800198d
 8001968:	4a79      	ldr	r2, [pc, #484]	@ (8001b50 <HAL_GPIO_Init+0x2b4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196e:	e02c      	b.n	80019ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e029      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e024      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	3308      	adds	r3, #8
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e01f      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	330c      	adds	r3, #12
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e01a      	b.n	80019cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e013      	b.n	80019cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	611a      	str	r2, [r3, #16]
          break;
 80019b6:	e009      	b.n	80019cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
          break;
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x130>
          break;
 80019ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	@ 0xff
 80019d0:	d801      	bhi.n	80019d6 <HAL_GPIO_Init+0x13a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_Init+0x13e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2bff      	cmp	r3, #255	@ 0xff
 80019e0:	d802      	bhi.n	80019e8 <HAL_GPIO_Init+0x14c>
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x152>
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	3b08      	subs	r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	210f      	movs	r1, #15
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80b1 	beq.w	8001b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b4a      	ldr	r3, [pc, #296]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a34:	4a48      	ldr	r2, [pc, #288]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a40      	ldr	r2, [pc, #256]	@ (8001b5c <HAL_GPIO_Init+0x2c0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1ec>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <HAL_GPIO_Init+0x2c4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_GPIO_Init+0x2cc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1e0>
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9a:	492f      	ldr	r1, [pc, #188]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	492c      	ldr	r1, [pc, #176]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4928      	ldr	r1, [pc, #160]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4922      	ldr	r1, [pc, #136]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	491e      	ldr	r1, [pc, #120]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4914      	ldr	r1, [pc, #80]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d021      	beq.n	8001b70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	490e      	ldr	r1, [pc, #56]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e021      	b.n	8001b7e <HAL_GPIO_Init+0x2e2>
 8001b3a:	bf00      	nop
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10310000 	.word	0x10310000
 8001b44:	10220000 	.word	0x10220000
 8001b48:	10210000 	.word	0x10210000
 8001b4c:	10120000 	.word	0x10120000
 8001b50:	10110000 	.word	0x10110000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40011400 	.word	0x40011400
 8001b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f ae8e 	bne.w	80018b0 <HAL_GPIO_Init+0x14>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	372c      	adds	r7, #44	@ 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43d9      	mvns	r1, r3
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e304      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2de      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fc9e 	bl	8001624 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fc9a 	bl	8001624 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e292      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fc8a 	bl	8001624 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fc86 	bl	8001624 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e27e      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e252      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fc3f 	bl	8001624 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fc3b 	bl	8001624 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e233      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fc1e 	bl	8001624 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fc1a 	bl	8001624 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e212      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fbfe 	bl	8001624 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fbfa 	bl	8001624 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1f2      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 fc04 	bl	8002658 <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fbe4 	bl	8001624 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fbe0 	bl	8001624 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1d8      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b9b      	ldr	r3, [pc, #620]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b94      	ldr	r3, [pc, #592]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b91      	ldr	r3, [pc, #580]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a90      	ldr	r2, [pc, #576]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b88      	ldr	r3, [pc, #544]	@ (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a87      	ldr	r2, [pc, #540]	@ (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fba1 	bl	8001624 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fb9d 	bl	8001624 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	@ 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e195      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80020f4 <HAL_RCC_OscConfig+0x4ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b78      	ldr	r3, [pc, #480]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a77      	ldr	r2, [pc, #476]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b73      	ldr	r3, [pc, #460]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a72      	ldr	r2, [pc, #456]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b70      	ldr	r3, [pc, #448]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a6f      	ldr	r2, [pc, #444]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a69      	ldr	r2, [pc, #420]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a66      	ldr	r2, [pc, #408]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b64      	ldr	r3, [pc, #400]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a63      	ldr	r2, [pc, #396]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb51 	bl	8001624 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fb4d 	bl	8001624 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e143      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b54      	ldr	r3, [pc, #336]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fb3b 	bl	8001624 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff fb37 	bl	8001624 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e12d      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a44      	ldr	r2, [pc, #272]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 808c 	beq.w	8002108 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffc:	d10e      	bne.n	800201c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002006:	2b08      	cmp	r3, #8
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800200a:	4b39      	ldr	r3, [pc, #228]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 800200c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e103      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	2b02      	cmp	r3, #2
 8002022:	d14e      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002024:	4b32      	ldr	r3, [pc, #200]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002030:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0ef      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002044:	4b2c      	ldr	r3, [pc, #176]	@ (80020f8 <HAL_RCC_OscConfig+0x4f0>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff faeb 	bl	8001624 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002052:	f7ff fae7 	bl	8001624 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	@ 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0df      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002064:	4b22      	ldr	r3, [pc, #136]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207c:	491c      	ldr	r1, [pc, #112]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4918      	ldr	r1, [pc, #96]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_RCC_OscConfig+0x4f0>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fac3 	bl	8001624 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80020a2:	f7ff fabf 	bl	8001624 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b64      	cmp	r3, #100	@ 0x64
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0b7      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x49a>
 80020c0:	e022      	b.n	8002108 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80020ce:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_RCC_OscConfig+0x4f0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff faa6 	bl	8001624 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80020da:	e00f      	b.n	80020fc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80020dc:	f7ff faa2 	bl	8001624 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d908      	bls.n	80020fc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e09a      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80020fc:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e9      	bne.n	80020dc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8088 	beq.w	8002222 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002112:	4b46      	ldr	r3, [pc, #280]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d068      	beq.n	80021f0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d14d      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b42      	ldr	r3, [pc, #264]	@ (8002230 <HAL_RCC_OscConfig+0x628>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fa7a 	bl	8001624 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff fa76 	bl	8001624 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e06e      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215a:	d10f      	bne.n	800217c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800215c:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 800215e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4931      	ldr	r1, [pc, #196]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 8002166:	4313      	orrs	r3, r2
 8002168:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800216a:	4b30      	ldr	r3, [pc, #192]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	f023 020f 	bic.w	r2, r3, #15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	492d      	ldr	r1, [pc, #180]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 8002178:	4313      	orrs	r3, r2
 800217a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	430b      	orrs	r3, r1
 800218e:	4927      	ldr	r1, [pc, #156]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_RCC_OscConfig+0x628>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff fa43 	bl	8001624 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7ff fa3f 	bl	8001624 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e037      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x59a>
 80021c0:	e02f      	b.n	8002222 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x628>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fa2c 	bl	8001624 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fa28 	bl	8001624 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e020      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c8>
 80021ee:	e018      	b.n	8002222 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e013      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_RCC_OscConfig+0x624>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	42420060 	.word	0x42420060

08002234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0d0      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b6a      	ldr	r3, [pc, #424]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b67      	ldr	r3, [pc, #412]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4965      	ldr	r1, [pc, #404]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a58      	ldr	r2, [pc, #352]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800229a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a52      	ldr	r2, [pc, #328]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d040      	beq.n	8002354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d115      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e073      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002312:	4b39      	ldr	r3, [pc, #228]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f023 0203 	bic.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4936      	ldr	r1, [pc, #216]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002324:	f7ff f97e 	bl	8001624 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7ff f97a 	bl	8001624 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e053      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 020c 	and.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d1eb      	bne.n	800232c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d210      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4922      	ldr	r1, [pc, #136]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490a      	ldr	r1, [pc, #40]	@ (80023fc <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	@ (8002400 <HAL_RCC_ClockConfig+0x1cc>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1d0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f8dc 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	0800471c 	.word	0x0800471c
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800240c:	b092      	sub	sp, #72	@ 0x48
 800240e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002414:	2300      	movs	r3, #0
 8002416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002418:	2300      	movs	r3, #0
 800241a:	647b      	str	r3, [r7, #68]	@ 0x44
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242c:	4b6b      	ldr	r3, [pc, #428]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d002      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x3a>
 800243c:	2b08      	cmp	r3, #8
 800243e:	d003      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x40>
 8002440:	e0c3      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002442:	4b67      	ldr	r3, [pc, #412]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002444:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002446:	e0c3      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244a:	0c9b      	lsrs	r3, r3, #18
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	4b64      	ldr	r3, [pc, #400]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ac 	beq.w	80025ba <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002462:	4b5e      	ldr	r3, [pc, #376]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	4b5f      	ldr	r3, [pc, #380]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x1e0>)
 800246c:	5c9b      	ldrb	r3, [r3, r2]
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002470:	4b5a      	ldr	r3, [pc, #360]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 808c 	beq.w	8002596 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800247e:	4b57      	ldr	r3, [pc, #348]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	3301      	adds	r3, #1
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3302      	adds	r3, #2
 8002498:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249c:	2200      	movs	r2, #0
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80024a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a4:	2200      	movs	r2, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	4611      	mov	r1, r2
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	fb00 f203 	mul.w	r2, r0, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	fb03 f301 	mul.w	r3, r3, r1
 80024b6:	4413      	add	r3, r2
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	fba2 4500 	umull	r4, r5, r2, r0
 80024be:	442b      	add	r3, r5
 80024c0:	461d      	mov	r5, r3
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	f04f 0000 	mov.w	r0, #0
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	0159      	lsls	r1, r3, #5
 80024d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d4:	0150      	lsls	r0, r2, #5
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	ebb2 0a04 	subs.w	sl, r2, r4
 80024de:	eb63 0b05 	sbc.w	fp, r3, r5
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f6:	ebb2 080a 	subs.w	r8, r2, sl
 80024fa:	eb63 090b 	sbc.w	r9, r3, fp
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002512:	4690      	mov	r8, r2
 8002514:	4699      	mov	r9, r3
 8002516:	eb18 0304 	adds.w	r3, r8, r4
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	eb49 0305 	adc.w	r3, r9, r5
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800252e:	4629      	mov	r1, r5
 8002530:	028b      	lsls	r3, r1, #10
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	4604      	mov	r4, r0
 8002538:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800253c:	4601      	mov	r1, r0
 800253e:	028a      	lsls	r2, r1, #10
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	2200      	movs	r2, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	617a      	str	r2, [r7, #20]
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	2200      	movs	r2, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002558:	4622      	mov	r2, r4
 800255a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800255e:	4645      	mov	r5, r8
 8002560:	fb05 f202 	mul.w	r2, r5, r2
 8002564:	46cc      	mov	ip, r9
 8002566:	4625      	mov	r5, r4
 8002568:	461c      	mov	r4, r3
 800256a:	4623      	mov	r3, r4
 800256c:	fb03 f30c 	mul.w	r3, r3, ip
 8002570:	4413      	add	r3, r2
 8002572:	4622      	mov	r2, r4
 8002574:	4644      	mov	r4, r8
 8002576:	fba2 2404 	umull	r2, r4, r2, r4
 800257a:	61fc      	str	r4, [r7, #28]
 800257c:	61ba      	str	r2, [r7, #24]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002588:	f7fe f810 	bl	80005ac <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	647b      	str	r3, [r7, #68]	@ 0x44
 8002594:	e007      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800259a:	fb03 f202 	mul.w	r2, r3, r2
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80025a8:	7b5b      	ldrb	r3, [r3, #13]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80025b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b8:	e004      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025bc:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x1e4>)
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 80025c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80025c8:	e002      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ca:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80025cc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80025ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3748      	adds	r7, #72	@ 0x48
 80025d6:	46bd      	mov	sp, r7
 80025d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	08004734 	.word	0x08004734
 80025e8:	08004744 	.word	0x08004744
 80025ec:	003d0900 	.word	0x003d0900
 80025f0:	007a1200 	.word	0x007a1200

080025f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b02      	ldr	r3, [pc, #8]	@ (8002604 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff2 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	@ (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	0800472c 	.word	0x0800472c

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffde 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0adb      	lsrs	r3, r3, #11
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	@ (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	0800472c 	.word	0x0800472c

08002658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002660:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <RCC_Delay+0x34>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <RCC_Delay+0x38>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a5b      	lsrs	r3, r3, #9
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002674:	bf00      	nop
  }
  while (Delay --);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <RCC_Delay+0x1c>
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20000000 	.word	0x20000000
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e041      	b.n	800272a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fb48 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f000 fa64 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d001      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e03f      	b.n	80027cc <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1b      	ldr	r2, [pc, #108]	@ (80027d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x62>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x62>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <HAL_TIM_Base_Start_IT+0xa8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x62>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <HAL_TIM_Base_Start_IT+0xac>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x62>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40000c00 	.word	0x40000c00

080027e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d020      	beq.n	800284c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0202 	mvn.w	r2, #2
 800281c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f998 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f98b 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f99a 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d020      	beq.n	8002898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0204 	mvn.w	r2, #4
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f972 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f965 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f974 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d020      	beq.n	80028e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0208 	mvn.w	r2, #8
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f94c 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f93f 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f94e 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d020      	beq.n	8002930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0210 	mvn.w	r2, #16
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2208      	movs	r2, #8
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f926 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f919 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f928 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0201 	mvn.w	r2, #1
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f974 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa91 	bl	8002e9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8f8 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0220 	mvn.w	r2, #32
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa64 	bl	8002e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_ConfigClockSource+0x1c>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0b4      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a1c:	d03e      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0xd4>
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a22:	f200 8087 	bhi.w	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2a:	f000 8086 	beq.w	8002b3a <HAL_TIM_ConfigClockSource+0x172>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a32:	d87f      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b70      	cmp	r3, #112	@ 0x70
 8002a36:	d01a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xa6>
 8002a38:	2b70      	cmp	r3, #112	@ 0x70
 8002a3a:	d87b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b60      	cmp	r3, #96	@ 0x60
 8002a3e:	d050      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8002a40:	2b60      	cmp	r3, #96	@ 0x60
 8002a42:	d877      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b50      	cmp	r3, #80	@ 0x50
 8002a46:	d03c      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a48:	2b50      	cmp	r3, #80	@ 0x50
 8002a4a:	d873      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b40      	cmp	r3, #64	@ 0x40
 8002a4e:	d058      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x13a>
 8002a50:	2b40      	cmp	r3, #64	@ 0x40
 8002a52:	d86f      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b30      	cmp	r3, #48	@ 0x30
 8002a56:	d064      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	2b30      	cmp	r3, #48	@ 0x30
 8002a5a:	d86b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d060      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d867      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d05c      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d05a      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6c:	e062      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a7e:	f000 f97e 	bl	8002d7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	609a      	str	r2, [r3, #8]
      break;
 8002a9a:	e04f      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	f000 f967 	bl	8002d7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002abe:	609a      	str	r2, [r3, #8]
      break;
 8002ac0:	e03c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f000 f8de 	bl	8002c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2150      	movs	r1, #80	@ 0x50
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f935 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002ae0:	e02c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aee:	461a      	mov	r2, r3
 8002af0:	f000 f8fc 	bl	8002cec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2160      	movs	r1, #96	@ 0x60
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f925 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002b00:	e01c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f000 f8be 	bl	8002c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2140      	movs	r1, #64	@ 0x40
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f915 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002b20:	e00c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f000 f90c 	bl	8002d4a <TIM_ITRx_SetConfig>
      break;
 8002b32:	e003      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e000      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a33      	ldr	r2, [pc, #204]	@ (8002c80 <TIM_Base_SetConfig+0xe0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00f      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d00b      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a30      	ldr	r2, [pc, #192]	@ (8002c84 <TIM_Base_SetConfig+0xe4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a2f      	ldr	r2, [pc, #188]	@ (8002c88 <TIM_Base_SetConfig+0xe8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0x38>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c8c <TIM_Base_SetConfig+0xec>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a24      	ldr	r2, [pc, #144]	@ (8002c80 <TIM_Base_SetConfig+0xe0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00f      	beq.n	8002c12 <TIM_Base_SetConfig+0x72>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d00b      	beq.n	8002c12 <TIM_Base_SetConfig+0x72>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	@ (8002c84 <TIM_Base_SetConfig+0xe4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <TIM_Base_SetConfig+0x72>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a20      	ldr	r2, [pc, #128]	@ (8002c88 <TIM_Base_SetConfig+0xe8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_Base_SetConfig+0x72>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <TIM_Base_SetConfig+0xec>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <TIM_Base_SetConfig+0xe0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f023 0201 	bic.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]
  }
}
 8002c76:	bf00      	nop
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00

08002c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 030a 	bic.w	r3, r3, #10
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0210 	bic.w	r2, r3, #16
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	031b      	lsls	r3, r3, #12
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	621a      	str	r2, [r3, #32]
}
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f043 0307 	orr.w	r3, r3, #7
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	021a      	lsls	r2, r3, #8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	609a      	str	r2, [r3, #8]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e04b      	b.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e20:	d00e      	beq.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a15      	ldr	r2, [pc, #84]	@ (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d009      	beq.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10c      	bne.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00

08002e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e042      	b.n	8002f44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd ff76 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f971 	bl	80031d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d175      	bne.n	8003058 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_UART_Transmit+0x2c>
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e06e      	b.n	800305a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe fb4b 	bl	8001624 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x6c>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc0:	e02e      	b.n	8003020 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	@ 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f848 	bl	8003062 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e03a      	b.n	800305a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e007      	b.n	8003012 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1cb      	bne.n	8002fc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2140      	movs	r1, #64	@ 0x40
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f814 	bl	8003062 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e006      	b.n	800305a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	e03b      	b.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d037      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307c:	f7fe fad2 	bl	8001624 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	6a3a      	ldr	r2, [r7, #32]
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <UART_WaitOnFlagUntilTimeout+0x30>
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e03a      	b.n	800310c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b80      	cmp	r3, #128	@ 0x80
 80030a8:	d020      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b40      	cmp	r3, #64	@ 0x40
 80030ae:	d01d      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d116      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f81d 	bl	8003114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2208      	movs	r2, #8
 80030de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e00f      	b.n	800310c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	429a      	cmp	r2, r3
 8003108:	d0b4      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003114:	b480      	push	{r7}
 8003116:	b095      	sub	sp, #84	@ 0x54
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800313c:	643a      	str	r2, [r7, #64]	@ 0x40
 800313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e5      	bne.n	800311c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3314      	adds	r3, #20
 8003156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e5      	bne.n	8003150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	2b01      	cmp	r3, #1
 800318a:	d119      	bne.n	80031c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	330c      	adds	r3, #12
 8003192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	60bb      	str	r3, [r7, #8]
   return(result);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 0310 	bic.w	r3, r3, #16
 80031a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ac:	61ba      	str	r2, [r7, #24]
 80031ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e5      	bne.n	800318c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031ce:	bf00      	nop
 80031d0:	3754      	adds	r7, #84	@ 0x54
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003212:	f023 030c 	bic.w	r3, r3, #12
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	430b      	orrs	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <UART_SetConfig+0x114>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003240:	f7ff f9f6 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	e002      	b.n	800324e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7ff f9de 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 800324c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	4a22      	ldr	r2, [pc, #136]	@ (80032f0 <UART_SetConfig+0x118>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	0119      	lsls	r1, r3, #4
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <UART_SetConfig+0x118>)
 8003286:	fba3 0302 	umull	r0, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2064      	movs	r0, #100	@ 0x64
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	@ 0x32
 8003298:	4a15      	ldr	r2, [pc, #84]	@ (80032f0 <UART_SetConfig+0x118>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a4:	4419      	add	r1, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <UART_SetConfig+0x118>)
 80032be:	fba3 0302 	umull	r0, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2064      	movs	r0, #100	@ 0x64
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	@ 0x32
 80032d0:	4a07      	ldr	r2, [pc, #28]	@ (80032f0 <UART_SetConfig+0x118>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	440a      	add	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013800 	.word	0x40013800
 80032f0:	51eb851f 	.word	0x51eb851f

080032f4 <siprintf>:
 80032f4:	b40e      	push	{r1, r2, r3}
 80032f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80032fa:	b500      	push	{lr}
 80032fc:	b09c      	sub	sp, #112	@ 0x70
 80032fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8003300:	9002      	str	r0, [sp, #8]
 8003302:	9006      	str	r0, [sp, #24]
 8003304:	9107      	str	r1, [sp, #28]
 8003306:	9104      	str	r1, [sp, #16]
 8003308:	4808      	ldr	r0, [pc, #32]	@ (800332c <siprintf+0x38>)
 800330a:	4909      	ldr	r1, [pc, #36]	@ (8003330 <siprintf+0x3c>)
 800330c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003310:	9105      	str	r1, [sp, #20]
 8003312:	6800      	ldr	r0, [r0, #0]
 8003314:	a902      	add	r1, sp, #8
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	f000 f9be 	bl	8003698 <_svfiprintf_r>
 800331c:	2200      	movs	r2, #0
 800331e:	9b02      	ldr	r3, [sp, #8]
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	b01c      	add	sp, #112	@ 0x70
 8003324:	f85d eb04 	ldr.w	lr, [sp], #4
 8003328:	b003      	add	sp, #12
 800332a:	4770      	bx	lr
 800332c:	2000000c 	.word	0x2000000c
 8003330:	ffff0208 	.word	0xffff0208

08003334 <siscanf>:
 8003334:	b40e      	push	{r1, r2, r3}
 8003336:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800333a:	b530      	push	{r4, r5, lr}
 800333c:	b09c      	sub	sp, #112	@ 0x70
 800333e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003340:	f854 5b04 	ldr.w	r5, [r4], #4
 8003344:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003348:	9002      	str	r0, [sp, #8]
 800334a:	9006      	str	r0, [sp, #24]
 800334c:	f7fc ff6a 	bl	8000224 <strlen>
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <siscanf+0x4c>)
 8003352:	9003      	str	r0, [sp, #12]
 8003354:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003356:	2300      	movs	r3, #0
 8003358:	930f      	str	r3, [sp, #60]	@ 0x3c
 800335a:	9314      	str	r3, [sp, #80]	@ 0x50
 800335c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003360:	9007      	str	r0, [sp, #28]
 8003362:	4808      	ldr	r0, [pc, #32]	@ (8003384 <siscanf+0x50>)
 8003364:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003368:	462a      	mov	r2, r5
 800336a:	4623      	mov	r3, r4
 800336c:	a902      	add	r1, sp, #8
 800336e:	6800      	ldr	r0, [r0, #0]
 8003370:	9401      	str	r4, [sp, #4]
 8003372:	f000 fae5 	bl	8003940 <__ssvfiscanf_r>
 8003376:	b01c      	add	sp, #112	@ 0x70
 8003378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800337c:	b003      	add	sp, #12
 800337e:	4770      	bx	lr
 8003380:	08003389 	.word	0x08003389
 8003384:	2000000c 	.word	0x2000000c

08003388 <__seofread>:
 8003388:	2000      	movs	r0, #0
 800338a:	4770      	bx	lr

0800338c <memset>:
 800338c:	4603      	mov	r3, r0
 800338e:	4402      	add	r2, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	f803 1b01 	strb.w	r1, [r3], #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <__errno>:
 800339c:	4b01      	ldr	r3, [pc, #4]	@ (80033a4 <__errno+0x8>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	2000000c 	.word	0x2000000c

080033a8 <__libc_init_array>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	2600      	movs	r6, #0
 80033ac:	4d0c      	ldr	r5, [pc, #48]	@ (80033e0 <__libc_init_array+0x38>)
 80033ae:	4c0d      	ldr	r4, [pc, #52]	@ (80033e4 <__libc_init_array+0x3c>)
 80033b0:	1b64      	subs	r4, r4, r5
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	42a6      	cmp	r6, r4
 80033b6:	d109      	bne.n	80033cc <__libc_init_array+0x24>
 80033b8:	f001 f8ec 	bl	8004594 <_init>
 80033bc:	2600      	movs	r6, #0
 80033be:	4d0a      	ldr	r5, [pc, #40]	@ (80033e8 <__libc_init_array+0x40>)
 80033c0:	4c0a      	ldr	r4, [pc, #40]	@ (80033ec <__libc_init_array+0x44>)
 80033c2:	1b64      	subs	r4, r4, r5
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	42a6      	cmp	r6, r4
 80033c8:	d105      	bne.n	80033d6 <__libc_init_array+0x2e>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d0:	4798      	blx	r3
 80033d2:	3601      	adds	r6, #1
 80033d4:	e7ee      	b.n	80033b4 <__libc_init_array+0xc>
 80033d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033da:	4798      	blx	r3
 80033dc:	3601      	adds	r6, #1
 80033de:	e7f2      	b.n	80033c6 <__libc_init_array+0x1e>
 80033e0:	080048ac 	.word	0x080048ac
 80033e4:	080048ac 	.word	0x080048ac
 80033e8:	080048ac 	.word	0x080048ac
 80033ec:	080048b0 	.word	0x080048b0

080033f0 <__retarget_lock_acquire_recursive>:
 80033f0:	4770      	bx	lr

080033f2 <__retarget_lock_release_recursive>:
 80033f2:	4770      	bx	lr

080033f4 <_free_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4605      	mov	r5, r0
 80033f8:	2900      	cmp	r1, #0
 80033fa:	d040      	beq.n	800347e <_free_r+0x8a>
 80033fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003400:	1f0c      	subs	r4, r1, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	bfb8      	it	lt
 8003406:	18e4      	addlt	r4, r4, r3
 8003408:	f000 f8de 	bl	80035c8 <__malloc_lock>
 800340c:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <_free_r+0x8c>)
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	b933      	cbnz	r3, 8003420 <_free_r+0x2c>
 8003412:	6063      	str	r3, [r4, #4]
 8003414:	6014      	str	r4, [r2, #0]
 8003416:	4628      	mov	r0, r5
 8003418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800341c:	f000 b8da 	b.w	80035d4 <__malloc_unlock>
 8003420:	42a3      	cmp	r3, r4
 8003422:	d908      	bls.n	8003436 <_free_r+0x42>
 8003424:	6820      	ldr	r0, [r4, #0]
 8003426:	1821      	adds	r1, r4, r0
 8003428:	428b      	cmp	r3, r1
 800342a:	bf01      	itttt	eq
 800342c:	6819      	ldreq	r1, [r3, #0]
 800342e:	685b      	ldreq	r3, [r3, #4]
 8003430:	1809      	addeq	r1, r1, r0
 8003432:	6021      	streq	r1, [r4, #0]
 8003434:	e7ed      	b.n	8003412 <_free_r+0x1e>
 8003436:	461a      	mov	r2, r3
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	b10b      	cbz	r3, 8003440 <_free_r+0x4c>
 800343c:	42a3      	cmp	r3, r4
 800343e:	d9fa      	bls.n	8003436 <_free_r+0x42>
 8003440:	6811      	ldr	r1, [r2, #0]
 8003442:	1850      	adds	r0, r2, r1
 8003444:	42a0      	cmp	r0, r4
 8003446:	d10b      	bne.n	8003460 <_free_r+0x6c>
 8003448:	6820      	ldr	r0, [r4, #0]
 800344a:	4401      	add	r1, r0
 800344c:	1850      	adds	r0, r2, r1
 800344e:	4283      	cmp	r3, r0
 8003450:	6011      	str	r1, [r2, #0]
 8003452:	d1e0      	bne.n	8003416 <_free_r+0x22>
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4408      	add	r0, r1
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	6053      	str	r3, [r2, #4]
 800345e:	e7da      	b.n	8003416 <_free_r+0x22>
 8003460:	d902      	bls.n	8003468 <_free_r+0x74>
 8003462:	230c      	movs	r3, #12
 8003464:	602b      	str	r3, [r5, #0]
 8003466:	e7d6      	b.n	8003416 <_free_r+0x22>
 8003468:	6820      	ldr	r0, [r4, #0]
 800346a:	1821      	adds	r1, r4, r0
 800346c:	428b      	cmp	r3, r1
 800346e:	bf01      	itttt	eq
 8003470:	6819      	ldreq	r1, [r3, #0]
 8003472:	685b      	ldreq	r3, [r3, #4]
 8003474:	1809      	addeq	r1, r1, r0
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	6063      	str	r3, [r4, #4]
 800347a:	6054      	str	r4, [r2, #4]
 800347c:	e7cb      	b.n	8003416 <_free_r+0x22>
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	200002dc 	.word	0x200002dc

08003484 <sbrk_aligned>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4e0f      	ldr	r6, [pc, #60]	@ (80034c4 <sbrk_aligned+0x40>)
 8003488:	460c      	mov	r4, r1
 800348a:	6831      	ldr	r1, [r6, #0]
 800348c:	4605      	mov	r5, r0
 800348e:	b911      	cbnz	r1, 8003496 <sbrk_aligned+0x12>
 8003490:	f000 ff32 	bl	80042f8 <_sbrk_r>
 8003494:	6030      	str	r0, [r6, #0]
 8003496:	4621      	mov	r1, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 ff2d 	bl	80042f8 <_sbrk_r>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	d103      	bne.n	80034aa <sbrk_aligned+0x26>
 80034a2:	f04f 34ff 	mov.w	r4, #4294967295
 80034a6:	4620      	mov	r0, r4
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d0f8      	beq.n	80034a6 <sbrk_aligned+0x22>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 ff1e 	bl	80042f8 <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d1f2      	bne.n	80034a6 <sbrk_aligned+0x22>
 80034c0:	e7ef      	b.n	80034a2 <sbrk_aligned+0x1e>
 80034c2:	bf00      	nop
 80034c4:	200002d8 	.word	0x200002d8

080034c8 <_malloc_r>:
 80034c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	1ccd      	adds	r5, r1, #3
 80034ce:	f025 0503 	bic.w	r5, r5, #3
 80034d2:	3508      	adds	r5, #8
 80034d4:	2d0c      	cmp	r5, #12
 80034d6:	bf38      	it	cc
 80034d8:	250c      	movcc	r5, #12
 80034da:	2d00      	cmp	r5, #0
 80034dc:	4606      	mov	r6, r0
 80034de:	db01      	blt.n	80034e4 <_malloc_r+0x1c>
 80034e0:	42a9      	cmp	r1, r5
 80034e2:	d904      	bls.n	80034ee <_malloc_r+0x26>
 80034e4:	230c      	movs	r3, #12
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	2000      	movs	r0, #0
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c4 <_malloc_r+0xfc>
 80034f2:	f000 f869 	bl	80035c8 <__malloc_lock>
 80034f6:	f8d8 3000 	ldr.w	r3, [r8]
 80034fa:	461c      	mov	r4, r3
 80034fc:	bb44      	cbnz	r4, 8003550 <_malloc_r+0x88>
 80034fe:	4629      	mov	r1, r5
 8003500:	4630      	mov	r0, r6
 8003502:	f7ff ffbf 	bl	8003484 <sbrk_aligned>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	4604      	mov	r4, r0
 800350a:	d158      	bne.n	80035be <_malloc_r+0xf6>
 800350c:	f8d8 4000 	ldr.w	r4, [r8]
 8003510:	4627      	mov	r7, r4
 8003512:	2f00      	cmp	r7, #0
 8003514:	d143      	bne.n	800359e <_malloc_r+0xd6>
 8003516:	2c00      	cmp	r4, #0
 8003518:	d04b      	beq.n	80035b2 <_malloc_r+0xea>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	4639      	mov	r1, r7
 800351e:	4630      	mov	r0, r6
 8003520:	eb04 0903 	add.w	r9, r4, r3
 8003524:	f000 fee8 	bl	80042f8 <_sbrk_r>
 8003528:	4581      	cmp	r9, r0
 800352a:	d142      	bne.n	80035b2 <_malloc_r+0xea>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	4630      	mov	r0, r6
 8003530:	1a6d      	subs	r5, r5, r1
 8003532:	4629      	mov	r1, r5
 8003534:	f7ff ffa6 	bl	8003484 <sbrk_aligned>
 8003538:	3001      	adds	r0, #1
 800353a:	d03a      	beq.n	80035b2 <_malloc_r+0xea>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	442b      	add	r3, r5
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	f8d8 3000 	ldr.w	r3, [r8]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	bb62      	cbnz	r2, 80035a4 <_malloc_r+0xdc>
 800354a:	f8c8 7000 	str.w	r7, [r8]
 800354e:	e00f      	b.n	8003570 <_malloc_r+0xa8>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	1b52      	subs	r2, r2, r5
 8003554:	d420      	bmi.n	8003598 <_malloc_r+0xd0>
 8003556:	2a0b      	cmp	r2, #11
 8003558:	d917      	bls.n	800358a <_malloc_r+0xc2>
 800355a:	1961      	adds	r1, r4, r5
 800355c:	42a3      	cmp	r3, r4
 800355e:	6025      	str	r5, [r4, #0]
 8003560:	bf18      	it	ne
 8003562:	6059      	strne	r1, [r3, #4]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	bf08      	it	eq
 8003568:	f8c8 1000 	streq.w	r1, [r8]
 800356c:	5162      	str	r2, [r4, r5]
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	4630      	mov	r0, r6
 8003572:	f000 f82f 	bl	80035d4 <__malloc_unlock>
 8003576:	f104 000b 	add.w	r0, r4, #11
 800357a:	1d23      	adds	r3, r4, #4
 800357c:	f020 0007 	bic.w	r0, r0, #7
 8003580:	1ac2      	subs	r2, r0, r3
 8003582:	bf1c      	itt	ne
 8003584:	1a1b      	subne	r3, r3, r0
 8003586:	50a3      	strne	r3, [r4, r2]
 8003588:	e7af      	b.n	80034ea <_malloc_r+0x22>
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	42a3      	cmp	r3, r4
 800358e:	bf0c      	ite	eq
 8003590:	f8c8 2000 	streq.w	r2, [r8]
 8003594:	605a      	strne	r2, [r3, #4]
 8003596:	e7eb      	b.n	8003570 <_malloc_r+0xa8>
 8003598:	4623      	mov	r3, r4
 800359a:	6864      	ldr	r4, [r4, #4]
 800359c:	e7ae      	b.n	80034fc <_malloc_r+0x34>
 800359e:	463c      	mov	r4, r7
 80035a0:	687f      	ldr	r7, [r7, #4]
 80035a2:	e7b6      	b.n	8003512 <_malloc_r+0x4a>
 80035a4:	461a      	mov	r2, r3
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d1fb      	bne.n	80035a4 <_malloc_r+0xdc>
 80035ac:	2300      	movs	r3, #0
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e7de      	b.n	8003570 <_malloc_r+0xa8>
 80035b2:	230c      	movs	r3, #12
 80035b4:	4630      	mov	r0, r6
 80035b6:	6033      	str	r3, [r6, #0]
 80035b8:	f000 f80c 	bl	80035d4 <__malloc_unlock>
 80035bc:	e794      	b.n	80034e8 <_malloc_r+0x20>
 80035be:	6005      	str	r5, [r0, #0]
 80035c0:	e7d6      	b.n	8003570 <_malloc_r+0xa8>
 80035c2:	bf00      	nop
 80035c4:	200002dc 	.word	0x200002dc

080035c8 <__malloc_lock>:
 80035c8:	4801      	ldr	r0, [pc, #4]	@ (80035d0 <__malloc_lock+0x8>)
 80035ca:	f7ff bf11 	b.w	80033f0 <__retarget_lock_acquire_recursive>
 80035ce:	bf00      	nop
 80035d0:	200002d4 	.word	0x200002d4

080035d4 <__malloc_unlock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	@ (80035dc <__malloc_unlock+0x8>)
 80035d6:	f7ff bf0c 	b.w	80033f2 <__retarget_lock_release_recursive>
 80035da:	bf00      	nop
 80035dc:	200002d4 	.word	0x200002d4

080035e0 <__ssputs_r>:
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	461f      	mov	r7, r3
 80035e6:	688e      	ldr	r6, [r1, #8]
 80035e8:	4682      	mov	sl, r0
 80035ea:	42be      	cmp	r6, r7
 80035ec:	460c      	mov	r4, r1
 80035ee:	4690      	mov	r8, r2
 80035f0:	680b      	ldr	r3, [r1, #0]
 80035f2:	d82d      	bhi.n	8003650 <__ssputs_r+0x70>
 80035f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035fc:	d026      	beq.n	800364c <__ssputs_r+0x6c>
 80035fe:	6965      	ldr	r5, [r4, #20]
 8003600:	6909      	ldr	r1, [r1, #16]
 8003602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003606:	eba3 0901 	sub.w	r9, r3, r1
 800360a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800360e:	1c7b      	adds	r3, r7, #1
 8003610:	444b      	add	r3, r9
 8003612:	106d      	asrs	r5, r5, #1
 8003614:	429d      	cmp	r5, r3
 8003616:	bf38      	it	cc
 8003618:	461d      	movcc	r5, r3
 800361a:	0553      	lsls	r3, r2, #21
 800361c:	d527      	bpl.n	800366e <__ssputs_r+0x8e>
 800361e:	4629      	mov	r1, r5
 8003620:	f7ff ff52 	bl	80034c8 <_malloc_r>
 8003624:	4606      	mov	r6, r0
 8003626:	b360      	cbz	r0, 8003682 <__ssputs_r+0xa2>
 8003628:	464a      	mov	r2, r9
 800362a:	6921      	ldr	r1, [r4, #16]
 800362c:	f000 fe82 	bl	8004334 <memcpy>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	6126      	str	r6, [r4, #16]
 800363e:	444e      	add	r6, r9
 8003640:	6026      	str	r6, [r4, #0]
 8003642:	463e      	mov	r6, r7
 8003644:	6165      	str	r5, [r4, #20]
 8003646:	eba5 0509 	sub.w	r5, r5, r9
 800364a:	60a5      	str	r5, [r4, #8]
 800364c:	42be      	cmp	r6, r7
 800364e:	d900      	bls.n	8003652 <__ssputs_r+0x72>
 8003650:	463e      	mov	r6, r7
 8003652:	4632      	mov	r2, r6
 8003654:	4641      	mov	r1, r8
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	f000 fe33 	bl	80042c2 <memmove>
 800365c:	2000      	movs	r0, #0
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	1b9b      	subs	r3, r3, r6
 8003662:	60a3      	str	r3, [r4, #8]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	4433      	add	r3, r6
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366e:	462a      	mov	r2, r5
 8003670:	f000 fe6e 	bl	8004350 <_realloc_r>
 8003674:	4606      	mov	r6, r0
 8003676:	2800      	cmp	r0, #0
 8003678:	d1e0      	bne.n	800363c <__ssputs_r+0x5c>
 800367a:	4650      	mov	r0, sl
 800367c:	6921      	ldr	r1, [r4, #16]
 800367e:	f7ff feb9 	bl	80033f4 <_free_r>
 8003682:	230c      	movs	r3, #12
 8003684:	f8ca 3000 	str.w	r3, [sl]
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f04f 30ff 	mov.w	r0, #4294967295
 800368e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	e7e9      	b.n	800366a <__ssputs_r+0x8a>
	...

08003698 <_svfiprintf_r>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	4698      	mov	r8, r3
 800369e:	898b      	ldrh	r3, [r1, #12]
 80036a0:	4607      	mov	r7, r0
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	460d      	mov	r5, r1
 80036a6:	4614      	mov	r4, r2
 80036a8:	b09d      	sub	sp, #116	@ 0x74
 80036aa:	d510      	bpl.n	80036ce <_svfiprintf_r+0x36>
 80036ac:	690b      	ldr	r3, [r1, #16]
 80036ae:	b973      	cbnz	r3, 80036ce <_svfiprintf_r+0x36>
 80036b0:	2140      	movs	r1, #64	@ 0x40
 80036b2:	f7ff ff09 	bl	80034c8 <_malloc_r>
 80036b6:	6028      	str	r0, [r5, #0]
 80036b8:	6128      	str	r0, [r5, #16]
 80036ba:	b930      	cbnz	r0, 80036ca <_svfiprintf_r+0x32>
 80036bc:	230c      	movs	r3, #12
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b01d      	add	sp, #116	@ 0x74
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	2340      	movs	r3, #64	@ 0x40
 80036cc:	616b      	str	r3, [r5, #20]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80036d2:	2320      	movs	r3, #32
 80036d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d8:	2330      	movs	r3, #48	@ 0x30
 80036da:	f04f 0901 	mov.w	r9, #1
 80036de:	f8cd 800c 	str.w	r8, [sp, #12]
 80036e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800387c <_svfiprintf_r+0x1e4>
 80036e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036ea:	4623      	mov	r3, r4
 80036ec:	469a      	mov	sl, r3
 80036ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036f2:	b10a      	cbz	r2, 80036f8 <_svfiprintf_r+0x60>
 80036f4:	2a25      	cmp	r2, #37	@ 0x25
 80036f6:	d1f9      	bne.n	80036ec <_svfiprintf_r+0x54>
 80036f8:	ebba 0b04 	subs.w	fp, sl, r4
 80036fc:	d00b      	beq.n	8003716 <_svfiprintf_r+0x7e>
 80036fe:	465b      	mov	r3, fp
 8003700:	4622      	mov	r2, r4
 8003702:	4629      	mov	r1, r5
 8003704:	4638      	mov	r0, r7
 8003706:	f7ff ff6b 	bl	80035e0 <__ssputs_r>
 800370a:	3001      	adds	r0, #1
 800370c:	f000 80a7 	beq.w	800385e <_svfiprintf_r+0x1c6>
 8003710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003712:	445a      	add	r2, fp
 8003714:	9209      	str	r2, [sp, #36]	@ 0x24
 8003716:	f89a 3000 	ldrb.w	r3, [sl]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 809f 	beq.w	800385e <_svfiprintf_r+0x1c6>
 8003720:	2300      	movs	r3, #0
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800372a:	f10a 0a01 	add.w	sl, sl, #1
 800372e:	9304      	str	r3, [sp, #16]
 8003730:	9307      	str	r3, [sp, #28]
 8003732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003736:	931a      	str	r3, [sp, #104]	@ 0x68
 8003738:	4654      	mov	r4, sl
 800373a:	2205      	movs	r2, #5
 800373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003740:	484e      	ldr	r0, [pc, #312]	@ (800387c <_svfiprintf_r+0x1e4>)
 8003742:	f000 fde9 	bl	8004318 <memchr>
 8003746:	9a04      	ldr	r2, [sp, #16]
 8003748:	b9d8      	cbnz	r0, 8003782 <_svfiprintf_r+0xea>
 800374a:	06d0      	lsls	r0, r2, #27
 800374c:	bf44      	itt	mi
 800374e:	2320      	movmi	r3, #32
 8003750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003754:	0711      	lsls	r1, r2, #28
 8003756:	bf44      	itt	mi
 8003758:	232b      	movmi	r3, #43	@ 0x2b
 800375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800375e:	f89a 3000 	ldrb.w	r3, [sl]
 8003762:	2b2a      	cmp	r3, #42	@ 0x2a
 8003764:	d015      	beq.n	8003792 <_svfiprintf_r+0xfa>
 8003766:	4654      	mov	r4, sl
 8003768:	2000      	movs	r0, #0
 800376a:	f04f 0c0a 	mov.w	ip, #10
 800376e:	9a07      	ldr	r2, [sp, #28]
 8003770:	4621      	mov	r1, r4
 8003772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003776:	3b30      	subs	r3, #48	@ 0x30
 8003778:	2b09      	cmp	r3, #9
 800377a:	d94b      	bls.n	8003814 <_svfiprintf_r+0x17c>
 800377c:	b1b0      	cbz	r0, 80037ac <_svfiprintf_r+0x114>
 800377e:	9207      	str	r2, [sp, #28]
 8003780:	e014      	b.n	80037ac <_svfiprintf_r+0x114>
 8003782:	eba0 0308 	sub.w	r3, r0, r8
 8003786:	fa09 f303 	lsl.w	r3, r9, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	46a2      	mov	sl, r4
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	e7d2      	b.n	8003738 <_svfiprintf_r+0xa0>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	1d19      	adds	r1, r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	9103      	str	r1, [sp, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfbb      	ittet	lt
 800379e:	425b      	neglt	r3, r3
 80037a0:	f042 0202 	orrlt.w	r2, r2, #2
 80037a4:	9307      	strge	r3, [sp, #28]
 80037a6:	9307      	strlt	r3, [sp, #28]
 80037a8:	bfb8      	it	lt
 80037aa:	9204      	strlt	r2, [sp, #16]
 80037ac:	7823      	ldrb	r3, [r4, #0]
 80037ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80037b0:	d10a      	bne.n	80037c8 <_svfiprintf_r+0x130>
 80037b2:	7863      	ldrb	r3, [r4, #1]
 80037b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b6:	d132      	bne.n	800381e <_svfiprintf_r+0x186>
 80037b8:	9b03      	ldr	r3, [sp, #12]
 80037ba:	3402      	adds	r4, #2
 80037bc:	1d1a      	adds	r2, r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	9203      	str	r2, [sp, #12]
 80037c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037c6:	9305      	str	r3, [sp, #20]
 80037c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003880 <_svfiprintf_r+0x1e8>
 80037cc:	2203      	movs	r2, #3
 80037ce:	4650      	mov	r0, sl
 80037d0:	7821      	ldrb	r1, [r4, #0]
 80037d2:	f000 fda1 	bl	8004318 <memchr>
 80037d6:	b138      	cbz	r0, 80037e8 <_svfiprintf_r+0x150>
 80037d8:	2240      	movs	r2, #64	@ 0x40
 80037da:	9b04      	ldr	r3, [sp, #16]
 80037dc:	eba0 000a 	sub.w	r0, r0, sl
 80037e0:	4082      	lsls	r2, r0
 80037e2:	4313      	orrs	r3, r2
 80037e4:	3401      	adds	r4, #1
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ec:	2206      	movs	r2, #6
 80037ee:	4825      	ldr	r0, [pc, #148]	@ (8003884 <_svfiprintf_r+0x1ec>)
 80037f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037f4:	f000 fd90 	bl	8004318 <memchr>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d036      	beq.n	800386a <_svfiprintf_r+0x1d2>
 80037fc:	4b22      	ldr	r3, [pc, #136]	@ (8003888 <_svfiprintf_r+0x1f0>)
 80037fe:	bb1b      	cbnz	r3, 8003848 <_svfiprintf_r+0x1b0>
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	3307      	adds	r3, #7
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	3308      	adds	r3, #8
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800380e:	4433      	add	r3, r6
 8003810:	9309      	str	r3, [sp, #36]	@ 0x24
 8003812:	e76a      	b.n	80036ea <_svfiprintf_r+0x52>
 8003814:	460c      	mov	r4, r1
 8003816:	2001      	movs	r0, #1
 8003818:	fb0c 3202 	mla	r2, ip, r2, r3
 800381c:	e7a8      	b.n	8003770 <_svfiprintf_r+0xd8>
 800381e:	2300      	movs	r3, #0
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4619      	mov	r1, r3
 8003826:	3401      	adds	r4, #1
 8003828:	9305      	str	r3, [sp, #20]
 800382a:	4620      	mov	r0, r4
 800382c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003830:	3a30      	subs	r2, #48	@ 0x30
 8003832:	2a09      	cmp	r2, #9
 8003834:	d903      	bls.n	800383e <_svfiprintf_r+0x1a6>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c6      	beq.n	80037c8 <_svfiprintf_r+0x130>
 800383a:	9105      	str	r1, [sp, #20]
 800383c:	e7c4      	b.n	80037c8 <_svfiprintf_r+0x130>
 800383e:	4604      	mov	r4, r0
 8003840:	2301      	movs	r3, #1
 8003842:	fb0c 2101 	mla	r1, ip, r1, r2
 8003846:	e7f0      	b.n	800382a <_svfiprintf_r+0x192>
 8003848:	ab03      	add	r3, sp, #12
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462a      	mov	r2, r5
 800384e:	4638      	mov	r0, r7
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <_svfiprintf_r+0x1f4>)
 8003852:	a904      	add	r1, sp, #16
 8003854:	f3af 8000 	nop.w
 8003858:	1c42      	adds	r2, r0, #1
 800385a:	4606      	mov	r6, r0
 800385c:	d1d6      	bne.n	800380c <_svfiprintf_r+0x174>
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	065b      	lsls	r3, r3, #25
 8003862:	f53f af2d 	bmi.w	80036c0 <_svfiprintf_r+0x28>
 8003866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003868:	e72c      	b.n	80036c4 <_svfiprintf_r+0x2c>
 800386a:	ab03      	add	r3, sp, #12
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	462a      	mov	r2, r5
 8003870:	4638      	mov	r0, r7
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <_svfiprintf_r+0x1f4>)
 8003874:	a904      	add	r1, sp, #16
 8003876:	f000 fa47 	bl	8003d08 <_printf_i>
 800387a:	e7ed      	b.n	8003858 <_svfiprintf_r+0x1c0>
 800387c:	08004754 	.word	0x08004754
 8003880:	0800475a 	.word	0x0800475a
 8003884:	0800475e 	.word	0x0800475e
 8003888:	00000000 	.word	0x00000000
 800388c:	080035e1 	.word	0x080035e1

08003890 <_sungetc_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	1c4b      	adds	r3, r1, #1
 8003894:	4614      	mov	r4, r2
 8003896:	d103      	bne.n	80038a0 <_sungetc_r+0x10>
 8003898:	f04f 35ff 	mov.w	r5, #4294967295
 800389c:	4628      	mov	r0, r5
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	8993      	ldrh	r3, [r2, #12]
 80038a2:	b2cd      	uxtb	r5, r1
 80038a4:	f023 0320 	bic.w	r3, r3, #32
 80038a8:	8193      	strh	r3, [r2, #12]
 80038aa:	6853      	ldr	r3, [r2, #4]
 80038ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038ae:	b18a      	cbz	r2, 80038d4 <_sungetc_r+0x44>
 80038b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80038b2:	429a      	cmp	r2, r3
 80038b4:	dd08      	ble.n	80038c8 <_sungetc_r+0x38>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	6022      	str	r2, [r4, #0]
 80038bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	3301      	adds	r3, #1
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	e7e9      	b.n	800389c <_sungetc_r+0xc>
 80038c8:	4621      	mov	r1, r4
 80038ca:	f000 fcc2 	bl	8004252 <__submore>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d0f1      	beq.n	80038b6 <_sungetc_r+0x26>
 80038d2:	e7e1      	b.n	8003898 <_sungetc_r+0x8>
 80038d4:	6921      	ldr	r1, [r4, #16]
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	b141      	cbz	r1, 80038ec <_sungetc_r+0x5c>
 80038da:	4291      	cmp	r1, r2
 80038dc:	d206      	bcs.n	80038ec <_sungetc_r+0x5c>
 80038de:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80038e2:	42a9      	cmp	r1, r5
 80038e4:	d102      	bne.n	80038ec <_sungetc_r+0x5c>
 80038e6:	3a01      	subs	r2, #1
 80038e8:	6022      	str	r2, [r4, #0]
 80038ea:	e7ea      	b.n	80038c2 <_sungetc_r+0x32>
 80038ec:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80038f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80038f6:	2303      	movs	r3, #3
 80038f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80038fa:	4623      	mov	r3, r4
 80038fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	2301      	movs	r3, #1
 8003904:	e7de      	b.n	80038c4 <_sungetc_r+0x34>

08003906 <__ssrefill_r>:
 8003906:	b510      	push	{r4, lr}
 8003908:	460c      	mov	r4, r1
 800390a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800390c:	b169      	cbz	r1, 800392a <__ssrefill_r+0x24>
 800390e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003912:	4299      	cmp	r1, r3
 8003914:	d001      	beq.n	800391a <__ssrefill_r+0x14>
 8003916:	f7ff fd6d 	bl	80033f4 <_free_r>
 800391a:	2000      	movs	r0, #0
 800391c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800391e:	6360      	str	r0, [r4, #52]	@ 0x34
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	b113      	cbz	r3, 800392a <__ssrefill_r+0x24>
 8003924:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	bd10      	pop	{r4, pc}
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	2300      	movs	r3, #0
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	f043 0320 	orr.w	r3, r3, #32
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	e7f3      	b.n	8003928 <__ssrefill_r+0x22>

08003940 <__ssvfiscanf_r>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	460c      	mov	r4, r1
 8003946:	2100      	movs	r1, #0
 8003948:	4606      	mov	r6, r0
 800394a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800394e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003952:	49aa      	ldr	r1, [pc, #680]	@ (8003bfc <__ssvfiscanf_r+0x2bc>)
 8003954:	f10d 0804 	add.w	r8, sp, #4
 8003958:	91a0      	str	r1, [sp, #640]	@ 0x280
 800395a:	49a9      	ldr	r1, [pc, #676]	@ (8003c00 <__ssvfiscanf_r+0x2c0>)
 800395c:	4fa9      	ldr	r7, [pc, #676]	@ (8003c04 <__ssvfiscanf_r+0x2c4>)
 800395e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003962:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	7813      	ldrb	r3, [r2, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8159 	beq.w	8003c20 <__ssvfiscanf_r+0x2e0>
 800396e:	5cf9      	ldrb	r1, [r7, r3]
 8003970:	1c55      	adds	r5, r2, #1
 8003972:	f011 0108 	ands.w	r1, r1, #8
 8003976:	d019      	beq.n	80039ac <__ssvfiscanf_r+0x6c>
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	dd0f      	ble.n	800399e <__ssvfiscanf_r+0x5e>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	5cba      	ldrb	r2, [r7, r2]
 8003984:	0712      	lsls	r2, r2, #28
 8003986:	d401      	bmi.n	800398c <__ssvfiscanf_r+0x4c>
 8003988:	462a      	mov	r2, r5
 800398a:	e7ec      	b.n	8003966 <__ssvfiscanf_r+0x26>
 800398c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800398e:	3301      	adds	r3, #1
 8003990:	3201      	adds	r2, #1
 8003992:	9245      	str	r2, [sp, #276]	@ 0x114
 8003994:	6862      	ldr	r2, [r4, #4]
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	3a01      	subs	r2, #1
 800399a:	6062      	str	r2, [r4, #4]
 800399c:	e7ec      	b.n	8003978 <__ssvfiscanf_r+0x38>
 800399e:	4621      	mov	r1, r4
 80039a0:	4630      	mov	r0, r6
 80039a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80039a4:	4798      	blx	r3
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d0e9      	beq.n	800397e <__ssvfiscanf_r+0x3e>
 80039aa:	e7ed      	b.n	8003988 <__ssvfiscanf_r+0x48>
 80039ac:	2b25      	cmp	r3, #37	@ 0x25
 80039ae:	d012      	beq.n	80039d6 <__ssvfiscanf_r+0x96>
 80039b0:	4699      	mov	r9, r3
 80039b2:	6863      	ldr	r3, [r4, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f340 8094 	ble.w	8003ae2 <__ssvfiscanf_r+0x1a2>
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	7813      	ldrb	r3, [r2, #0]
 80039be:	454b      	cmp	r3, r9
 80039c0:	f040 812e 	bne.w	8003c20 <__ssvfiscanf_r+0x2e0>
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	3201      	adds	r2, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80039ce:	6022      	str	r2, [r4, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	9345      	str	r3, [sp, #276]	@ 0x114
 80039d4:	e7d8      	b.n	8003988 <__ssvfiscanf_r+0x48>
 80039d6:	9141      	str	r1, [sp, #260]	@ 0x104
 80039d8:	9143      	str	r1, [sp, #268]	@ 0x10c
 80039da:	7853      	ldrb	r3, [r2, #1]
 80039dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80039de:	bf04      	itt	eq
 80039e0:	2310      	moveq	r3, #16
 80039e2:	1c95      	addeq	r5, r2, #2
 80039e4:	f04f 020a 	mov.w	r2, #10
 80039e8:	bf08      	it	eq
 80039ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80039ec:	46a9      	mov	r9, r5
 80039ee:	f819 1b01 	ldrb.w	r1, [r9], #1
 80039f2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	d91e      	bls.n	8003a38 <__ssvfiscanf_r+0xf8>
 80039fa:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8003c08 <__ssvfiscanf_r+0x2c8>
 80039fe:	2203      	movs	r2, #3
 8003a00:	4650      	mov	r0, sl
 8003a02:	f000 fc89 	bl	8004318 <memchr>
 8003a06:	b138      	cbz	r0, 8003a18 <__ssvfiscanf_r+0xd8>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	464d      	mov	r5, r9
 8003a0c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003a0e:	eba0 000a 	sub.w	r0, r0, sl
 8003a12:	4083      	lsls	r3, r0
 8003a14:	4313      	orrs	r3, r2
 8003a16:	9341      	str	r3, [sp, #260]	@ 0x104
 8003a18:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a1c:	2b78      	cmp	r3, #120	@ 0x78
 8003a1e:	d806      	bhi.n	8003a2e <__ssvfiscanf_r+0xee>
 8003a20:	2b57      	cmp	r3, #87	@ 0x57
 8003a22:	d810      	bhi.n	8003a46 <__ssvfiscanf_r+0x106>
 8003a24:	2b25      	cmp	r3, #37	@ 0x25
 8003a26:	d0c3      	beq.n	80039b0 <__ssvfiscanf_r+0x70>
 8003a28:	d856      	bhi.n	8003ad8 <__ssvfiscanf_r+0x198>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d064      	beq.n	8003af8 <__ssvfiscanf_r+0x1b8>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003a32:	230a      	movs	r3, #10
 8003a34:	9342      	str	r3, [sp, #264]	@ 0x108
 8003a36:	e077      	b.n	8003b28 <__ssvfiscanf_r+0x1e8>
 8003a38:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003a3a:	464d      	mov	r5, r9
 8003a3c:	fb02 1103 	mla	r1, r2, r3, r1
 8003a40:	3930      	subs	r1, #48	@ 0x30
 8003a42:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003a44:	e7d2      	b.n	80039ec <__ssvfiscanf_r+0xac>
 8003a46:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003a4a:	2a20      	cmp	r2, #32
 8003a4c:	d8ef      	bhi.n	8003a2e <__ssvfiscanf_r+0xee>
 8003a4e:	a101      	add	r1, pc, #4	@ (adr r1, 8003a54 <__ssvfiscanf_r+0x114>)
 8003a50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a54:	08003b07 	.word	0x08003b07
 8003a58:	08003a2f 	.word	0x08003a2f
 8003a5c:	08003a2f 	.word	0x08003a2f
 8003a60:	08003b61 	.word	0x08003b61
 8003a64:	08003a2f 	.word	0x08003a2f
 8003a68:	08003a2f 	.word	0x08003a2f
 8003a6c:	08003a2f 	.word	0x08003a2f
 8003a70:	08003a2f 	.word	0x08003a2f
 8003a74:	08003a2f 	.word	0x08003a2f
 8003a78:	08003a2f 	.word	0x08003a2f
 8003a7c:	08003a2f 	.word	0x08003a2f
 8003a80:	08003b77 	.word	0x08003b77
 8003a84:	08003b5d 	.word	0x08003b5d
 8003a88:	08003adf 	.word	0x08003adf
 8003a8c:	08003adf 	.word	0x08003adf
 8003a90:	08003adf 	.word	0x08003adf
 8003a94:	08003a2f 	.word	0x08003a2f
 8003a98:	08003b19 	.word	0x08003b19
 8003a9c:	08003a2f 	.word	0x08003a2f
 8003aa0:	08003a2f 	.word	0x08003a2f
 8003aa4:	08003a2f 	.word	0x08003a2f
 8003aa8:	08003a2f 	.word	0x08003a2f
 8003aac:	08003b87 	.word	0x08003b87
 8003ab0:	08003b21 	.word	0x08003b21
 8003ab4:	08003aff 	.word	0x08003aff
 8003ab8:	08003a2f 	.word	0x08003a2f
 8003abc:	08003a2f 	.word	0x08003a2f
 8003ac0:	08003b83 	.word	0x08003b83
 8003ac4:	08003a2f 	.word	0x08003a2f
 8003ac8:	08003b5d 	.word	0x08003b5d
 8003acc:	08003a2f 	.word	0x08003a2f
 8003ad0:	08003a2f 	.word	0x08003a2f
 8003ad4:	08003b07 	.word	0x08003b07
 8003ad8:	3b45      	subs	r3, #69	@ 0x45
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d8a7      	bhi.n	8003a2e <__ssvfiscanf_r+0xee>
 8003ade:	2305      	movs	r3, #5
 8003ae0:	e021      	b.n	8003b26 <__ssvfiscanf_r+0x1e6>
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003ae8:	4798      	blx	r3
 8003aea:	2800      	cmp	r0, #0
 8003aec:	f43f af65 	beq.w	80039ba <__ssvfiscanf_r+0x7a>
 8003af0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003af2:	2800      	cmp	r0, #0
 8003af4:	f040 808c 	bne.w	8003c10 <__ssvfiscanf_r+0x2d0>
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e08c      	b.n	8003c18 <__ssvfiscanf_r+0x2d8>
 8003afe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003b00:	f042 0220 	orr.w	r2, r2, #32
 8003b04:	9241      	str	r2, [sp, #260]	@ 0x104
 8003b06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8003b0e:	2210      	movs	r2, #16
 8003b10:	2b6e      	cmp	r3, #110	@ 0x6e
 8003b12:	9242      	str	r2, [sp, #264]	@ 0x108
 8003b14:	d902      	bls.n	8003b1c <__ssvfiscanf_r+0x1dc>
 8003b16:	e005      	b.n	8003b24 <__ssvfiscanf_r+0x1e4>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e002      	b.n	8003b26 <__ssvfiscanf_r+0x1e6>
 8003b20:	2308      	movs	r3, #8
 8003b22:	9342      	str	r3, [sp, #264]	@ 0x108
 8003b24:	2304      	movs	r3, #4
 8003b26:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	dd39      	ble.n	8003ba2 <__ssvfiscanf_r+0x262>
 8003b2e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003b30:	0659      	lsls	r1, r3, #25
 8003b32:	d404      	bmi.n	8003b3e <__ssvfiscanf_r+0x1fe>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	5cba      	ldrb	r2, [r7, r2]
 8003b3a:	0712      	lsls	r2, r2, #28
 8003b3c:	d438      	bmi.n	8003bb0 <__ssvfiscanf_r+0x270>
 8003b3e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	dc47      	bgt.n	8003bd4 <__ssvfiscanf_r+0x294>
 8003b44:	466b      	mov	r3, sp
 8003b46:	4622      	mov	r2, r4
 8003b48:	4630      	mov	r0, r6
 8003b4a:	a941      	add	r1, sp, #260	@ 0x104
 8003b4c:	f000 f9fc 	bl	8003f48 <_scanf_chars>
 8003b50:	2801      	cmp	r0, #1
 8003b52:	d065      	beq.n	8003c20 <__ssvfiscanf_r+0x2e0>
 8003b54:	2802      	cmp	r0, #2
 8003b56:	f47f af17 	bne.w	8003988 <__ssvfiscanf_r+0x48>
 8003b5a:	e7c9      	b.n	8003af0 <__ssvfiscanf_r+0x1b0>
 8003b5c:	220a      	movs	r2, #10
 8003b5e:	e7d7      	b.n	8003b10 <__ssvfiscanf_r+0x1d0>
 8003b60:	4629      	mov	r1, r5
 8003b62:	4640      	mov	r0, r8
 8003b64:	f000 fb3c 	bl	80041e0 <__sccl>
 8003b68:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b70:	9341      	str	r3, [sp, #260]	@ 0x104
 8003b72:	2301      	movs	r3, #1
 8003b74:	e7d7      	b.n	8003b26 <__ssvfiscanf_r+0x1e6>
 8003b76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b7c:	9341      	str	r3, [sp, #260]	@ 0x104
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e7d1      	b.n	8003b26 <__ssvfiscanf_r+0x1e6>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e7cf      	b.n	8003b26 <__ssvfiscanf_r+0x1e6>
 8003b86:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003b88:	06c3      	lsls	r3, r0, #27
 8003b8a:	f53f aefd 	bmi.w	8003988 <__ssvfiscanf_r+0x48>
 8003b8e:	9b00      	ldr	r3, [sp, #0]
 8003b90:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003b92:	1d19      	adds	r1, r3, #4
 8003b94:	9100      	str	r1, [sp, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	07c0      	lsls	r0, r0, #31
 8003b9a:	bf4c      	ite	mi
 8003b9c:	801a      	strhmi	r2, [r3, #0]
 8003b9e:	601a      	strpl	r2, [r3, #0]
 8003ba0:	e6f2      	b.n	8003988 <__ssvfiscanf_r+0x48>
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003ba8:	4798      	blx	r3
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d0bf      	beq.n	8003b2e <__ssvfiscanf_r+0x1ee>
 8003bae:	e79f      	b.n	8003af0 <__ssvfiscanf_r+0x1b0>
 8003bb0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003bb2:	3201      	adds	r2, #1
 8003bb4:	9245      	str	r2, [sp, #276]	@ 0x114
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	3a01      	subs	r2, #1
 8003bba:	2a00      	cmp	r2, #0
 8003bbc:	6062      	str	r2, [r4, #4]
 8003bbe:	dd02      	ble.n	8003bc6 <__ssvfiscanf_r+0x286>
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	e7b6      	b.n	8003b34 <__ssvfiscanf_r+0x1f4>
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4630      	mov	r0, r6
 8003bca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003bcc:	4798      	blx	r3
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d0b0      	beq.n	8003b34 <__ssvfiscanf_r+0x1f4>
 8003bd2:	e78d      	b.n	8003af0 <__ssvfiscanf_r+0x1b0>
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	dc06      	bgt.n	8003be6 <__ssvfiscanf_r+0x2a6>
 8003bd8:	466b      	mov	r3, sp
 8003bda:	4622      	mov	r2, r4
 8003bdc:	4630      	mov	r0, r6
 8003bde:	a941      	add	r1, sp, #260	@ 0x104
 8003be0:	f000 fa0c 	bl	8003ffc <_scanf_i>
 8003be4:	e7b4      	b.n	8003b50 <__ssvfiscanf_r+0x210>
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <__ssvfiscanf_r+0x2cc>)
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f43f aecd 	beq.w	8003988 <__ssvfiscanf_r+0x48>
 8003bee:	466b      	mov	r3, sp
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	a941      	add	r1, sp, #260	@ 0x104
 8003bf6:	f3af 8000 	nop.w
 8003bfa:	e7a9      	b.n	8003b50 <__ssvfiscanf_r+0x210>
 8003bfc:	08003891 	.word	0x08003891
 8003c00:	08003907 	.word	0x08003907
 8003c04:	080047a3 	.word	0x080047a3
 8003c08:	0800475a 	.word	0x0800475a
 8003c0c:	00000000 	.word	0x00000000
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	065b      	lsls	r3, r3, #25
 8003c14:	f53f af70 	bmi.w	8003af8 <__ssvfiscanf_r+0x1b8>
 8003c18:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c20:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003c22:	e7f9      	b.n	8003c18 <__ssvfiscanf_r+0x2d8>

08003c24 <_printf_common>:
 8003c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c28:	4616      	mov	r6, r2
 8003c2a:	4698      	mov	r8, r3
 8003c2c:	688a      	ldr	r2, [r1, #8]
 8003c2e:	690b      	ldr	r3, [r1, #16]
 8003c30:	4607      	mov	r7, r0
 8003c32:	4293      	cmp	r3, r2
 8003c34:	bfb8      	it	lt
 8003c36:	4613      	movlt	r3, r2
 8003c38:	6033      	str	r3, [r6, #0]
 8003c3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c3e:	460c      	mov	r4, r1
 8003c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c44:	b10a      	cbz	r2, 8003c4a <_printf_common+0x26>
 8003c46:	3301      	adds	r3, #1
 8003c48:	6033      	str	r3, [r6, #0]
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	0699      	lsls	r1, r3, #26
 8003c4e:	bf42      	ittt	mi
 8003c50:	6833      	ldrmi	r3, [r6, #0]
 8003c52:	3302      	addmi	r3, #2
 8003c54:	6033      	strmi	r3, [r6, #0]
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	f015 0506 	ands.w	r5, r5, #6
 8003c5c:	d106      	bne.n	8003c6c <_printf_common+0x48>
 8003c5e:	f104 0a19 	add.w	sl, r4, #25
 8003c62:	68e3      	ldr	r3, [r4, #12]
 8003c64:	6832      	ldr	r2, [r6, #0]
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	42ab      	cmp	r3, r5
 8003c6a:	dc2b      	bgt.n	8003cc4 <_printf_common+0xa0>
 8003c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	3b00      	subs	r3, #0
 8003c74:	bf18      	it	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	0692      	lsls	r2, r2, #26
 8003c7a:	d430      	bmi.n	8003cde <_printf_common+0xba>
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	4638      	mov	r0, r7
 8003c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c84:	47c8      	blx	r9
 8003c86:	3001      	adds	r0, #1
 8003c88:	d023      	beq.n	8003cd2 <_printf_common+0xae>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	6922      	ldr	r2, [r4, #16]
 8003c8e:	f003 0306 	and.w	r3, r3, #6
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	bf14      	ite	ne
 8003c96:	2500      	movne	r5, #0
 8003c98:	6833      	ldreq	r3, [r6, #0]
 8003c9a:	f04f 0600 	mov.w	r6, #0
 8003c9e:	bf08      	it	eq
 8003ca0:	68e5      	ldreq	r5, [r4, #12]
 8003ca2:	f104 041a 	add.w	r4, r4, #26
 8003ca6:	bf08      	it	eq
 8003ca8:	1aed      	subeq	r5, r5, r3
 8003caa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cae:	bf08      	it	eq
 8003cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	bfc4      	itt	gt
 8003cb8:	1a9b      	subgt	r3, r3, r2
 8003cba:	18ed      	addgt	r5, r5, r3
 8003cbc:	42b5      	cmp	r5, r6
 8003cbe:	d11a      	bne.n	8003cf6 <_printf_common+0xd2>
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	e008      	b.n	8003cd6 <_printf_common+0xb2>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	4641      	mov	r1, r8
 8003cca:	4638      	mov	r0, r7
 8003ccc:	47c8      	blx	r9
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d103      	bne.n	8003cda <_printf_common+0xb6>
 8003cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cda:	3501      	adds	r5, #1
 8003cdc:	e7c1      	b.n	8003c62 <_printf_common+0x3e>
 8003cde:	2030      	movs	r0, #48	@ 0x30
 8003ce0:	18e1      	adds	r1, r4, r3
 8003ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cec:	4422      	add	r2, r4
 8003cee:	3302      	adds	r3, #2
 8003cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cf4:	e7c2      	b.n	8003c7c <_printf_common+0x58>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	47c8      	blx	r9
 8003d00:	3001      	adds	r0, #1
 8003d02:	d0e6      	beq.n	8003cd2 <_printf_common+0xae>
 8003d04:	3601      	adds	r6, #1
 8003d06:	e7d9      	b.n	8003cbc <_printf_common+0x98>

08003d08 <_printf_i>:
 8003d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	7e0f      	ldrb	r7, [r1, #24]
 8003d0e:	4691      	mov	r9, r2
 8003d10:	2f78      	cmp	r7, #120	@ 0x78
 8003d12:	4680      	mov	r8, r0
 8003d14:	460c      	mov	r4, r1
 8003d16:	469a      	mov	sl, r3
 8003d18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d1e:	d807      	bhi.n	8003d30 <_printf_i+0x28>
 8003d20:	2f62      	cmp	r7, #98	@ 0x62
 8003d22:	d80a      	bhi.n	8003d3a <_printf_i+0x32>
 8003d24:	2f00      	cmp	r7, #0
 8003d26:	f000 80d3 	beq.w	8003ed0 <_printf_i+0x1c8>
 8003d2a:	2f58      	cmp	r7, #88	@ 0x58
 8003d2c:	f000 80ba 	beq.w	8003ea4 <_printf_i+0x19c>
 8003d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d38:	e03a      	b.n	8003db0 <_printf_i+0xa8>
 8003d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d3e:	2b15      	cmp	r3, #21
 8003d40:	d8f6      	bhi.n	8003d30 <_printf_i+0x28>
 8003d42:	a101      	add	r1, pc, #4	@ (adr r1, 8003d48 <_printf_i+0x40>)
 8003d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d48:	08003da1 	.word	0x08003da1
 8003d4c:	08003db5 	.word	0x08003db5
 8003d50:	08003d31 	.word	0x08003d31
 8003d54:	08003d31 	.word	0x08003d31
 8003d58:	08003d31 	.word	0x08003d31
 8003d5c:	08003d31 	.word	0x08003d31
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003d31 	.word	0x08003d31
 8003d68:	08003d31 	.word	0x08003d31
 8003d6c:	08003d31 	.word	0x08003d31
 8003d70:	08003d31 	.word	0x08003d31
 8003d74:	08003eb7 	.word	0x08003eb7
 8003d78:	08003ddf 	.word	0x08003ddf
 8003d7c:	08003e71 	.word	0x08003e71
 8003d80:	08003d31 	.word	0x08003d31
 8003d84:	08003d31 	.word	0x08003d31
 8003d88:	08003ed9 	.word	0x08003ed9
 8003d8c:	08003d31 	.word	0x08003d31
 8003d90:	08003ddf 	.word	0x08003ddf
 8003d94:	08003d31 	.word	0x08003d31
 8003d98:	08003d31 	.word	0x08003d31
 8003d9c:	08003e79 	.word	0x08003e79
 8003da0:	6833      	ldr	r3, [r6, #0]
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6032      	str	r2, [r6, #0]
 8003da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003db0:	2301      	movs	r3, #1
 8003db2:	e09e      	b.n	8003ef2 <_printf_i+0x1ea>
 8003db4:	6833      	ldr	r3, [r6, #0]
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	1d19      	adds	r1, r3, #4
 8003dba:	6031      	str	r1, [r6, #0]
 8003dbc:	0606      	lsls	r6, r0, #24
 8003dbe:	d501      	bpl.n	8003dc4 <_printf_i+0xbc>
 8003dc0:	681d      	ldr	r5, [r3, #0]
 8003dc2:	e003      	b.n	8003dcc <_printf_i+0xc4>
 8003dc4:	0645      	lsls	r5, r0, #25
 8003dc6:	d5fb      	bpl.n	8003dc0 <_printf_i+0xb8>
 8003dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	da03      	bge.n	8003dd8 <_printf_i+0xd0>
 8003dd0:	232d      	movs	r3, #45	@ 0x2d
 8003dd2:	426d      	negs	r5, r5
 8003dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd8:	230a      	movs	r3, #10
 8003dda:	4859      	ldr	r0, [pc, #356]	@ (8003f40 <_printf_i+0x238>)
 8003ddc:	e011      	b.n	8003e02 <_printf_i+0xfa>
 8003dde:	6821      	ldr	r1, [r4, #0]
 8003de0:	6833      	ldr	r3, [r6, #0]
 8003de2:	0608      	lsls	r0, r1, #24
 8003de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003de8:	d402      	bmi.n	8003df0 <_printf_i+0xe8>
 8003dea:	0649      	lsls	r1, r1, #25
 8003dec:	bf48      	it	mi
 8003dee:	b2ad      	uxthmi	r5, r5
 8003df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	bf14      	ite	ne
 8003df6:	230a      	movne	r3, #10
 8003df8:	2308      	moveq	r3, #8
 8003dfa:	4851      	ldr	r0, [pc, #324]	@ (8003f40 <_printf_i+0x238>)
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e02:	6866      	ldr	r6, [r4, #4]
 8003e04:	2e00      	cmp	r6, #0
 8003e06:	bfa8      	it	ge
 8003e08:	6821      	ldrge	r1, [r4, #0]
 8003e0a:	60a6      	str	r6, [r4, #8]
 8003e0c:	bfa4      	itt	ge
 8003e0e:	f021 0104 	bicge.w	r1, r1, #4
 8003e12:	6021      	strge	r1, [r4, #0]
 8003e14:	b90d      	cbnz	r5, 8003e1a <_printf_i+0x112>
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	d04b      	beq.n	8003eb2 <_printf_i+0x1aa>
 8003e1a:	4616      	mov	r6, r2
 8003e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e20:	fb03 5711 	mls	r7, r3, r1, r5
 8003e24:	5dc7      	ldrb	r7, [r0, r7]
 8003e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e2a:	462f      	mov	r7, r5
 8003e2c:	42bb      	cmp	r3, r7
 8003e2e:	460d      	mov	r5, r1
 8003e30:	d9f4      	bls.n	8003e1c <_printf_i+0x114>
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d10b      	bne.n	8003e4e <_printf_i+0x146>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	07df      	lsls	r7, r3, #31
 8003e3a:	d508      	bpl.n	8003e4e <_printf_i+0x146>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	6861      	ldr	r1, [r4, #4]
 8003e40:	4299      	cmp	r1, r3
 8003e42:	bfde      	ittt	le
 8003e44:	2330      	movle	r3, #48	@ 0x30
 8003e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e4e:	1b92      	subs	r2, r2, r6
 8003e50:	6122      	str	r2, [r4, #16]
 8003e52:	464b      	mov	r3, r9
 8003e54:	4621      	mov	r1, r4
 8003e56:	4640      	mov	r0, r8
 8003e58:	f8cd a000 	str.w	sl, [sp]
 8003e5c:	aa03      	add	r2, sp, #12
 8003e5e:	f7ff fee1 	bl	8003c24 <_printf_common>
 8003e62:	3001      	adds	r0, #1
 8003e64:	d14a      	bne.n	8003efc <_printf_i+0x1f4>
 8003e66:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6a:	b004      	add	sp, #16
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f043 0320 	orr.w	r3, r3, #32
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	2778      	movs	r7, #120	@ 0x78
 8003e7a:	4832      	ldr	r0, [pc, #200]	@ (8003f44 <_printf_i+0x23c>)
 8003e7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	6831      	ldr	r1, [r6, #0]
 8003e84:	061f      	lsls	r7, r3, #24
 8003e86:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e8a:	d402      	bmi.n	8003e92 <_printf_i+0x18a>
 8003e8c:	065f      	lsls	r7, r3, #25
 8003e8e:	bf48      	it	mi
 8003e90:	b2ad      	uxthmi	r5, r5
 8003e92:	6031      	str	r1, [r6, #0]
 8003e94:	07d9      	lsls	r1, r3, #31
 8003e96:	bf44      	itt	mi
 8003e98:	f043 0320 	orrmi.w	r3, r3, #32
 8003e9c:	6023      	strmi	r3, [r4, #0]
 8003e9e:	b11d      	cbz	r5, 8003ea8 <_printf_i+0x1a0>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	e7ab      	b.n	8003dfc <_printf_i+0xf4>
 8003ea4:	4826      	ldr	r0, [pc, #152]	@ (8003f40 <_printf_i+0x238>)
 8003ea6:	e7e9      	b.n	8003e7c <_printf_i+0x174>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	f023 0320 	bic.w	r3, r3, #32
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	e7f6      	b.n	8003ea0 <_printf_i+0x198>
 8003eb2:	4616      	mov	r6, r2
 8003eb4:	e7bd      	b.n	8003e32 <_printf_i+0x12a>
 8003eb6:	6833      	ldr	r3, [r6, #0]
 8003eb8:	6825      	ldr	r5, [r4, #0]
 8003eba:	1d18      	adds	r0, r3, #4
 8003ebc:	6961      	ldr	r1, [r4, #20]
 8003ebe:	6030      	str	r0, [r6, #0]
 8003ec0:	062e      	lsls	r6, r5, #24
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	d501      	bpl.n	8003eca <_printf_i+0x1c2>
 8003ec6:	6019      	str	r1, [r3, #0]
 8003ec8:	e002      	b.n	8003ed0 <_printf_i+0x1c8>
 8003eca:	0668      	lsls	r0, r5, #25
 8003ecc:	d5fb      	bpl.n	8003ec6 <_printf_i+0x1be>
 8003ece:	8019      	strh	r1, [r3, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4616      	mov	r6, r2
 8003ed4:	6123      	str	r3, [r4, #16]
 8003ed6:	e7bc      	b.n	8003e52 <_printf_i+0x14a>
 8003ed8:	6833      	ldr	r3, [r6, #0]
 8003eda:	2100      	movs	r1, #0
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	6032      	str	r2, [r6, #0]
 8003ee0:	681e      	ldr	r6, [r3, #0]
 8003ee2:	6862      	ldr	r2, [r4, #4]
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 fa17 	bl	8004318 <memchr>
 8003eea:	b108      	cbz	r0, 8003ef0 <_printf_i+0x1e8>
 8003eec:	1b80      	subs	r0, r0, r6
 8003eee:	6060      	str	r0, [r4, #4]
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	6123      	str	r3, [r4, #16]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003efa:	e7aa      	b.n	8003e52 <_printf_i+0x14a>
 8003efc:	4632      	mov	r2, r6
 8003efe:	4649      	mov	r1, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	47d0      	blx	sl
 8003f06:	3001      	adds	r0, #1
 8003f08:	d0ad      	beq.n	8003e66 <_printf_i+0x15e>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	079b      	lsls	r3, r3, #30
 8003f0e:	d413      	bmi.n	8003f38 <_printf_i+0x230>
 8003f10:	68e0      	ldr	r0, [r4, #12]
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	4298      	cmp	r0, r3
 8003f16:	bfb8      	it	lt
 8003f18:	4618      	movlt	r0, r3
 8003f1a:	e7a6      	b.n	8003e6a <_printf_i+0x162>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4632      	mov	r2, r6
 8003f20:	4649      	mov	r1, r9
 8003f22:	4640      	mov	r0, r8
 8003f24:	47d0      	blx	sl
 8003f26:	3001      	adds	r0, #1
 8003f28:	d09d      	beq.n	8003e66 <_printf_i+0x15e>
 8003f2a:	3501      	adds	r5, #1
 8003f2c:	68e3      	ldr	r3, [r4, #12]
 8003f2e:	9903      	ldr	r1, [sp, #12]
 8003f30:	1a5b      	subs	r3, r3, r1
 8003f32:	42ab      	cmp	r3, r5
 8003f34:	dcf2      	bgt.n	8003f1c <_printf_i+0x214>
 8003f36:	e7eb      	b.n	8003f10 <_printf_i+0x208>
 8003f38:	2500      	movs	r5, #0
 8003f3a:	f104 0619 	add.w	r6, r4, #25
 8003f3e:	e7f5      	b.n	8003f2c <_printf_i+0x224>
 8003f40:	08004765 	.word	0x08004765
 8003f44:	08004776 	.word	0x08004776

08003f48 <_scanf_chars>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	688a      	ldr	r2, [r1, #8]
 8003f50:	4680      	mov	r8, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	b932      	cbnz	r2, 8003f64 <_scanf_chars+0x1c>
 8003f56:	698a      	ldr	r2, [r1, #24]
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	f04f 32ff 	movne.w	r2, #4294967295
 8003f60:	2201      	moveq	r2, #1
 8003f62:	608a      	str	r2, [r1, #8]
 8003f64:	2700      	movs	r7, #0
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003ff8 <_scanf_chars+0xb0>
 8003f6c:	06d1      	lsls	r1, r2, #27
 8003f6e:	bf5f      	itttt	pl
 8003f70:	681a      	ldrpl	r2, [r3, #0]
 8003f72:	1d11      	addpl	r1, r2, #4
 8003f74:	6019      	strpl	r1, [r3, #0]
 8003f76:	6816      	ldrpl	r6, [r2, #0]
 8003f78:	69a0      	ldr	r0, [r4, #24]
 8003f7a:	b188      	cbz	r0, 8003fa0 <_scanf_chars+0x58>
 8003f7c:	2801      	cmp	r0, #1
 8003f7e:	d107      	bne.n	8003f90 <_scanf_chars+0x48>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	6963      	ldr	r3, [r4, #20]
 8003f86:	5c9b      	ldrb	r3, [r3, r2]
 8003f88:	b953      	cbnz	r3, 8003fa0 <_scanf_chars+0x58>
 8003f8a:	2f00      	cmp	r7, #0
 8003f8c:	d031      	beq.n	8003ff2 <_scanf_chars+0xaa>
 8003f8e:	e022      	b.n	8003fd6 <_scanf_chars+0x8e>
 8003f90:	2802      	cmp	r0, #2
 8003f92:	d120      	bne.n	8003fd6 <_scanf_chars+0x8e>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003f9c:	071b      	lsls	r3, r3, #28
 8003f9e:	d41a      	bmi.n	8003fd6 <_scanf_chars+0x8e>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	3701      	adds	r7, #1
 8003fa4:	06da      	lsls	r2, r3, #27
 8003fa6:	bf5e      	ittt	pl
 8003fa8:	682b      	ldrpl	r3, [r5, #0]
 8003faa:	781b      	ldrbpl	r3, [r3, #0]
 8003fac:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003fb0:	682a      	ldr	r2, [r5, #0]
 8003fb2:	686b      	ldr	r3, [r5, #4]
 8003fb4:	3201      	adds	r2, #1
 8003fb6:	602a      	str	r2, [r5, #0]
 8003fb8:	68a2      	ldr	r2, [r4, #8]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	606b      	str	r3, [r5, #4]
 8003fc0:	60a2      	str	r2, [r4, #8]
 8003fc2:	b142      	cbz	r2, 8003fd6 <_scanf_chars+0x8e>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dcd7      	bgt.n	8003f78 <_scanf_chars+0x30>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003fd0:	4798      	blx	r3
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0d0      	beq.n	8003f78 <_scanf_chars+0x30>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	f013 0310 	ands.w	r3, r3, #16
 8003fdc:	d105      	bne.n	8003fea <_scanf_chars+0xa2>
 8003fde:	68e2      	ldr	r2, [r4, #12]
 8003fe0:	3201      	adds	r2, #1
 8003fe2:	60e2      	str	r2, [r4, #12]
 8003fe4:	69a2      	ldr	r2, [r4, #24]
 8003fe6:	b102      	cbz	r2, 8003fea <_scanf_chars+0xa2>
 8003fe8:	7033      	strb	r3, [r6, #0]
 8003fea:	2000      	movs	r0, #0
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	443b      	add	r3, r7
 8003ff0:	6123      	str	r3, [r4, #16]
 8003ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ff6:	bf00      	nop
 8003ff8:	080047a3 	.word	0x080047a3

08003ffc <_scanf_i>:
 8003ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	460c      	mov	r4, r1
 8004002:	4698      	mov	r8, r3
 8004004:	4b72      	ldr	r3, [pc, #456]	@ (80041d0 <_scanf_i+0x1d4>)
 8004006:	b087      	sub	sp, #28
 8004008:	4682      	mov	sl, r0
 800400a:	4616      	mov	r6, r2
 800400c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004010:	ab03      	add	r3, sp, #12
 8004012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004016:	4b6f      	ldr	r3, [pc, #444]	@ (80041d4 <_scanf_i+0x1d8>)
 8004018:	69a1      	ldr	r1, [r4, #24]
 800401a:	4a6f      	ldr	r2, [pc, #444]	@ (80041d8 <_scanf_i+0x1dc>)
 800401c:	4627      	mov	r7, r4
 800401e:	2903      	cmp	r1, #3
 8004020:	bf08      	it	eq
 8004022:	461a      	moveq	r2, r3
 8004024:	68a3      	ldr	r3, [r4, #8]
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	1e5a      	subs	r2, r3, #1
 800402a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800402e:	bf81      	itttt	hi
 8004030:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004034:	eb03 0905 	addhi.w	r9, r3, r5
 8004038:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800403c:	60a3      	strhi	r3, [r4, #8]
 800403e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004042:	bf98      	it	ls
 8004044:	f04f 0900 	movls.w	r9, #0
 8004048:	463d      	mov	r5, r7
 800404a:	f04f 0b00 	mov.w	fp, #0
 800404e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004052:	6023      	str	r3, [r4, #0]
 8004054:	6831      	ldr	r1, [r6, #0]
 8004056:	ab03      	add	r3, sp, #12
 8004058:	2202      	movs	r2, #2
 800405a:	7809      	ldrb	r1, [r1, #0]
 800405c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004060:	f000 f95a 	bl	8004318 <memchr>
 8004064:	b328      	cbz	r0, 80040b2 <_scanf_i+0xb6>
 8004066:	f1bb 0f01 	cmp.w	fp, #1
 800406a:	d159      	bne.n	8004120 <_scanf_i+0x124>
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	b92a      	cbnz	r2, 800407c <_scanf_i+0x80>
 8004070:	2108      	movs	r1, #8
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	6061      	str	r1, [r4, #4]
 8004076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004082:	6022      	str	r2, [r4, #0]
 8004084:	68a2      	ldr	r2, [r4, #8]
 8004086:	1e51      	subs	r1, r2, #1
 8004088:	60a1      	str	r1, [r4, #8]
 800408a:	b192      	cbz	r2, 80040b2 <_scanf_i+0xb6>
 800408c:	6832      	ldr	r2, [r6, #0]
 800408e:	1c51      	adds	r1, r2, #1
 8004090:	6031      	str	r1, [r6, #0]
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	f805 2b01 	strb.w	r2, [r5], #1
 8004098:	6872      	ldr	r2, [r6, #4]
 800409a:	3a01      	subs	r2, #1
 800409c:	2a00      	cmp	r2, #0
 800409e:	6072      	str	r2, [r6, #4]
 80040a0:	dc07      	bgt.n	80040b2 <_scanf_i+0xb6>
 80040a2:	4631      	mov	r1, r6
 80040a4:	4650      	mov	r0, sl
 80040a6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80040aa:	4790      	blx	r2
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f040 8085 	bne.w	80041bc <_scanf_i+0x1c0>
 80040b2:	f10b 0b01 	add.w	fp, fp, #1
 80040b6:	f1bb 0f03 	cmp.w	fp, #3
 80040ba:	d1cb      	bne.n	8004054 <_scanf_i+0x58>
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	b90b      	cbnz	r3, 80040c4 <_scanf_i+0xc8>
 80040c0:	230a      	movs	r3, #10
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	6863      	ldr	r3, [r4, #4]
 80040c6:	4945      	ldr	r1, [pc, #276]	@ (80041dc <_scanf_i+0x1e0>)
 80040c8:	6960      	ldr	r0, [r4, #20]
 80040ca:	1ac9      	subs	r1, r1, r3
 80040cc:	f000 f888 	bl	80041e0 <__sccl>
 80040d0:	f04f 0b00 	mov.w	fp, #0
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d03d      	beq.n	8004158 <_scanf_i+0x15c>
 80040dc:	6831      	ldr	r1, [r6, #0]
 80040de:	6960      	ldr	r0, [r4, #20]
 80040e0:	f891 c000 	ldrb.w	ip, [r1]
 80040e4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d035      	beq.n	8004158 <_scanf_i+0x15c>
 80040ec:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80040f0:	d124      	bne.n	800413c <_scanf_i+0x140>
 80040f2:	0510      	lsls	r0, r2, #20
 80040f4:	d522      	bpl.n	800413c <_scanf_i+0x140>
 80040f6:	f10b 0b01 	add.w	fp, fp, #1
 80040fa:	f1b9 0f00 	cmp.w	r9, #0
 80040fe:	d003      	beq.n	8004108 <_scanf_i+0x10c>
 8004100:	3301      	adds	r3, #1
 8004102:	f109 39ff 	add.w	r9, r9, #4294967295
 8004106:	60a3      	str	r3, [r4, #8]
 8004108:	6873      	ldr	r3, [r6, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	6073      	str	r3, [r6, #4]
 8004110:	dd1b      	ble.n	800414a <_scanf_i+0x14e>
 8004112:	6833      	ldr	r3, [r6, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	6033      	str	r3, [r6, #0]
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	3b01      	subs	r3, #1
 800411c:	60a3      	str	r3, [r4, #8]
 800411e:	e7d9      	b.n	80040d4 <_scanf_i+0xd8>
 8004120:	f1bb 0f02 	cmp.w	fp, #2
 8004124:	d1ae      	bne.n	8004084 <_scanf_i+0x88>
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800412c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004130:	d1bf      	bne.n	80040b2 <_scanf_i+0xb6>
 8004132:	2110      	movs	r1, #16
 8004134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004138:	6061      	str	r1, [r4, #4]
 800413a:	e7a2      	b.n	8004082 <_scanf_i+0x86>
 800413c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	780b      	ldrb	r3, [r1, #0]
 8004144:	f805 3b01 	strb.w	r3, [r5], #1
 8004148:	e7de      	b.n	8004108 <_scanf_i+0x10c>
 800414a:	4631      	mov	r1, r6
 800414c:	4650      	mov	r0, sl
 800414e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004152:	4798      	blx	r3
 8004154:	2800      	cmp	r0, #0
 8004156:	d0df      	beq.n	8004118 <_scanf_i+0x11c>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	05d9      	lsls	r1, r3, #23
 800415c:	d50d      	bpl.n	800417a <_scanf_i+0x17e>
 800415e:	42bd      	cmp	r5, r7
 8004160:	d909      	bls.n	8004176 <_scanf_i+0x17a>
 8004162:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004166:	4632      	mov	r2, r6
 8004168:	4650      	mov	r0, sl
 800416a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800416e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004172:	4798      	blx	r3
 8004174:	464d      	mov	r5, r9
 8004176:	42bd      	cmp	r5, r7
 8004178:	d028      	beq.n	80041cc <_scanf_i+0x1d0>
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	f012 0210 	ands.w	r2, r2, #16
 8004180:	d113      	bne.n	80041aa <_scanf_i+0x1ae>
 8004182:	702a      	strb	r2, [r5, #0]
 8004184:	4639      	mov	r1, r7
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	4650      	mov	r0, sl
 800418a:	9e01      	ldr	r6, [sp, #4]
 800418c:	47b0      	blx	r6
 800418e:	f8d8 3000 	ldr.w	r3, [r8]
 8004192:	6821      	ldr	r1, [r4, #0]
 8004194:	1d1a      	adds	r2, r3, #4
 8004196:	f8c8 2000 	str.w	r2, [r8]
 800419a:	f011 0f20 	tst.w	r1, #32
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	d00f      	beq.n	80041c2 <_scanf_i+0x1c6>
 80041a2:	6018      	str	r0, [r3, #0]
 80041a4:	68e3      	ldr	r3, [r4, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60e3      	str	r3, [r4, #12]
 80041aa:	2000      	movs	r0, #0
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	1bed      	subs	r5, r5, r7
 80041b0:	445d      	add	r5, fp
 80041b2:	442b      	add	r3, r5
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	b007      	add	sp, #28
 80041b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041bc:	f04f 0b00 	mov.w	fp, #0
 80041c0:	e7ca      	b.n	8004158 <_scanf_i+0x15c>
 80041c2:	07ca      	lsls	r2, r1, #31
 80041c4:	bf4c      	ite	mi
 80041c6:	8018      	strhmi	r0, [r3, #0]
 80041c8:	6018      	strpl	r0, [r3, #0]
 80041ca:	e7eb      	b.n	80041a4 <_scanf_i+0x1a8>
 80041cc:	2001      	movs	r0, #1
 80041ce:	e7f2      	b.n	80041b6 <_scanf_i+0x1ba>
 80041d0:	08004710 	.word	0x08004710
 80041d4:	080044a1 	.word	0x080044a1
 80041d8:	08004581 	.word	0x08004581
 80041dc:	08004797 	.word	0x08004797

080041e0 <__sccl>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	780b      	ldrb	r3, [r1, #0]
 80041e4:	4604      	mov	r4, r0
 80041e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80041e8:	bf0b      	itete	eq
 80041ea:	784b      	ldrbeq	r3, [r1, #1]
 80041ec:	1c4a      	addne	r2, r1, #1
 80041ee:	1c8a      	addeq	r2, r1, #2
 80041f0:	2100      	movne	r1, #0
 80041f2:	bf08      	it	eq
 80041f4:	2101      	moveq	r1, #1
 80041f6:	3801      	subs	r0, #1
 80041f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80041fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004200:	42a8      	cmp	r0, r5
 8004202:	d1fb      	bne.n	80041fc <__sccl+0x1c>
 8004204:	b90b      	cbnz	r3, 800420a <__sccl+0x2a>
 8004206:	1e50      	subs	r0, r2, #1
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	f081 0101 	eor.w	r1, r1, #1
 800420e:	4610      	mov	r0, r2
 8004210:	54e1      	strb	r1, [r4, r3]
 8004212:	4602      	mov	r2, r0
 8004214:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004218:	2d2d      	cmp	r5, #45	@ 0x2d
 800421a:	d005      	beq.n	8004228 <__sccl+0x48>
 800421c:	2d5d      	cmp	r5, #93	@ 0x5d
 800421e:	d016      	beq.n	800424e <__sccl+0x6e>
 8004220:	2d00      	cmp	r5, #0
 8004222:	d0f1      	beq.n	8004208 <__sccl+0x28>
 8004224:	462b      	mov	r3, r5
 8004226:	e7f2      	b.n	800420e <__sccl+0x2e>
 8004228:	7846      	ldrb	r6, [r0, #1]
 800422a:	2e5d      	cmp	r6, #93	@ 0x5d
 800422c:	d0fa      	beq.n	8004224 <__sccl+0x44>
 800422e:	42b3      	cmp	r3, r6
 8004230:	dcf8      	bgt.n	8004224 <__sccl+0x44>
 8004232:	461a      	mov	r2, r3
 8004234:	3002      	adds	r0, #2
 8004236:	3201      	adds	r2, #1
 8004238:	4296      	cmp	r6, r2
 800423a:	54a1      	strb	r1, [r4, r2]
 800423c:	dcfb      	bgt.n	8004236 <__sccl+0x56>
 800423e:	1af2      	subs	r2, r6, r3
 8004240:	3a01      	subs	r2, #1
 8004242:	42b3      	cmp	r3, r6
 8004244:	bfa8      	it	ge
 8004246:	2200      	movge	r2, #0
 8004248:	1c5d      	adds	r5, r3, #1
 800424a:	18ab      	adds	r3, r5, r2
 800424c:	e7e1      	b.n	8004212 <__sccl+0x32>
 800424e:	4610      	mov	r0, r2
 8004250:	e7da      	b.n	8004208 <__sccl+0x28>

08004252 <__submore>:
 8004252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004256:	460c      	mov	r4, r1
 8004258:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800425a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800425e:	4299      	cmp	r1, r3
 8004260:	d11b      	bne.n	800429a <__submore+0x48>
 8004262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004266:	f7ff f92f 	bl	80034c8 <_malloc_r>
 800426a:	b918      	cbnz	r0, 8004274 <__submore+0x22>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004278:	63a3      	str	r3, [r4, #56]	@ 0x38
 800427a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800427e:	6360      	str	r0, [r4, #52]	@ 0x34
 8004280:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004284:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004288:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800428c:	7043      	strb	r3, [r0, #1]
 800428e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004292:	7003      	strb	r3, [r0, #0]
 8004294:	6020      	str	r0, [r4, #0]
 8004296:	2000      	movs	r0, #0
 8004298:	e7ea      	b.n	8004270 <__submore+0x1e>
 800429a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800429c:	0077      	lsls	r7, r6, #1
 800429e:	463a      	mov	r2, r7
 80042a0:	f000 f856 	bl	8004350 <_realloc_r>
 80042a4:	4605      	mov	r5, r0
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0e0      	beq.n	800426c <__submore+0x1a>
 80042aa:	eb00 0806 	add.w	r8, r0, r6
 80042ae:	4601      	mov	r1, r0
 80042b0:	4632      	mov	r2, r6
 80042b2:	4640      	mov	r0, r8
 80042b4:	f000 f83e 	bl	8004334 <memcpy>
 80042b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80042bc:	f8c4 8000 	str.w	r8, [r4]
 80042c0:	e7e9      	b.n	8004296 <__submore+0x44>

080042c2 <memmove>:
 80042c2:	4288      	cmp	r0, r1
 80042c4:	b510      	push	{r4, lr}
 80042c6:	eb01 0402 	add.w	r4, r1, r2
 80042ca:	d902      	bls.n	80042d2 <memmove+0x10>
 80042cc:	4284      	cmp	r4, r0
 80042ce:	4623      	mov	r3, r4
 80042d0:	d807      	bhi.n	80042e2 <memmove+0x20>
 80042d2:	1e43      	subs	r3, r0, #1
 80042d4:	42a1      	cmp	r1, r4
 80042d6:	d008      	beq.n	80042ea <memmove+0x28>
 80042d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042e0:	e7f8      	b.n	80042d4 <memmove+0x12>
 80042e2:	4601      	mov	r1, r0
 80042e4:	4402      	add	r2, r0
 80042e6:	428a      	cmp	r2, r1
 80042e8:	d100      	bne.n	80042ec <memmove+0x2a>
 80042ea:	bd10      	pop	{r4, pc}
 80042ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042f4:	e7f7      	b.n	80042e6 <memmove+0x24>
	...

080042f8 <_sbrk_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	2300      	movs	r3, #0
 80042fc:	4d05      	ldr	r5, [pc, #20]	@ (8004314 <_sbrk_r+0x1c>)
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fc fde0 	bl	8000ec8 <_sbrk>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_sbrk_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_sbrk_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200002d0 	.word	0x200002d0

08004318 <memchr>:
 8004318:	4603      	mov	r3, r0
 800431a:	b510      	push	{r4, lr}
 800431c:	b2c9      	uxtb	r1, r1
 800431e:	4402      	add	r2, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	4618      	mov	r0, r3
 8004324:	d101      	bne.n	800432a <memchr+0x12>
 8004326:	2000      	movs	r0, #0
 8004328:	e003      	b.n	8004332 <memchr+0x1a>
 800432a:	7804      	ldrb	r4, [r0, #0]
 800432c:	3301      	adds	r3, #1
 800432e:	428c      	cmp	r4, r1
 8004330:	d1f6      	bne.n	8004320 <memchr+0x8>
 8004332:	bd10      	pop	{r4, pc}

08004334 <memcpy>:
 8004334:	440a      	add	r2, r1
 8004336:	4291      	cmp	r1, r2
 8004338:	f100 33ff 	add.w	r3, r0, #4294967295
 800433c:	d100      	bne.n	8004340 <memcpy+0xc>
 800433e:	4770      	bx	lr
 8004340:	b510      	push	{r4, lr}
 8004342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004346:	4291      	cmp	r1, r2
 8004348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800434c:	d1f9      	bne.n	8004342 <memcpy+0xe>
 800434e:	bd10      	pop	{r4, pc}

08004350 <_realloc_r>:
 8004350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004354:	4680      	mov	r8, r0
 8004356:	4615      	mov	r5, r2
 8004358:	460c      	mov	r4, r1
 800435a:	b921      	cbnz	r1, 8004366 <_realloc_r+0x16>
 800435c:	4611      	mov	r1, r2
 800435e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004362:	f7ff b8b1 	b.w	80034c8 <_malloc_r>
 8004366:	b92a      	cbnz	r2, 8004374 <_realloc_r+0x24>
 8004368:	f7ff f844 	bl	80033f4 <_free_r>
 800436c:	2400      	movs	r4, #0
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004374:	f000 f906 	bl	8004584 <_malloc_usable_size_r>
 8004378:	4285      	cmp	r5, r0
 800437a:	4606      	mov	r6, r0
 800437c:	d802      	bhi.n	8004384 <_realloc_r+0x34>
 800437e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004382:	d8f4      	bhi.n	800436e <_realloc_r+0x1e>
 8004384:	4629      	mov	r1, r5
 8004386:	4640      	mov	r0, r8
 8004388:	f7ff f89e 	bl	80034c8 <_malloc_r>
 800438c:	4607      	mov	r7, r0
 800438e:	2800      	cmp	r0, #0
 8004390:	d0ec      	beq.n	800436c <_realloc_r+0x1c>
 8004392:	42b5      	cmp	r5, r6
 8004394:	462a      	mov	r2, r5
 8004396:	4621      	mov	r1, r4
 8004398:	bf28      	it	cs
 800439a:	4632      	movcs	r2, r6
 800439c:	f7ff ffca 	bl	8004334 <memcpy>
 80043a0:	4621      	mov	r1, r4
 80043a2:	4640      	mov	r0, r8
 80043a4:	f7ff f826 	bl	80033f4 <_free_r>
 80043a8:	463c      	mov	r4, r7
 80043aa:	e7e0      	b.n	800436e <_realloc_r+0x1e>

080043ac <_strtol_l.constprop.0>:
 80043ac:	2b24      	cmp	r3, #36	@ 0x24
 80043ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b2:	4686      	mov	lr, r0
 80043b4:	4690      	mov	r8, r2
 80043b6:	d801      	bhi.n	80043bc <_strtol_l.constprop.0+0x10>
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d106      	bne.n	80043ca <_strtol_l.constprop.0+0x1e>
 80043bc:	f7fe ffee 	bl	800339c <__errno>
 80043c0:	2316      	movs	r3, #22
 80043c2:	6003      	str	r3, [r0, #0]
 80043c4:	2000      	movs	r0, #0
 80043c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ca:	460d      	mov	r5, r1
 80043cc:	4833      	ldr	r0, [pc, #204]	@ (800449c <_strtol_l.constprop.0+0xf0>)
 80043ce:	462a      	mov	r2, r5
 80043d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043d4:	5d06      	ldrb	r6, [r0, r4]
 80043d6:	f016 0608 	ands.w	r6, r6, #8
 80043da:	d1f8      	bne.n	80043ce <_strtol_l.constprop.0+0x22>
 80043dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80043de:	d12d      	bne.n	800443c <_strtol_l.constprop.0+0x90>
 80043e0:	2601      	movs	r6, #1
 80043e2:	782c      	ldrb	r4, [r5, #0]
 80043e4:	1c95      	adds	r5, r2, #2
 80043e6:	f033 0210 	bics.w	r2, r3, #16
 80043ea:	d109      	bne.n	8004400 <_strtol_l.constprop.0+0x54>
 80043ec:	2c30      	cmp	r4, #48	@ 0x30
 80043ee:	d12a      	bne.n	8004446 <_strtol_l.constprop.0+0x9a>
 80043f0:	782a      	ldrb	r2, [r5, #0]
 80043f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80043f6:	2a58      	cmp	r2, #88	@ 0x58
 80043f8:	d125      	bne.n	8004446 <_strtol_l.constprop.0+0x9a>
 80043fa:	2310      	movs	r3, #16
 80043fc:	786c      	ldrb	r4, [r5, #1]
 80043fe:	3502      	adds	r5, #2
 8004400:	2200      	movs	r2, #0
 8004402:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004406:	f10c 3cff 	add.w	ip, ip, #4294967295
 800440a:	fbbc f9f3 	udiv	r9, ip, r3
 800440e:	4610      	mov	r0, r2
 8004410:	fb03 ca19 	mls	sl, r3, r9, ip
 8004414:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004418:	2f09      	cmp	r7, #9
 800441a:	d81b      	bhi.n	8004454 <_strtol_l.constprop.0+0xa8>
 800441c:	463c      	mov	r4, r7
 800441e:	42a3      	cmp	r3, r4
 8004420:	dd27      	ble.n	8004472 <_strtol_l.constprop.0+0xc6>
 8004422:	1c57      	adds	r7, r2, #1
 8004424:	d007      	beq.n	8004436 <_strtol_l.constprop.0+0x8a>
 8004426:	4581      	cmp	r9, r0
 8004428:	d320      	bcc.n	800446c <_strtol_l.constprop.0+0xc0>
 800442a:	d101      	bne.n	8004430 <_strtol_l.constprop.0+0x84>
 800442c:	45a2      	cmp	sl, r4
 800442e:	db1d      	blt.n	800446c <_strtol_l.constprop.0+0xc0>
 8004430:	2201      	movs	r2, #1
 8004432:	fb00 4003 	mla	r0, r0, r3, r4
 8004436:	f815 4b01 	ldrb.w	r4, [r5], #1
 800443a:	e7eb      	b.n	8004414 <_strtol_l.constprop.0+0x68>
 800443c:	2c2b      	cmp	r4, #43	@ 0x2b
 800443e:	bf04      	itt	eq
 8004440:	782c      	ldrbeq	r4, [r5, #0]
 8004442:	1c95      	addeq	r5, r2, #2
 8004444:	e7cf      	b.n	80043e6 <_strtol_l.constprop.0+0x3a>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1da      	bne.n	8004400 <_strtol_l.constprop.0+0x54>
 800444a:	2c30      	cmp	r4, #48	@ 0x30
 800444c:	bf0c      	ite	eq
 800444e:	2308      	moveq	r3, #8
 8004450:	230a      	movne	r3, #10
 8004452:	e7d5      	b.n	8004400 <_strtol_l.constprop.0+0x54>
 8004454:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004458:	2f19      	cmp	r7, #25
 800445a:	d801      	bhi.n	8004460 <_strtol_l.constprop.0+0xb4>
 800445c:	3c37      	subs	r4, #55	@ 0x37
 800445e:	e7de      	b.n	800441e <_strtol_l.constprop.0+0x72>
 8004460:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004464:	2f19      	cmp	r7, #25
 8004466:	d804      	bhi.n	8004472 <_strtol_l.constprop.0+0xc6>
 8004468:	3c57      	subs	r4, #87	@ 0x57
 800446a:	e7d8      	b.n	800441e <_strtol_l.constprop.0+0x72>
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	e7e1      	b.n	8004436 <_strtol_l.constprop.0+0x8a>
 8004472:	1c53      	adds	r3, r2, #1
 8004474:	d108      	bne.n	8004488 <_strtol_l.constprop.0+0xdc>
 8004476:	2322      	movs	r3, #34	@ 0x22
 8004478:	4660      	mov	r0, ip
 800447a:	f8ce 3000 	str.w	r3, [lr]
 800447e:	f1b8 0f00 	cmp.w	r8, #0
 8004482:	d0a0      	beq.n	80043c6 <_strtol_l.constprop.0+0x1a>
 8004484:	1e69      	subs	r1, r5, #1
 8004486:	e006      	b.n	8004496 <_strtol_l.constprop.0+0xea>
 8004488:	b106      	cbz	r6, 800448c <_strtol_l.constprop.0+0xe0>
 800448a:	4240      	negs	r0, r0
 800448c:	f1b8 0f00 	cmp.w	r8, #0
 8004490:	d099      	beq.n	80043c6 <_strtol_l.constprop.0+0x1a>
 8004492:	2a00      	cmp	r2, #0
 8004494:	d1f6      	bne.n	8004484 <_strtol_l.constprop.0+0xd8>
 8004496:	f8c8 1000 	str.w	r1, [r8]
 800449a:	e794      	b.n	80043c6 <_strtol_l.constprop.0+0x1a>
 800449c:	080047a3 	.word	0x080047a3

080044a0 <_strtol_r>:
 80044a0:	f7ff bf84 	b.w	80043ac <_strtol_l.constprop.0>

080044a4 <_strtoul_l.constprop.0>:
 80044a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044a8:	4686      	mov	lr, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	4e33      	ldr	r6, [pc, #204]	@ (800457c <_strtoul_l.constprop.0+0xd8>)
 80044ae:	4628      	mov	r0, r5
 80044b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b4:	5d37      	ldrb	r7, [r6, r4]
 80044b6:	f017 0708 	ands.w	r7, r7, #8
 80044ba:	d1f8      	bne.n	80044ae <_strtoul_l.constprop.0+0xa>
 80044bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80044be:	d12f      	bne.n	8004520 <_strtoul_l.constprop.0+0x7c>
 80044c0:	2701      	movs	r7, #1
 80044c2:	782c      	ldrb	r4, [r5, #0]
 80044c4:	1c85      	adds	r5, r0, #2
 80044c6:	f033 0010 	bics.w	r0, r3, #16
 80044ca:	d109      	bne.n	80044e0 <_strtoul_l.constprop.0+0x3c>
 80044cc:	2c30      	cmp	r4, #48	@ 0x30
 80044ce:	d12c      	bne.n	800452a <_strtoul_l.constprop.0+0x86>
 80044d0:	7828      	ldrb	r0, [r5, #0]
 80044d2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80044d6:	2858      	cmp	r0, #88	@ 0x58
 80044d8:	d127      	bne.n	800452a <_strtoul_l.constprop.0+0x86>
 80044da:	2310      	movs	r3, #16
 80044dc:	786c      	ldrb	r4, [r5, #1]
 80044de:	3502      	adds	r5, #2
 80044e0:	f04f 38ff 	mov.w	r8, #4294967295
 80044e4:	fbb8 f8f3 	udiv	r8, r8, r3
 80044e8:	2600      	movs	r6, #0
 80044ea:	fb03 f908 	mul.w	r9, r3, r8
 80044ee:	4630      	mov	r0, r6
 80044f0:	ea6f 0909 	mvn.w	r9, r9
 80044f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80044f8:	f1bc 0f09 	cmp.w	ip, #9
 80044fc:	d81c      	bhi.n	8004538 <_strtoul_l.constprop.0+0x94>
 80044fe:	4664      	mov	r4, ip
 8004500:	42a3      	cmp	r3, r4
 8004502:	dd2a      	ble.n	800455a <_strtoul_l.constprop.0+0xb6>
 8004504:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004508:	d007      	beq.n	800451a <_strtoul_l.constprop.0+0x76>
 800450a:	4580      	cmp	r8, r0
 800450c:	d322      	bcc.n	8004554 <_strtoul_l.constprop.0+0xb0>
 800450e:	d101      	bne.n	8004514 <_strtoul_l.constprop.0+0x70>
 8004510:	45a1      	cmp	r9, r4
 8004512:	db1f      	blt.n	8004554 <_strtoul_l.constprop.0+0xb0>
 8004514:	2601      	movs	r6, #1
 8004516:	fb00 4003 	mla	r0, r0, r3, r4
 800451a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800451e:	e7e9      	b.n	80044f4 <_strtoul_l.constprop.0+0x50>
 8004520:	2c2b      	cmp	r4, #43	@ 0x2b
 8004522:	bf04      	itt	eq
 8004524:	782c      	ldrbeq	r4, [r5, #0]
 8004526:	1c85      	addeq	r5, r0, #2
 8004528:	e7cd      	b.n	80044c6 <_strtoul_l.constprop.0+0x22>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d8      	bne.n	80044e0 <_strtoul_l.constprop.0+0x3c>
 800452e:	2c30      	cmp	r4, #48	@ 0x30
 8004530:	bf0c      	ite	eq
 8004532:	2308      	moveq	r3, #8
 8004534:	230a      	movne	r3, #10
 8004536:	e7d3      	b.n	80044e0 <_strtoul_l.constprop.0+0x3c>
 8004538:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800453c:	f1bc 0f19 	cmp.w	ip, #25
 8004540:	d801      	bhi.n	8004546 <_strtoul_l.constprop.0+0xa2>
 8004542:	3c37      	subs	r4, #55	@ 0x37
 8004544:	e7dc      	b.n	8004500 <_strtoul_l.constprop.0+0x5c>
 8004546:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800454a:	f1bc 0f19 	cmp.w	ip, #25
 800454e:	d804      	bhi.n	800455a <_strtoul_l.constprop.0+0xb6>
 8004550:	3c57      	subs	r4, #87	@ 0x57
 8004552:	e7d5      	b.n	8004500 <_strtoul_l.constprop.0+0x5c>
 8004554:	f04f 36ff 	mov.w	r6, #4294967295
 8004558:	e7df      	b.n	800451a <_strtoul_l.constprop.0+0x76>
 800455a:	1c73      	adds	r3, r6, #1
 800455c:	d106      	bne.n	800456c <_strtoul_l.constprop.0+0xc8>
 800455e:	2322      	movs	r3, #34	@ 0x22
 8004560:	4630      	mov	r0, r6
 8004562:	f8ce 3000 	str.w	r3, [lr]
 8004566:	b932      	cbnz	r2, 8004576 <_strtoul_l.constprop.0+0xd2>
 8004568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800456c:	b107      	cbz	r7, 8004570 <_strtoul_l.constprop.0+0xcc>
 800456e:	4240      	negs	r0, r0
 8004570:	2a00      	cmp	r2, #0
 8004572:	d0f9      	beq.n	8004568 <_strtoul_l.constprop.0+0xc4>
 8004574:	b106      	cbz	r6, 8004578 <_strtoul_l.constprop.0+0xd4>
 8004576:	1e69      	subs	r1, r5, #1
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	e7f5      	b.n	8004568 <_strtoul_l.constprop.0+0xc4>
 800457c:	080047a3 	.word	0x080047a3

08004580 <_strtoul_r>:
 8004580:	f7ff bf90 	b.w	80044a4 <_strtoul_l.constprop.0>

08004584 <_malloc_usable_size_r>:
 8004584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004588:	1f18      	subs	r0, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	bfbc      	itt	lt
 800458e:	580b      	ldrlt	r3, [r1, r0]
 8004590:	18c0      	addlt	r0, r0, r3
 8004592:	4770      	bx	lr

08004594 <_init>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr

080045a0 <_fini>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr
